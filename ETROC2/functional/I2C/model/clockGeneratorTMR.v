/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/clockGeneratorTMR.v                                                          *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:50                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/clockGenerator.v  *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 11:50:53.435702                                         *
 *           File Size         : 1116                                                               *
 *           MD5 hash          : 2ab3d29c0f84feb47a81af090be60319                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module clockGeneratorEnableTMR(
     input  enableA,
     input  enableB,
     input  enableC,
     output  enableVA,
     output  enableVB,
     output  enableVC
);
wor enableTmrErrorC;
wire enableVotedC;
wor enableTmrErrorB;
wire enableVotedB;
wor enableTmrErrorA;
wire enableVotedA;
assign enableVA =  enableVotedA;
assign enableVB =  enableVotedB;
assign enableVC =  enableVotedC;

majorityVoter enableVoterA (
          .inA(enableA),
          .inB(enableB),
          .inC(enableC),
          .out(enableVotedA),
          .tmrErr(enableTmrErrorA)
          );

majorityVoter enableVoterB (
          .inA(enableA),
          .inB(enableB),
          .inC(enableC),
          .out(enableVotedB),
          .tmrErr(enableTmrErrorB)
          );

majorityVoter enableVoterC (
          .inA(enableA),
          .inB(enableB),
          .inC(enableC),
          .out(enableVotedC),
          .tmrErr(enableTmrErrorC)
          );
endmodule

module clockGeneratorTMR(
     input  enableA,
     input  enableB,
     input  enableC,
     output  clkA,
     output  clkB,
     output  clkC
);
parameter    DelayElements=8;
wor clkEndTmrErrorC;
wire clkEndVotedC;
wor clkEndTmrErrorB;
wire clkEndVotedB;
wor clkEndTmrErrorA;
wire clkEndVotedA;
wire enableVA;
wire enableVB;
wire enableVC;

clockGeneratorEnableTMR CGE (
          .enableA(enableA),
          .enableB(enableB),
          .enableC(enableC),
          .enableVA(enableVA),
          .enableVB(enableVB),
          .enableVC(enableVC)
          );
wire [DelayElements:0] clkDelayedA;
wire [DelayElements:0] clkDelayedB;
wire [DelayElements:0] clkDelayedC;
wire clkEndA;
wire clkEndB;
wire clkEndC;
assign clkEndA =  clkDelayedA[DelayElements] ;
assign clkEndB =  clkDelayedB[DelayElements] ;
assign clkEndC =  clkDelayedC[DelayElements] ;

CKND2D4 ND_preserveA (
          .A1(clkEndVotedA),
          .A2(enableVA),
          .ZN(clkDelayedA[0] )
          );

CKND2D4 ND_preserveB (
          .A1(clkEndVotedB),
          .A2(enableVB),
          .ZN(clkDelayedB[0] )
          );

CKND2D4 ND_preserveC (
          .A1(clkEndVotedC),
          .A2(enableVC),
          .ZN(clkDelayedC[0] )
          );
assign clkA =  clkDelayedA[0] ;
assign clkB =  clkDelayedB[0] ;
assign clkC =  clkDelayedC[0] ;
genvar i;

generate
     for(i =  0;i<DelayElements;i =  i+1)
          begin : DL 

               clockGeneratorDelayElementTMR CGDE (
                         .clkInA(clkDelayedA[i] ),
                         .clkInB(clkDelayedB[i] ),
                         .clkInC(clkDelayedC[i] ),
                         .clkOutA(clkDelayedA[i+1] ),
                         .clkOutB(clkDelayedB[i+1] ),
                         .clkOutC(clkDelayedC[i+1] )
                         );
          end

endgenerate

majorityVoterTag clkEndVoterA (
          .inA(clkEndA),
          .inB(clkEndB),
          .inC(clkEndC),
          .out(clkEndVotedA),
          .tmrErr(clkEndTmrErrorA)
          );

majorityVoterTag clkEndVoterB (
          .inA(clkEndA),
          .inB(clkEndB),
          .inC(clkEndC),
          .out(clkEndVotedB),
          .tmrErr(clkEndTmrErrorB)
          );

majorityVoterTag clkEndVoterC (
          .inA(clkEndA),
          .inB(clkEndB),
          .inC(clkEndC),
          .out(clkEndVotedC),
          .tmrErr(clkEndTmrErrorC)
          );
endmodule

