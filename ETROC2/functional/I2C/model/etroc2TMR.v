/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/etroc2TMR.v                                                                  *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:51                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/etroc2.v          *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 11:51:38.802698                                         *
 *           File Size         : 7801                                                               *
 *           MD5 hash          : fc9b2ed5c5c2883f858dbe852f2af872                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module etroc2TMR(
     inout  SDA,
     inout  SCL,
     inout  RSTN,
     inout  A0,
     inout  A1
);
localparam    CERN_IO_DS_HIGH=1'b1;
localparam    CERN_IO_DS_LOW=1'b0;
localparam    CERN_IO_PULLENABLE=1'b1;
localparam    CERN_IO_PULLDISABLE=1'b0;
localparam    CERN_IO_PULLUP=1'b1;
localparam    CERN_IO_PULLDOWN=1'b0;
localparam    COLS=16;
localparam    HIGH_LOW_OUTS=50;
wire [7:0] regIn105C;
wire [7:0] regIn105B;
wire [7:0] regIn105A;
wire [7:0] regIn10FC;
wire [7:0] regIn10FB;
wire [7:0] regIn10FA;
wire [7:0] regIn10CC;
wire [7:0] regIn10CB;
wire [7:0] regIn10CA;
wire [7:0] regIn10DC;
wire [7:0] regIn10DB;
wire [7:0] regIn10DA;
wire [7:0] regIn109C;
wire [7:0] regIn109B;
wire [7:0] regIn109A;
wire [7:0] regIn107C;
wire [7:0] regIn107B;
wire [7:0] regIn107A;
wire [7:0] regIn10AC;
wire [7:0] regIn10AB;
wire [7:0] regIn10AA;
wire [7:0] regIn10BC;
wire [7:0] regIn10BB;
wire [7:0] regIn10BA;
wire [7:0] regIn100C;
wire [7:0] regIn100B;
wire [7:0] regIn100A;
wire [7:0] regIn10EC;
wire [7:0] regIn10EB;
wire [7:0] regIn10EA;
wire [7:0] regIn106C;
wire [7:0] regIn106B;
wire [7:0] regIn106A;
wire [7:0] regIn103C;
wire [7:0] regIn103B;
wire [7:0] regIn103A;
wire [7:0] regIn104C;
wire [7:0] regIn104B;
wire [7:0] regIn104A;
wire [7:0] regIn108C;
wire [7:0] regIn108B;
wire [7:0] regIn108A;
wire [7:0] regIn101C;
wire [7:0] regIn101B;
wire [7:0] regIn101A;
wire [7:0] regIn102C;
wire [7:0] regIn102B;
wire [7:0] regIn102A;
wor regOut15TmrError;
wire [7:0] regOut15B;
wire [7:0] regOut15C;
wire [7:0] regOut15A;
wor regOut0ETmrError;
wire [7:0] regOut0EB;
wire [7:0] regOut0EC;
wire [7:0] regOut0EA;
wor regOut1FTmrError;
wire [7:0] regOut1FB;
wire [7:0] regOut1FC;
wire [7:0] regOut1FA;
wor regOut00TmrError;
wire [7:0] regOut00B;
wire [7:0] regOut00C;
wire [7:0] regOut00A;
wor regOut09TmrError;
wire [7:0] regOut09B;
wire [7:0] regOut09C;
wire [7:0] regOut09A;
wor regOut12TmrError;
wire [7:0] regOut12B;
wire [7:0] regOut12C;
wire [7:0] regOut12A;
wor regOut0DTmrError;
wire [7:0] regOut0DB;
wire [7:0] regOut0DC;
wire [7:0] regOut0DA;
wor regOut01TmrError;
wire [7:0] regOut01B;
wire [7:0] regOut01C;
wire [7:0] regOut01A;
wor regOut0CTmrError;
wire [7:0] regOut0CB;
wire [7:0] regOut0CC;
wire [7:0] regOut0CA;
wor regOut1ATmrError;
wire [7:0] regOut1AB;
wire [7:0] regOut1AC;
wire [7:0] regOut1AA;
wor regOut13TmrError;
wire [7:0] regOut13B;
wire [7:0] regOut13C;
wire [7:0] regOut13A;
wor regOut14TmrError;
wire [7:0] regOut14B;
wire [7:0] regOut14C;
wire [7:0] regOut14A;
wor regOut11TmrError;
wire [7:0] regOut11B;
wire [7:0] regOut11C;
wire [7:0] regOut11A;
wor regOut0BTmrError;
wire [7:0] regOut0BB;
wire [7:0] regOut0BC;
wire [7:0] regOut0BA;
wor regOut10TmrError;
wire [7:0] regOut10B;
wire [7:0] regOut10C;
wire [7:0] regOut10A;
wor regOut02TmrError;
wire [7:0] regOut02B;
wire [7:0] regOut02C;
wire [7:0] regOut02A;
wor regOut1BTmrError;
wire [7:0] regOut1BB;
wire [7:0] regOut1BC;
wire [7:0] regOut1BA;
wor regOut0ATmrError;
wire [7:0] regOut0AB;
wire [7:0] regOut0AC;
wire [7:0] regOut0AA;
wor regOut17TmrError;
wire [7:0] regOut17B;
wire [7:0] regOut17C;
wire [7:0] regOut17A;
wor regOut18TmrError;
wire [7:0] regOut18B;
wire [7:0] regOut18C;
wire [7:0] regOut18A;
wor regOut05TmrError;
wire [7:0] regOut05B;
wire [7:0] regOut05C;
wire [7:0] regOut05A;
wor regOut1CTmrError;
wire [7:0] regOut1CB;
wire [7:0] regOut1CC;
wire [7:0] regOut1CA;
wor regOut16TmrError;
wire [7:0] regOut16B;
wire [7:0] regOut16C;
wire [7:0] regOut16A;
wor regOut1DTmrError;
wire [7:0] regOut1DB;
wire [7:0] regOut1DC;
wire [7:0] regOut1DA;
wor regOut0FTmrError;
wire [7:0] regOut0FB;
wire [7:0] regOut0FC;
wire [7:0] regOut0FA;
wor regOut08TmrError;
wire [7:0] regOut08B;
wire [7:0] regOut08C;
wire [7:0] regOut08A;
wor regOut04TmrError;
wire [7:0] regOut04B;
wire [7:0] regOut04C;
wire [7:0] regOut04A;
wor regOut19TmrError;
wire [7:0] regOut19B;
wire [7:0] regOut19C;
wire [7:0] regOut19A;
wor regOut03TmrError;
wire [7:0] regOut03B;
wire [7:0] regOut03C;
wire [7:0] regOut03A;
wor regOut06TmrError;
wire [7:0] regOut06B;
wire [7:0] regOut06C;
wire [7:0] regOut06A;
wor regOut1ETmrError;
wire [7:0] regOut1EB;
wire [7:0] regOut1EC;
wire [7:0] regOut1EA;
wor regOut07TmrError;
wire [7:0] regOut07B;
wire [7:0] regOut07C;
wire [7:0] regOut07A;
wire SDA_out =  1'b0;
wire SDA_en =  1'b0;
wire SCL_in;
wire SDAds;
wire SDAen;
wire SDAin;
wire SDAout;
wire SDApe;
wire SDAud;

IO_1P2V_C4 SDA_IO (
          .A(SDAout),
          .DS(SDAds),
          .IO(SDA),
          .OUT_EN((~ SDAout )&SDAen),
          .PEN(SDApe),
          .UD(SDAud),
          .Z(),
          .Z_h(SDAin)
          );
wire SCLds;
wire SCLen;
wire SCLin;
wire SCLout;
wire SCLpe;
wire SCLud;

IO_1P2V_C4 SCL_IO (
          .A(SCLout),
          .DS(SCLds),
          .IO(SCL),
          .OUT_EN(SCLen),
          .PEN(SCLpe),
          .UD(SCLud),
          .Z(),
          .Z_h(SCLin)
          );
wire A0ds;
wire A0en;
wire A0in;
wire A0out;
wire A0ud;
wire A0pe;

IO_1P2V_C4 A0_IO (
          .A(A0out),
          .DS(A0ds),
          .IO(A0),
          .OUT_EN(A0en),
          .PEN(A0pe),
          .UD(A0ud),
          .Z(),
          .Z_h(A0in)
          );
wire A1ds;
wire A1en;
wire A1in;
wire A1out;
wire A1ud;
wire A1pe;

IO_1P2V_C4 A1_IO (
          .A(A1out),
          .DS(A1ds),
          .IO(A1),
          .OUT_EN(A1en),
          .PEN(A1pe),
          .UD(A1ud),
          .Z(),
          .Z_h(A1in)
          );
wire RSTNds;
wire RSTNen;
wire RSTNin;
wire RSTNout;
wire RSTNud;
wire RSTNpe;

IO_1P2V_C4 RSTN_IO (
          .A(RSTNout),
          .DS(RSTNds),
          .IO(RSTN),
          .OUT_EN(RSTNen),
          .PEN(RSTNpe),
          .UD(RSTNud),
          .Z(),
          .Z_h(RSTNin)
          );
wire [15:0] busAddrA;
wire [15:0] busAddrB;
wire [15:0] busAddrC;
wire busClkA;
wire busClkB;
wire busClkC;
wire [7:0] busDataMisoA;
wire [7:0] busDataMisoB;
wire [7:0] busDataMisoC;
wire [7:0] busDataMosiA;
wire [7:0] busDataMosiB;
wire [7:0] busDataMosiC;
wire busReA;
wire busReB;
wire busReC;
wire busRstA;
wire busRstB;
wire busRstC;
wire busTmrErrorA;
wire busTmrErrorB;
wire busTmrErrorC;
wire busWeA;
wire busWeB;
wire busWeC;
wire [HIGH_LOW_OUTS-1:0] HIGH;
wire [HIGH_LOW_OUTS-1:0] LOW;
wire [6:2] Ain =  {LOW[49] ,LOW[49] ,LOW[49] ,LOW[49] ,HIGH[49] };
wire [7:0] regOut00;
wire [7:0] regOut01;
wire [7:0] regOut02;
wire [7:0] regOut03;
wire [7:0] regOut04;
wire [7:0] regOut05;
wire [7:0] regOut06;
wire [7:0] regOut07;
wire [7:0] regOut08;
wire [7:0] regOut09;
wire [7:0] regOut0A;
wire [7:0] regOut0B;
wire [7:0] regOut0C;
wire [7:0] regOut0D;
wire [7:0] regOut0E;
wire [7:0] regOut0F;
wire [7:0] regOut10;
wire [7:0] regOut11;
wire [7:0] regOut12;
wire [7:0] regOut13;
wire [7:0] regOut14;
wire [7:0] regOut15;
wire [7:0] regOut16;
wire [7:0] regOut17;
wire [7:0] regOut18;
wire [7:0] regOut19;
wire [7:0] regOut1A;
wire [7:0] regOut1B;
wire [7:0] regOut1C;
wire [7:0] regOut1D;
wire [7:0] regOut1E;
wire [7:0] regOut1F;
wire [7:0] defVal00 =  8'h00;
wire [7:0] defVal01 =  8'h01;
wire [7:0] defVal02 =  8'h02;
wire [7:0] defVal03 =  8'h03;
wire [7:0] defVal04 =  8'h04;
wire [7:0] defVal05 =  8'h05;
wire [7:0] defVal06 =  8'h06;
wire [7:0] defVal07 =  8'h07;
wire [7:0] defVal08 =  8'h08;
wire [7:0] defVal09 =  8'h09;
wire [7:0] defVal0A =  8'h0A;
wire [7:0] defVal0B =  8'h0B;
wire [7:0] defVal0C =  8'h0C;
wire [7:0] defVal0D =  8'h0D;
wire [7:0] defVal0E =  8'h0E;
wire [7:0] defVal0F =  8'h0F;
wire [7:0] defVal10 =  8'h10;
wire [7:0] defVal11 =  8'h11;
wire [7:0] defVal12 =  8'h12;
wire [7:0] defVal13 =  8'h13;
wire [7:0] defVal14 =  8'h14;
wire [7:0] defVal15 =  8'h15;
wire [7:0] defVal16 =  8'h16;
wire [7:0] defVal17 =  8'h17;
wire [7:0] defVal18 =  8'h18;
wire [7:0] defVal19 =  8'h19;
wire [7:0] defVal1A =  8'h1A;
wire [7:0] defVal1B =  8'h1B;
wire [7:0] defVal1C =  8'h1C;
wire [7:0] defVal1D =  8'h1D;
wire [7:0] defVal1E =  8'h1E;
wire [7:0] defVal1F =  8'h1F;
wire [7:0] regIn100 =  regOut00;
wire [7:0] regIn101 =  regOut01;
wire [7:0] regIn102 =  regOut02;
wire [7:0] regIn103 =  regOut03;
wire [7:0] regIn104 =  regOut04;
wire [7:0] regIn105 =  regOut05;
wire [7:0] regIn106 =  regOut06;
wire [7:0] regIn107 =  regOut07;
wire [7:0] regIn108 =  regOut08;
wire [7:0] regIn109 =  regOut09;
wire [7:0] regIn10A =  regOut0A;
wire [7:0] regIn10B =  regOut0B;
wire [7:0] regIn10C =  regOut0C;
wire [7:0] regIn10D =  regOut0D;
wire [7:0] regIn10E =  regOut0E;
wire [7:0] regIn10F =  regOut0F;

peripheryTMR PER (
          .A0ds(A0ds),
          .A0en(A0en),
          .A0in(A0in),
          .A0out(A0out),
          .A0pe(A0pe),
          .A0ud(A0ud),
          .A1ds(A1ds),
          .A1en(A1en),
          .A1in(A1in),
          .A1out(A1out),
          .A1pe(A1pe),
          .A1ud(A1ud),
          .Ain(Ain),
          .HIGH(HIGH),
          .LOW(LOW),
          .RSTNds(RSTNds),
          .RSTNen(RSTNen),
          .RSTNin(RSTNin),
          .RSTNout(RSTNout),
          .RSTNpe(RSTNpe),
          .RSTNud(RSTNud),
          .SCLds(SCLds),
          .SCLen(SCLen),
          .SCLin(SCLin),
          .SCLout(SCLout),
          .SCLpe(SCLpe),
          .SCLud(SCLud),
          .SDAds(SDAds),
          .SDAen(SDAen),
          .SDAin(SDAin),
          .SDAout(SDAout),
          .SDApe(SDApe),
          .SDAud(SDAud),
          .chipID(4'h3),
          .chipREV(4'b0),
          .matrixBusAddrA(busAddrA),
          .matrixBusAddrB(busAddrB),
          .matrixBusAddrC(busAddrC),
          .matrixBusClkA(busClkA),
          .matrixBusClkB(busClkB),
          .matrixBusClkC(busClkC),
          .matrixBusDataMisoA(busDataMisoA),
          .matrixBusDataMisoB(busDataMisoB),
          .matrixBusDataMisoC(busDataMisoC),
          .matrixBusDataMosiA(busDataMosiA),
          .matrixBusDataMosiB(busDataMosiB),
          .matrixBusDataMosiC(busDataMosiC),
          .matrixBusReA(busReA),
          .matrixBusReB(busReB),
          .matrixBusReC(busReC),
          .matrixBusRstA(busRstA),
          .matrixBusRstB(busRstB),
          .matrixBusRstC(busRstC),
          .matrixBusTmrErrorA(busTmrErrorA),
          .matrixBusTmrErrorB(busTmrErrorB),
          .matrixBusTmrErrorC(busTmrErrorC),
          .matrixBusWeA(busWeA),
          .matrixBusWeB(busWeB),
          .matrixBusWeC(busWeC),
          .defVal00(defVal00),
          .defVal01(defVal01),
          .defVal02(defVal02),
          .defVal03(defVal03),
          .defVal04(defVal04),
          .defVal05(defVal05),
          .defVal06(defVal06),
          .defVal07(defVal07),
          .defVal08(defVal08),
          .defVal09(defVal09),
          .defVal0A(defVal0A),
          .defVal0B(defVal0B),
          .defVal0C(defVal0C),
          .defVal0D(defVal0D),
          .defVal0E(defVal0E),
          .defVal0F(defVal0F),
          .defVal10(defVal10),
          .defVal11(defVal11),
          .defVal12(defVal12),
          .defVal13(defVal13),
          .defVal14(defVal14),
          .defVal15(defVal15),
          .defVal16(defVal16),
          .defVal17(defVal17),
          .defVal18(defVal18),
          .defVal19(defVal19),
          .defVal1A(defVal1A),
          .defVal1B(defVal1B),
          .defVal1C(defVal1C),
          .defVal1D(defVal1D),
          .defVal1E(defVal1E),
          .defVal1F(defVal1F),
          .regIn100A(regIn100A),
          .regIn100B(regIn100B),
          .regIn100C(regIn100C),
          .regIn101A(regIn101A),
          .regIn101B(regIn101B),
          .regIn101C(regIn101C),
          .regIn102A(regIn102A),
          .regIn102B(regIn102B),
          .regIn102C(regIn102C),
          .regIn103A(regIn103A),
          .regIn103B(regIn103B),
          .regIn103C(regIn103C),
          .regIn104A(regIn104A),
          .regIn104B(regIn104B),
          .regIn104C(regIn104C),
          .regIn105A(regIn105A),
          .regIn105B(regIn105B),
          .regIn105C(regIn105C),
          .regIn106A(regIn106A),
          .regIn106B(regIn106B),
          .regIn106C(regIn106C),
          .regIn107A(regIn107A),
          .regIn107B(regIn107B),
          .regIn107C(regIn107C),
          .regIn108A(regIn108A),
          .regIn108B(regIn108B),
          .regIn108C(regIn108C),
          .regIn109A(regIn109A),
          .regIn109B(regIn109B),
          .regIn109C(regIn109C),
          .regIn10AA(regIn10AA),
          .regIn10AB(regIn10AB),
          .regIn10AC(regIn10AC),
          .regIn10BA(regIn10BA),
          .regIn10BB(regIn10BB),
          .regIn10BC(regIn10BC),
          .regIn10CA(regIn10CA),
          .regIn10CB(regIn10CB),
          .regIn10CC(regIn10CC),
          .regIn10DA(regIn10DA),
          .regIn10DB(regIn10DB),
          .regIn10DC(regIn10DC),
          .regIn10EA(regIn10EA),
          .regIn10EB(regIn10EB),
          .regIn10EC(regIn10EC),
          .regIn10FA(regIn10FA),
          .regIn10FB(regIn10FB),
          .regIn10FC(regIn10FC),
          .regOut00A(regOut00A),
          .regOut00B(regOut00B),
          .regOut00C(regOut00C),
          .regOut01A(regOut01A),
          .regOut01B(regOut01B),
          .regOut01C(regOut01C),
          .regOut02A(regOut02A),
          .regOut02B(regOut02B),
          .regOut02C(regOut02C),
          .regOut03A(regOut03A),
          .regOut03B(regOut03B),
          .regOut03C(regOut03C),
          .regOut04A(regOut04A),
          .regOut04B(regOut04B),
          .regOut04C(regOut04C),
          .regOut05A(regOut05A),
          .regOut05B(regOut05B),
          .regOut05C(regOut05C),
          .regOut06A(regOut06A),
          .regOut06B(regOut06B),
          .regOut06C(regOut06C),
          .regOut07A(regOut07A),
          .regOut07B(regOut07B),
          .regOut07C(regOut07C),
          .regOut08A(regOut08A),
          .regOut08B(regOut08B),
          .regOut08C(regOut08C),
          .regOut09A(regOut09A),
          .regOut09B(regOut09B),
          .regOut09C(regOut09C),
          .regOut0AA(regOut0AA),
          .regOut0AB(regOut0AB),
          .regOut0AC(regOut0AC),
          .regOut0BA(regOut0BA),
          .regOut0BB(regOut0BB),
          .regOut0BC(regOut0BC),
          .regOut0CA(regOut0CA),
          .regOut0CB(regOut0CB),
          .regOut0CC(regOut0CC),
          .regOut0DA(regOut0DA),
          .regOut0DB(regOut0DB),
          .regOut0DC(regOut0DC),
          .regOut0EA(regOut0EA),
          .regOut0EB(regOut0EB),
          .regOut0EC(regOut0EC),
          .regOut0FA(regOut0FA),
          .regOut0FB(regOut0FB),
          .regOut0FC(regOut0FC),
          .regOut10A(regOut10A),
          .regOut10B(regOut10B),
          .regOut10C(regOut10C),
          .regOut11A(regOut11A),
          .regOut11B(regOut11B),
          .regOut11C(regOut11C),
          .regOut12A(regOut12A),
          .regOut12B(regOut12B),
          .regOut12C(regOut12C),
          .regOut13A(regOut13A),
          .regOut13B(regOut13B),
          .regOut13C(regOut13C),
          .regOut14A(regOut14A),
          .regOut14B(regOut14B),
          .regOut14C(regOut14C),
          .regOut15A(regOut15A),
          .regOut15B(regOut15B),
          .regOut15C(regOut15C),
          .regOut16A(regOut16A),
          .regOut16B(regOut16B),
          .regOut16C(regOut16C),
          .regOut17A(regOut17A),
          .regOut17B(regOut17B),
          .regOut17C(regOut17C),
          .regOut18A(regOut18A),
          .regOut18B(regOut18B),
          .regOut18C(regOut18C),
          .regOut19A(regOut19A),
          .regOut19B(regOut19B),
          .regOut19C(regOut19C),
          .regOut1AA(regOut1AA),
          .regOut1AB(regOut1AB),
          .regOut1AC(regOut1AC),
          .regOut1BA(regOut1BA),
          .regOut1BB(regOut1BB),
          .regOut1BC(regOut1BC),
          .regOut1CA(regOut1CA),
          .regOut1CB(regOut1CB),
          .regOut1CC(regOut1CC),
          .regOut1DA(regOut1DA),
          .regOut1DB(regOut1DB),
          .regOut1DC(regOut1DC),
          .regOut1EA(regOut1EA),
          .regOut1EB(regOut1EB),
          .regOut1EC(regOut1EC),
          .regOut1FA(regOut1FA),
          .regOut1FB(regOut1FB),
          .regOut1FC(regOut1FC)
          );

pixelMatrixTMR PM (
          .busAddrInA(busAddrA),
          .busAddrInB(busAddrB),
          .busAddrInC(busAddrC),
          .busDataMisoOutA(busDataMisoA),
          .busDataMisoOutB(busDataMisoB),
          .busDataMisoOutC(busDataMisoC),
          .busDataMosiInA(busDataMosiA),
          .busDataMosiInB(busDataMosiB),
          .busDataMosiInC(busDataMosiC),
          .busReInA(busReA),
          .busReInB(busReB),
          .busReInC(busReC),
          .busRstInA(busRstA),
          .busRstInB(busRstB),
          .busRstInC(busRstC),
          .busTmrErrorOutA(busTmrErrorA),
          .busTmrErrorOutB(busTmrErrorB),
          .busTmrErrorOutC(busTmrErrorC),
          .busWeInA(busWeA),
          .busWeInB(busWeB),
          .busWeInC(busWeC),
          .busClkInA(busClkA),
          .busClkInB(busClkB),
          .busClkInC(busClkC)
          );

majorityVoter #(.WIDTH(8)) regOut07Voter (
          .inA(regOut07A),
          .inB(regOut07B),
          .inC(regOut07C),
          .out(regOut07),
          .tmrErr(regOut07TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut1EVoter (
          .inA(regOut1EA),
          .inB(regOut1EB),
          .inC(regOut1EC),
          .out(regOut1E),
          .tmrErr(regOut1ETmrError)
          );

majorityVoter #(.WIDTH(8)) regOut06Voter (
          .inA(regOut06A),
          .inB(regOut06B),
          .inC(regOut06C),
          .out(regOut06),
          .tmrErr(regOut06TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut03Voter (
          .inA(regOut03A),
          .inB(regOut03B),
          .inC(regOut03C),
          .out(regOut03),
          .tmrErr(regOut03TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut19Voter (
          .inA(regOut19A),
          .inB(regOut19B),
          .inC(regOut19C),
          .out(regOut19),
          .tmrErr(regOut19TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut04Voter (
          .inA(regOut04A),
          .inB(regOut04B),
          .inC(regOut04C),
          .out(regOut04),
          .tmrErr(regOut04TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut08Voter (
          .inA(regOut08A),
          .inB(regOut08B),
          .inC(regOut08C),
          .out(regOut08),
          .tmrErr(regOut08TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut0FVoter (
          .inA(regOut0FA),
          .inB(regOut0FB),
          .inC(regOut0FC),
          .out(regOut0F),
          .tmrErr(regOut0FTmrError)
          );

majorityVoter #(.WIDTH(8)) regOut1DVoter (
          .inA(regOut1DA),
          .inB(regOut1DB),
          .inC(regOut1DC),
          .out(regOut1D),
          .tmrErr(regOut1DTmrError)
          );

majorityVoter #(.WIDTH(8)) regOut16Voter (
          .inA(regOut16A),
          .inB(regOut16B),
          .inC(regOut16C),
          .out(regOut16),
          .tmrErr(regOut16TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut1CVoter (
          .inA(regOut1CA),
          .inB(regOut1CB),
          .inC(regOut1CC),
          .out(regOut1C),
          .tmrErr(regOut1CTmrError)
          );

majorityVoter #(.WIDTH(8)) regOut05Voter (
          .inA(regOut05A),
          .inB(regOut05B),
          .inC(regOut05C),
          .out(regOut05),
          .tmrErr(regOut05TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut18Voter (
          .inA(regOut18A),
          .inB(regOut18B),
          .inC(regOut18C),
          .out(regOut18),
          .tmrErr(regOut18TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut17Voter (
          .inA(regOut17A),
          .inB(regOut17B),
          .inC(regOut17C),
          .out(regOut17),
          .tmrErr(regOut17TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut0AVoter (
          .inA(regOut0AA),
          .inB(regOut0AB),
          .inC(regOut0AC),
          .out(regOut0A),
          .tmrErr(regOut0ATmrError)
          );

majorityVoter #(.WIDTH(8)) regOut1BVoter (
          .inA(regOut1BA),
          .inB(regOut1BB),
          .inC(regOut1BC),
          .out(regOut1B),
          .tmrErr(regOut1BTmrError)
          );

majorityVoter #(.WIDTH(8)) regOut02Voter (
          .inA(regOut02A),
          .inB(regOut02B),
          .inC(regOut02C),
          .out(regOut02),
          .tmrErr(regOut02TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut10Voter (
          .inA(regOut10A),
          .inB(regOut10B),
          .inC(regOut10C),
          .out(regOut10),
          .tmrErr(regOut10TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut0BVoter (
          .inA(regOut0BA),
          .inB(regOut0BB),
          .inC(regOut0BC),
          .out(regOut0B),
          .tmrErr(regOut0BTmrError)
          );

majorityVoter #(.WIDTH(8)) regOut11Voter (
          .inA(regOut11A),
          .inB(regOut11B),
          .inC(regOut11C),
          .out(regOut11),
          .tmrErr(regOut11TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut14Voter (
          .inA(regOut14A),
          .inB(regOut14B),
          .inC(regOut14C),
          .out(regOut14),
          .tmrErr(regOut14TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut13Voter (
          .inA(regOut13A),
          .inB(regOut13B),
          .inC(regOut13C),
          .out(regOut13),
          .tmrErr(regOut13TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut1AVoter (
          .inA(regOut1AA),
          .inB(regOut1AB),
          .inC(regOut1AC),
          .out(regOut1A),
          .tmrErr(regOut1ATmrError)
          );

majorityVoter #(.WIDTH(8)) regOut0CVoter (
          .inA(regOut0CA),
          .inB(regOut0CB),
          .inC(regOut0CC),
          .out(regOut0C),
          .tmrErr(regOut0CTmrError)
          );

majorityVoter #(.WIDTH(8)) regOut01Voter (
          .inA(regOut01A),
          .inB(regOut01B),
          .inC(regOut01C),
          .out(regOut01),
          .tmrErr(regOut01TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut0DVoter (
          .inA(regOut0DA),
          .inB(regOut0DB),
          .inC(regOut0DC),
          .out(regOut0D),
          .tmrErr(regOut0DTmrError)
          );

majorityVoter #(.WIDTH(8)) regOut12Voter (
          .inA(regOut12A),
          .inB(regOut12B),
          .inC(regOut12C),
          .out(regOut12),
          .tmrErr(regOut12TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut09Voter (
          .inA(regOut09A),
          .inB(regOut09B),
          .inC(regOut09C),
          .out(regOut09),
          .tmrErr(regOut09TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut00Voter (
          .inA(regOut00A),
          .inB(regOut00B),
          .inC(regOut00C),
          .out(regOut00),
          .tmrErr(regOut00TmrError)
          );

majorityVoter #(.WIDTH(8)) regOut1FVoter (
          .inA(regOut1FA),
          .inB(regOut1FB),
          .inC(regOut1FC),
          .out(regOut1F),
          .tmrErr(regOut1FTmrError)
          );

majorityVoter #(.WIDTH(8)) regOut0EVoter (
          .inA(regOut0EA),
          .inB(regOut0EB),
          .inC(regOut0EC),
          .out(regOut0E),
          .tmrErr(regOut0ETmrError)
          );

majorityVoter #(.WIDTH(8)) regOut15Voter (
          .inA(regOut15A),
          .inB(regOut15B),
          .inC(regOut15C),
          .out(regOut15),
          .tmrErr(regOut15TmrError)
          );

fanout #(.WIDTH(8)) regIn102Fanout (
          .in(regIn102),
          .outA(regIn102A),
          .outB(regIn102B),
          .outC(regIn102C)
          );

fanout #(.WIDTH(8)) regIn101Fanout (
          .in(regIn101),
          .outA(regIn101A),
          .outB(regIn101B),
          .outC(regIn101C)
          );

fanout #(.WIDTH(8)) regIn108Fanout (
          .in(regIn108),
          .outA(regIn108A),
          .outB(regIn108B),
          .outC(regIn108C)
          );

fanout #(.WIDTH(8)) regIn104Fanout (
          .in(regIn104),
          .outA(regIn104A),
          .outB(regIn104B),
          .outC(regIn104C)
          );

fanout #(.WIDTH(8)) regIn103Fanout (
          .in(regIn103),
          .outA(regIn103A),
          .outB(regIn103B),
          .outC(regIn103C)
          );

fanout #(.WIDTH(8)) regIn106Fanout (
          .in(regIn106),
          .outA(regIn106A),
          .outB(regIn106B),
          .outC(regIn106C)
          );

fanout #(.WIDTH(8)) regIn10EFanout (
          .in(regIn10E),
          .outA(regIn10EA),
          .outB(regIn10EB),
          .outC(regIn10EC)
          );

fanout #(.WIDTH(8)) regIn100Fanout (
          .in(regIn100),
          .outA(regIn100A),
          .outB(regIn100B),
          .outC(regIn100C)
          );

fanout #(.WIDTH(8)) regIn10BFanout (
          .in(regIn10B),
          .outA(regIn10BA),
          .outB(regIn10BB),
          .outC(regIn10BC)
          );

fanout #(.WIDTH(8)) regIn10AFanout (
          .in(regIn10A),
          .outA(regIn10AA),
          .outB(regIn10AB),
          .outC(regIn10AC)
          );

fanout #(.WIDTH(8)) regIn107Fanout (
          .in(regIn107),
          .outA(regIn107A),
          .outB(regIn107B),
          .outC(regIn107C)
          );

fanout #(.WIDTH(8)) regIn109Fanout (
          .in(regIn109),
          .outA(regIn109A),
          .outB(regIn109B),
          .outC(regIn109C)
          );

fanout #(.WIDTH(8)) regIn10DFanout (
          .in(regIn10D),
          .outA(regIn10DA),
          .outB(regIn10DB),
          .outC(regIn10DC)
          );

fanout #(.WIDTH(8)) regIn10CFanout (
          .in(regIn10C),
          .outA(regIn10CA),
          .outB(regIn10CB),
          .outC(regIn10CC)
          );

fanout #(.WIDTH(8)) regIn10FFanout (
          .in(regIn10F),
          .outA(regIn10FA),
          .outB(regIn10FB),
          .outC(regIn10FC)
          );

fanout #(.WIDTH(8)) regIn105Fanout (
          .in(regIn105),
          .outA(regIn105A),
          .outB(regIn105B),
          .outC(regIn105C)
          );
endmodule



// /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/tmrg/../common/voter.v
module majorityVoter (inA, inB, inC, out, tmrErr);
  parameter WIDTH = 1;
  input   [(WIDTH-1):0]   inA, inB, inC;
  output  [(WIDTH-1):0]   out;
  output                  tmrErr;
  reg                     tmrErr;
  assign out = (inA&inB) | (inA&inC) | (inB&inC);
  always @(inA or inB or inC)
  begin
    if (inA!=inB || inA!=inC || inB!=inC)
      tmrErr = 1;
    else
      tmrErr = 0;
  end
endmodule


// /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/tmrg/../common/fanout.v
module fanout (in, outA, outB, outC);
  parameter WIDTH = 1;
  input   [(WIDTH-1):0]   in;
  output  [(WIDTH-1):0]   outA,outB,outC;
  assign outA=in;
  assign outB=in;
  assign outC=in;
endmodule
