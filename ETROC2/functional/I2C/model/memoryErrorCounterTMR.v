/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/memoryErrorCounterTMR.v                                                      *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:53                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/memoryErrorCounter.v *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 11:50:53.524724                                         *
 *           File Size         : 1007                                                               *
 *           MD5 hash          : e2467d7059d4883bb7c1dcb15b647ee0                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module memoryErrorCounterTMR(
     output [31:0] dataOutA,
     output [31:0] dataOutB,
     output [31:0] dataOutC,
     input  loadA,
     input  loadB,
     input  loadC,
     input  errDetectedA,
     input  errDetectedB,
     input  errDetectedC,
     input  clkA,
     input  clkB,
     input  clkC,
     input  rstA,
     input  rstB,
     input  rstC,
     output  tmrErrorA,
     output  tmrErrorB,
     output  tmrErrorC
);
wor memTmrErrorC;
wor loadTmrErrorC;
wor errDetectedTmrErrorC;
wor errDetectedFFTmrErrorC;
wire loadVotedC;
wire [31:0] memVotedC;
wire errDetectedVotedC;
wire errDetectedFFVotedC;
wor memTmrErrorB;
wor loadTmrErrorB;
wor errDetectedTmrErrorB;
wor errDetectedFFTmrErrorB;
wire loadVotedB;
wire errDetectedVotedB;
wire [31:0] memVotedB;
wire errDetectedFFVotedB;
wor memTmrErrorA;
wor loadTmrErrorA;
wor errDetectedTmrErrorA;
wor errDetectedFFTmrErrorA;
wire errDetectedVotedA;
wire loadVotedA;
wire errDetectedFFVotedA;
wire [31:0] memVotedA;
reg  [31:0] memA;
reg  [31:0] memB;
reg  [31:0] memC;
reg  [31:0] memNextA;
reg  [31:0] memNextB;
reg  [31:0] memNextC;
reg  errDetectedFFA;
reg  errDetectedFFB;
reg  errDetectedFFC;
assign dataOutA =  memVotedA;
assign dataOutB =  memVotedB;
assign dataOutC =  memVotedC;

always @( memVotedA or errDetectedFFVotedA or loadVotedA )
     if (loadVotedA)
          memNextA =  32'b0;
     else
          if (errDetectedFFVotedA&&memVotedA<32'hFFFFFFFF)
               memNextA =  memVotedA+32'h1;
          else
               memNextA =  memVotedA;

always @( memVotedB or errDetectedFFVotedB or loadVotedB )
     if (loadVotedB)
          memNextB =  32'b0;
     else
          if (errDetectedFFVotedB&&memVotedB<32'hFFFFFFFF)
               memNextB =  memVotedB+32'h1;
          else
               memNextB =  memVotedB;

always @( memVotedC or errDetectedFFVotedC or loadVotedC )
     if (loadVotedC)
          memNextC =  32'b0;
     else
          if (errDetectedFFVotedC&&memVotedC<32'hFFFFFFFF)
               memNextC =  memVotedC+32'h1;
          else
               memNextC =  memVotedC;

always @( posedge clkA or posedge rstA )
     if (rstA)
          begin
               memA <= #10 32'b0;
               errDetectedFFA <= #10 1'b0;
          end
     else
          begin
               memA <= #10 memNextA;
               errDetectedFFA <= #10 errDetectedVotedA;
          end

always @( posedge clkB or posedge rstB )
     if (rstB)
          begin
               memB <= #10 32'b0;
               errDetectedFFB <= #10 1'b0;
          end
     else
          begin
               memB <= #10 memNextB;
               errDetectedFFB <= #10 errDetectedVotedB;
          end

always @( posedge clkC or posedge rstC )
     if (rstC)
          begin
               memC <= #10 32'b0;
               errDetectedFFC <= #10 1'b0;
          end
     else
          begin
               memC <= #10 memNextC;
               errDetectedFFC <= #10 errDetectedVotedC;
          end

majorityVoter #(.WIDTH(32)) memVoterA (
          .inA(memA),
          .inB(memB),
          .inC(memC),
          .out(memVotedA),
          .tmrErr(memTmrErrorA)
          );

majorityVoter errDetectedFFVoterA (
          .inA(errDetectedFFA),
          .inB(errDetectedFFB),
          .inC(errDetectedFFC),
          .out(errDetectedFFVotedA),
          .tmrErr(errDetectedFFTmrErrorA)
          );

majorityVoter loadVoterA (
          .inA(loadA),
          .inB(loadB),
          .inC(loadC),
          .out(loadVotedA),
          .tmrErr(loadTmrErrorA)
          );

majorityVoter errDetectedVoterA (
          .inA(errDetectedA),
          .inB(errDetectedB),
          .inC(errDetectedC),
          .out(errDetectedVotedA),
          .tmrErr(errDetectedTmrErrorA)
          );
assign tmrErrorA =  errDetectedFFTmrErrorA|memTmrErrorA;

majorityVoter errDetectedFFVoterB (
          .inA(errDetectedFFA),
          .inB(errDetectedFFB),
          .inC(errDetectedFFC),
          .out(errDetectedFFVotedB),
          .tmrErr(errDetectedFFTmrErrorB)
          );

majorityVoter #(.WIDTH(32)) memVoterB (
          .inA(memA),
          .inB(memB),
          .inC(memC),
          .out(memVotedB),
          .tmrErr(memTmrErrorB)
          );

majorityVoter errDetectedVoterB (
          .inA(errDetectedA),
          .inB(errDetectedB),
          .inC(errDetectedC),
          .out(errDetectedVotedB),
          .tmrErr(errDetectedTmrErrorB)
          );

majorityVoter loadVoterB (
          .inA(loadA),
          .inB(loadB),
          .inC(loadC),
          .out(loadVotedB),
          .tmrErr(loadTmrErrorB)
          );
assign tmrErrorB =  errDetectedFFTmrErrorB|memTmrErrorB;

majorityVoter errDetectedFFVoterC (
          .inA(errDetectedFFA),
          .inB(errDetectedFFB),
          .inC(errDetectedFFC),
          .out(errDetectedFFVotedC),
          .tmrErr(errDetectedFFTmrErrorC)
          );

majorityVoter errDetectedVoterC (
          .inA(errDetectedA),
          .inB(errDetectedB),
          .inC(errDetectedC),
          .out(errDetectedVotedC),
          .tmrErr(errDetectedTmrErrorC)
          );

majorityVoter #(.WIDTH(32)) memVoterC (
          .inA(memA),
          .inB(memB),
          .inC(memC),
          .out(memVotedC),
          .tmrErr(memTmrErrorC)
          );

majorityVoter loadVoterC (
          .inA(loadA),
          .inB(loadB),
          .inC(loadC),
          .out(loadVotedC),
          .tmrErr(loadTmrErrorC)
          );
assign tmrErrorC =  errDetectedFFTmrErrorC|memTmrErrorC;
endmodule

