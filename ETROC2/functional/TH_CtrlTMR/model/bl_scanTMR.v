/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/bl_scanTMR.v                                                                 *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : hepasic2.physics.smu.edu                                                               *
 * date    : 01/07/2021 17:52:02                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/ETROC2_TH_Ctrl/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir ../../ETROC_TH_Ctrl-main/ --lib ../simplified_std_cell_lib.v --lib *
 *           ../../ETROC_TH_Ctrl-main/powerOnResetLong.v --lib ../../libs/customDigitalLib.v -c     *
 *           ../config/tmrg.cnf                                                                     *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: ../../ETROC_TH_Ctrl-main/bl_scan.v                                                     *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-07-01 17:51:10.190256                                         *
 *           File Size         : 4688                                                               *
 *           MD5 hash          : 236e5032b3ad8bd53b8569a676738fa9                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  100ps / 10ps

`define  AccumulatorBit 16 

module bl_scanTMR(
     CLKA,
     CLKB,
     CLKC,
     RSTnA,
     RSTnB,
     RSTnC,
     porA,
     porB,
     porC,
     DiscriPulA,
     DiscriPulB,
     DiscriPulC,
     CMDA,
     CMDB,
     CMDC,
     AccA,
     AccB,
     AccC,
     ScanBusyA,
     ScanBusyB,
     ScanBusyC,
     NoiseFlagA,
     NoiseFlagB,
     NoiseFlagC,
     tmrErrorA,
     tmrErrorB,
     tmrErrorC
);
output tmrErrorC;
wor AccRegTmrErrorC;
wire [`AccumulatorBit-1:0] AccRegVotedC;
output tmrErrorB;
wor AccRegTmrErrorB;
wire [`AccumulatorBit-1:0] AccRegVotedB;
output tmrErrorA;
wor AccRegTmrErrorA;
wire [`AccumulatorBit-1:0] AccRegVotedA;
input CLKA;
input CLKB;
input CLKC;
input RSTnA;
input RSTnB;
input RSTnC;
input porA;
input porB;
input porC;
input DiscriPulA;
input DiscriPulB;
input DiscriPulC;
input CMDA;
input CMDB;
input CMDC;
output wire   [`AccumulatorBit-1:0] AccA;
output wire   [`AccumulatorBit-1:0] AccB;
output wire   [`AccumulatorBit-1:0] AccC;
output reg    ScanBusyA;
output reg    ScanBusyB;
output reg    ScanBusyC;
output reg    NoiseFlagA;
output reg    NoiseFlagB;
output reg    NoiseFlagC;
reg  [`AccumulatorBit-1:0] AccRegA;
reg  [`AccumulatorBit-1:0] AccRegB;
reg  [`AccumulatorBit-1:0] AccRegC;
reg  [`AccumulatorBit-2:0] Counter_ScanWindowA;
reg  [`AccumulatorBit-2:0] Counter_ScanWindowB;
reg  [`AccumulatorBit-2:0] Counter_ScanWindowC;
reg  CMD_regA;
reg  CMD_regB;
reg  CMD_regC;
reg  ScanInitA;
reg  ScanInitB;
reg  ScanInitC;
wire RSTn_int0A;
wire RSTn_int0B;
wire RSTn_int0C;
wire RSTn_intA;
wire RSTn_intB;
wire RSTn_intC;
reg  [3:0] Counter_RstA;
reg  [3:0] Counter_RstB;
reg  [3:0] Counter_RstC;
assign RSTn_int0A =  !CMDA;
assign RSTn_int0B =  !CMDB;
assign RSTn_int0C =  !CMDC;
assign RSTn_intA =  (Counter_RstA==4'd15) ? 1'b1 : 1'b0;
assign RSTn_intB =  (Counter_RstB==4'd15) ? 1'b1 : 1'b0;
assign RSTn_intC =  (Counter_RstC==4'd15) ? 1'b1 : 1'b0;

always @( posedge CLKA )
     begin
          if (!RSTn_int0A)
               Counter_RstA <= 0;
          else
               begin
                    if (Counter_RstA!=15)
                         Counter_RstA <= Counter_RstA+1'b1;
               end
     end

always @( posedge CLKB )
     begin
          if (!RSTn_int0B)
               Counter_RstB <= 0;
          else
               begin
                    if (Counter_RstB!=15)
                         Counter_RstB <= Counter_RstB+1'b1;
               end
     end

always @( posedge CLKC )
     begin
          if (!RSTn_int0C)
               Counter_RstC <= 0;
          else
               begin
                    if (Counter_RstC!=15)
                         Counter_RstC <= Counter_RstC+1'b1;
               end
     end

always @( posedge CLKA )
     begin
          if (!RSTnA)
               begin
                    CMD_regA <= 0;
                    ScanInitA <= 0;
               end
          else
               begin
                    CMD_regA <= CMDA;
                    ScanInitA <= CMD_regA;
               end
     end

always @( posedge CLKB )
     begin
          if (!RSTnB)
               begin
                    CMD_regB <= 0;
                    ScanInitB <= 0;
               end
          else
               begin
                    CMD_regB <= CMDB;
                    ScanInitB <= CMD_regB;
               end
     end

always @( posedge CLKC )
     begin
          if (!RSTnC)
               begin
                    CMD_regC <= 0;
                    ScanInitC <= 0;
               end
          else
               begin
                    CMD_regC <= CMDC;
                    ScanInitC <= CMD_regC;
               end
     end

always @( posedge CLKA )
     begin
          if (!RSTnA)
               ScanBusyA <= 0;
          else
               begin
                    if (ScanInitA==1'b1&&CMD_regA==1'b1)
                         ScanBusyA <= 1;
                    else
                         if (Counter_ScanWindowA==4095)         // it was 32767
                              ScanBusyA <= 0;
               end
     end

always @( posedge CLKB )
     begin
          if (!RSTnB)
               ScanBusyB <= 0;
          else
               begin
                    if (ScanInitB==1'b1&&CMD_regB==1'b1)
                         ScanBusyB <= 1;
                    else
                         if (Counter_ScanWindowB==4095)         // it was 32767
                              ScanBusyB <= 0;
               end
     end

always @( posedge CLKC )
     begin
          if (!RSTnC)
               ScanBusyC <= 0;
          else
               begin
                    if (ScanInitC==1'b1&&CMD_regC==1'b1)
                         ScanBusyC <= 1;
                    else
                         if (Counter_ScanWindowC==4095)         // it was 32767
                              ScanBusyC <= 0;
               end
     end

always @( posedge CLKA )
     begin
          if (!RSTn_intA)
               Counter_ScanWindowA <= 0;
          else
               begin
                    if (ScanBusyA==1)
                         Counter_ScanWindowA <= Counter_ScanWindowA+1'b1;
               end
     end

always @( posedge CLKB )
     begin
          if (!RSTn_intB)
               Counter_ScanWindowB <= 0;
          else
               begin
                    if (ScanBusyB==1)
                         Counter_ScanWindowB <= Counter_ScanWindowB+1'b1;
               end
     end

always @( posedge CLKC )
     begin
          if (!RSTn_intC)
               Counter_ScanWindowC <= 0;
          else
               begin
                    if (ScanBusyC==1)
                         Counter_ScanWindowC <= Counter_ScanWindowC+1'b1;
               end
     end
reg  DiscriPul_int1A;
reg  DiscriPul_int2A;
reg  DiscriPul_int1B;
reg  DiscriPul_int2B;
reg  DiscriPul_int1C;
reg  DiscriPul_int2C;
wire DiscriPulInA;
wire DiscriPulInB;
wire DiscriPulInC;

always @( posedge CLKA )
     begin
          if (!RSTnA)
               begin
                    DiscriPul_int1A <= 1'b0;
                    DiscriPul_int2A <= 1'b0;
               end
          else
               begin
                    DiscriPul_int1A <= DiscriPulA;
                    DiscriPul_int2A <= DiscriPul_int1A;
               end
     end

always @( posedge CLKB )
     begin
          if (!RSTnB)
               begin
                    DiscriPul_int1B <= 1'b0;
                    DiscriPul_int2B <= 1'b0;
               end
          else
               begin
                    DiscriPul_int1B <= DiscriPulB;
                    DiscriPul_int2B <= DiscriPul_int1B;
               end
     end

always @( posedge CLKC )
     begin
          if (!RSTnC)
               begin
                    DiscriPul_int1C <= 1'b0;
                    DiscriPul_int2C <= 1'b0;
               end
          else
               begin
                    DiscriPul_int1C <= DiscriPulC;
                    DiscriPul_int2C <= DiscriPul_int1C;
               end
     end
assign DiscriPulInA =  DiscriPul_int2A;
assign DiscriPulInB =  DiscriPul_int2B;
assign DiscriPulInC =  DiscriPul_int2C;

always @( posedge CLKA or posedge porA )
     begin
          if (porA)
               AccRegA <= 0;
          else
               begin
                    if (!RSTn_intA)
                         AccRegA <= 0;
                    else
                         if (ScanBusyA)
                              AccRegA <= AccRegVotedA+DiscriPulInA;
                         else
                              AccRegA <= AccRegVotedA;
               end
     end

always @( posedge CLKB or posedge porB )
     begin
          if (porB)
               AccRegB <= 0;
          else
               begin
                    if (!RSTn_intB)
                         AccRegB <= 0;
                    else
                         if (ScanBusyB)
                              AccRegB <= AccRegVotedB+DiscriPulInB;
                         else
                              AccRegB <= AccRegVotedB;
               end
     end

always @( posedge CLKC or posedge porC )
     begin
          if (porC)
               AccRegC <= 0;
          else
               begin
                    if (!RSTn_intC)
                         AccRegC <= 0;
                    else
                         if (ScanBusyC)
                              AccRegC <= AccRegVotedC+DiscriPulInC;
                         else
                              AccRegC <= AccRegVotedC;
               end
     end
assign AccA =  AccRegVotedA;
assign AccB =  AccRegVotedB;
assign AccC =  AccRegVotedC;
reg  ScanBusy_regA;
reg  ScanBusy_regB;
reg  ScanBusy_regC;
wire H2L_ScanBusyA;
wire H2L_ScanBusyB;
wire H2L_ScanBusyC;

always @( posedge CLKA )
     begin
          if (!RSTn_intA)
               ScanBusy_regA <= 0;
          else
               ScanBusy_regA <= ScanBusyA;
     end

always @( posedge CLKB )
     begin
          if (!RSTn_intB)
               ScanBusy_regB <= 0;
          else
               ScanBusy_regB <= ScanBusyB;
     end

always @( posedge CLKC )
     begin
          if (!RSTn_intC)
               ScanBusy_regC <= 0;
          else
               ScanBusy_regC <= ScanBusyC;
     end
assign H2L_ScanBusyA =  ScanBusy_regA&(! ScanBusyA );
assign H2L_ScanBusyB =  ScanBusy_regB&(! ScanBusyB );
assign H2L_ScanBusyC =  ScanBusy_regC&(! ScanBusyC );

always @( posedge CLKA )
     begin
          if (!RSTn_intA)
               NoiseFlagA <= 0;
          else
               if (H2L_ScanBusyA)
                    begin
                         if (AccRegA>0&&AccRegA<32768)
                              NoiseFlagA <= 1;
                         else
                              NoiseFlagA <= 0;
                    end
     end

always @( posedge CLKB )
     begin
          if (!RSTn_intB)
               NoiseFlagB <= 0;
          else
               if (H2L_ScanBusyB)
                    begin
                         if (AccRegB>0&&AccRegB<32768)
                              NoiseFlagB <= 1;
                         else
                              NoiseFlagB <= 0;
                    end
     end

always @( posedge CLKC )
     begin
          if (!RSTn_intC)
               NoiseFlagC <= 0;
          else
               if (H2L_ScanBusyC)
                    begin
                         if (AccRegC>0&&AccRegC<32768)
                              NoiseFlagC <= 1;
                         else
                              NoiseFlagC <= 0;
                    end
     end

majorityVoter #(.WIDTH(((`AccumulatorBit-1)>(0)) ? ((`AccumulatorBit-1)-(0)+1) : ((0)-(`AccumulatorBit-1)+1))) AccRegVoterA (
          .inA(AccRegA),
          .inB(AccRegB),
          .inC(AccRegC),
          .out(AccRegVotedA),
          .tmrErr(AccRegTmrErrorA)
          );
assign tmrErrorA =  AccRegTmrErrorA;

majorityVoter #(.WIDTH(((`AccumulatorBit-1)>(0)) ? ((`AccumulatorBit-1)-(0)+1) : ((0)-(`AccumulatorBit-1)+1))) AccRegVoterB (
          .inA(AccRegA),
          .inB(AccRegB),
          .inC(AccRegC),
          .out(AccRegVotedB),
          .tmrErr(AccRegTmrErrorB)
          );
assign tmrErrorB =  AccRegTmrErrorB;

majorityVoter #(.WIDTH(((`AccumulatorBit-1)>(0)) ? ((`AccumulatorBit-1)-(0)+1) : ((0)-(`AccumulatorBit-1)+1))) AccRegVoterC (
          .inA(AccRegA),
          .inB(AccRegB),
          .inC(AccRegC),
          .out(AccRegVotedC),
          .tmrErr(AccRegTmrErrorC)
          );
assign tmrErrorC =  AccRegTmrErrorC;
endmodule

