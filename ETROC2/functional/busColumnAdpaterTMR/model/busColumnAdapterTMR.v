/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/busColumnAdapterTMR.v                                                        *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:50                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/busColumnAdapter.v *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 16:51:36.836445                                         *
 *           File Size         : 5575                                                               *
 *           MD5 hash          : 14a1d2c2fbd93d34f92c10e8c4953e54                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module busColumnAdapterInBufTMR #(
  parameter WIDTH=16
)(
     input [WIDTH-1:0] IA,
     input [WIDTH-1:0] IB,
     input [WIDTH-1:0] IC,
     output [WIDTH-1:0] ZA,
     output [WIDTH-1:0] ZB,
     output [WIDTH-1:0] ZC
);
genvar i;

generate
     for(i =  0;i<WIDTH;i =  i+1)
          begin 

               CKBD4 B_preserveA (
                         .I(IA[i] ),
                         .Z(ZA[i] )
                         );

               CKBD4 B_preserveB (
                         .I(IB[i] ),
                         .Z(ZB[i] )
                         );

               CKBD4 B_preserveC (
                         .I(IC[i] ),
                         .Z(ZC[i] )
                         );
          end

endgenerate
endmodule

module busColumnAdapterOutBufTMR #(
  parameter WIDTH=16
)(
     input [WIDTH-1:0] IA,
     input [WIDTH-1:0] IB,
     input [WIDTH-1:0] IC,
     output [WIDTH-1:0] ZA,
     output [WIDTH-1:0] ZB,
     output [WIDTH-1:0] ZC
);
genvar i;

generate
     for(i =  0;i<WIDTH;i =  i+1)
          begin 

               CKBD8 B_preserveA (
                         .I(IA[i] ),
                         .Z(ZA[i] )
                         );

               CKBD8 B_preserveB (
                         .I(IB[i] ),
                         .Z(ZB[i] )
                         );

               CKBD8 B_preserveC (
                         .I(IC[i] ),
                         .Z(ZC[i] )
                         );
          end

endgenerate
endmodule

module busColumnAdapterTMR(
     input [3:0] columnAddrInA,
     input [3:0] columnAddrInB,
     input [3:0] columnAddrInC,
     input  busRstInA,
     input  busRstInB,
     input  busRstInC,
     input  busWeInA,
     input  busWeInB,
     input  busWeInC,
     input  busClkInA,
     input  busClkInB,
     input  busClkInC,
     input  busReInA,
     input  busReInB,
     input  busReInC,
     input [15:0] busAddrInA,
     input [15:0] busAddrInB,
     input [15:0] busAddrInC,
     input [7:0] busDataMosiInA,
     input [7:0] busDataMosiInB,
     input [7:0] busDataMosiInC,
     output [7:0] busDataMisoOutA,
     output [7:0] busDataMisoOutB,
     output [7:0] busDataMisoOutC,
     output  busTmrErrorOutA,
     output  busTmrErrorOutB,
     output  busTmrErrorOutC,
     output [3:0] columnAddrNextOutA,
     output [3:0] columnAddrNextOutB,
     output [3:0] columnAddrNextOutC,
     output  busRstOutA,
     output  busRstOutB,
     output  busRstOutC,
     output  busWeOutA,
     output  busWeOutB,
     output  busWeOutC,
     output  busClkOutA,
     output  busClkOutB,
     output  busClkOutC,
     output  busReOutA,
     output  busReOutB,
     output  busReOutC,
     output [15:0] busAddrOutA,
     output [15:0] busAddrOutB,
     output [15:0] busAddrOutC,
     output [7:0] busDataMosiOutA,
     output [7:0] busDataMosiOutB,
     output [7:0] busDataMosiOutC,
     input [7:0] busDataMisoInA,
     input [7:0] busDataMisoInB,
     input [7:0] busDataMisoInC,
     input  busTmrErrorInA,
     input  busTmrErrorInB,
     input  busTmrErrorInC,
     output  colRstOutA,
     output  colRstOutB,
     output  colRstOutC,
     output  colWeOutA,
     output  colWeOutB,
     output  colWeOutC,
     output  colClkOutA,
     output  colClkOutB,
     output  colClkOutC,
     output  colReOutA,
     output  colReOutB,
     output  colReOutC,
     output [15:0] colAddrOutA,
     output [15:0] colAddrOutB,
     output [15:0] colAddrOutC,
     output [7:0] colDataMosiOutA,
     output [7:0] colDataMosiOutB,
     output [7:0] colDataMosiOutC,
     input [7:0] colDataMisoInA,
     input [7:0] colDataMisoInB,
     input [7:0] colDataMisoInC,
     input  colTmrErrorInA,
     input  colTmrErrorInB,
     input  colTmrErrorInC,
     output [3:0] colIDA,
     output [3:0] colIDB,
     output [3:0] colIDC,
     input VDD,
     input VSS
);
wire [15:0] busAddrInBufA;
wire [15:0] busAddrInBufB;
wire [15:0] busAddrInBufC;
wire [7:0] busDataMosiInBufA;
wire [7:0] busDataMosiInBufB;
wire [7:0] busDataMosiInBufC;
wire [7:0] busDataMisoInBufA;
wire [7:0] busDataMisoInBufB;
wire [7:0] busDataMisoInBufC;
wire [3:0] columnAddrInBufA;
wire [3:0] columnAddrInBufB;
wire [3:0] columnAddrInBufC;
wire busRstInBufA;
wire busRstInBufB;
wire busRstInBufC;
wire busWeInBufA;
wire busWeInBufB;
wire busWeInBufC;
wire busClkInBufA;
wire busClkInBufB;
wire busClkInBufC;
wire busReInBufA;
wire busReInBufB;
wire busReInBufC;
wire busTmrErrorInBufA;
wire busTmrErrorInBufB;
wire busTmrErrorInBufC;
wire [7:0] colDataMisoInBufA;
wire [7:0] colDataMisoInBufB;
wire [7:0] colDataMisoInBufC;
wire colTmrErrorInBufA;
wire colTmrErrorInBufB;
wire colTmrErrorInBufC;

busColumnAdapterInBufTMR #(.WIDTH(16)) IB0 (
          .IA(busAddrInA),
          .IB(busAddrInB),
          .IC(busAddrInC),
          .ZA(busAddrInBufA),
          .ZB(busAddrInBufB),
          .ZC(busAddrInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(8)) IB1 (
          .IA(busDataMosiInA),
          .IB(busDataMosiInB),
          .IC(busDataMosiInC),
          .ZA(busDataMosiInBufA),
          .ZB(busDataMosiInBufB),
          .ZC(busDataMosiInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(8)) IB2 (
          .IA(busDataMisoInA),
          .IB(busDataMisoInB),
          .IC(busDataMisoInC),
          .ZA(busDataMisoInBufA),
          .ZB(busDataMisoInBufB),
          .ZC(busDataMisoInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(4)) IB3 (
          .IA(columnAddrInA),
          .IB(columnAddrInB),
          .IC(columnAddrInC),
          .ZA(columnAddrInBufA),
          .ZB(columnAddrInBufB),
          .ZC(columnAddrInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(1)) IB4 (
          .IA(busRstInA),
          .IB(busRstInB),
          .IC(busRstInC),
          .ZA(busRstInBufA),
          .ZB(busRstInBufB),
          .ZC(busRstInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(1)) IB5 (
          .IA(busWeInA),
          .IB(busWeInB),
          .IC(busWeInC),
          .ZA(busWeInBufA),
          .ZB(busWeInBufB),
          .ZC(busWeInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(1)) IB6 (
          .IA(busClkInA),
          .IB(busClkInB),
          .IC(busClkInC),
          .ZA(busClkInBufA),
          .ZB(busClkInBufB),
          .ZC(busClkInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(1)) IB7 (
          .IA(busReInA),
          .IB(busReInB),
          .IC(busReInC),
          .ZA(busReInBufA),
          .ZB(busReInBufB),
          .ZC(busReInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(1)) IB8 (
          .IA(busTmrErrorInA),
          .IB(busTmrErrorInB),
          .IC(busTmrErrorInC),
          .ZA(busTmrErrorInBufA),
          .ZB(busTmrErrorInBufB),
          .ZC(busTmrErrorInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(8)) IB9 (
          .IA(colDataMisoInA),
          .IB(colDataMisoInB),
          .IC(colDataMisoInC),
          .ZA(colDataMisoInBufA),
          .ZB(colDataMisoInBufB),
          .ZC(colDataMisoInBufC)
          );

busColumnAdapterInBufTMR #(.WIDTH(1)) IB10 (
          .IA(colTmrErrorInA),
          .IB(colTmrErrorInB),
          .IC(colTmrErrorInC),
          .ZA(colTmrErrorInBufA),
          .ZB(colTmrErrorInBufB),
          .ZC(colTmrErrorInBufC)
          );
wire broadcastA =  (busAddrInBufA[13] ==1'b1);
wire broadcastB =  (busAddrInBufB[13] ==1'b1);
wire broadcastC =  (busAddrInBufC[13] ==1'b1);
wire [7:0] busDataMisoMaskedA =  (columnAddrInBufA==4'hF) ? 8'h0 : busDataMisoInBufA;
wire [7:0] busDataMisoMaskedB =  (columnAddrInBufB==4'hF) ? 8'h0 : busDataMisoInBufB;
wire [7:0] busDataMisoMaskedC =  (columnAddrInBufC==4'hF) ? 8'h0 : busDataMisoInBufC;
wire busTmrErrorMaskedA =  (columnAddrInBufA==4'hF) ? 8'h0 : busTmrErrorInBufA;
wire busTmrErrorMaskedB =  (columnAddrInBufB==4'hF) ? 8'h0 : busTmrErrorInBufB;
wire busTmrErrorMaskedC =  (columnAddrInBufC==4'hF) ? 8'h0 : busTmrErrorInBufC;
wire columnSelectedA =  (busAddrInBufA[12:9] ==columnAddrInBufA);
wire columnSelectedB =  (busAddrInBufB[12:9] ==columnAddrInBufB);
wire columnSelectedC =  (busAddrInBufC[12:9] ==columnAddrInBufC);
wire colRstOutIntA =  busRstInBufA;
wire colRstOutIntB =  busRstInBufB;
wire colRstOutIntC =  busRstInBufC;
wire colReOutIntA =  busReInBufA;
wire colReOutIntB =  busReInBufB;
wire colReOutIntC =  busReInBufC;
wire colWeOutIntA =  (broadcastA|columnSelectedA) ? busWeInBufA : 1'b0;
wire colWeOutIntB =  (broadcastB|columnSelectedB) ? busWeInBufB : 1'b0;
wire colWeOutIntC =  (broadcastC|columnSelectedC) ? busWeInBufC : 1'b0;
wire colClkOutIntA =  (colTmrErrorInBufA|columnSelectedA|broadcastA) ? busClkInBufA : 1'b0;
wire colClkOutIntB =  (colTmrErrorInBufB|columnSelectedB|broadcastB) ? busClkInBufB : 1'b0;
wire colClkOutIntC =  (colTmrErrorInBufC|columnSelectedC|broadcastC) ? busClkInBufC : 1'b0;
wire [15:0] colAddrOutIntA =  (broadcastA|columnSelectedA) ? busAddrInBufA : 16'b0;
wire [15:0] colAddrOutIntB =  (broadcastB|columnSelectedB) ? busAddrInBufB : 16'b0;
wire [15:0] colAddrOutIntC =  (broadcastC|columnSelectedC) ? busAddrInBufC : 16'b0;
wire [7:0] colDataMosiOutIntA =  (broadcastA|columnSelectedA) ? busDataMosiInBufA : 8'b0;
wire [7:0] colDataMosiOutIntB =  (broadcastB|columnSelectedB) ? busDataMosiInBufB : 8'b0;
wire [7:0] colDataMosiOutIntC =  (broadcastC|columnSelectedC) ? busDataMosiInBufC : 8'b0;
wire [3:0] colIDIntA =  columnAddrInBufA;
wire [3:0] colIDIntB =  columnAddrInBufB;
wire [3:0] colIDIntC =  columnAddrInBufC;
wire [3:0] columnAddrNextOutIntA =  columnAddrInBufA+4'b1;
wire [3:0] columnAddrNextOutIntB =  columnAddrInBufB+4'b1;
wire [3:0] columnAddrNextOutIntC =  columnAddrInBufC+4'b1;
wire busRstOutIntA =  busRstInBufA;
wire busRstOutIntB =  busRstInBufB;
wire busRstOutIntC =  busRstInBufC;
wire busWeOutIntA =  broadcastA ? busWeInBufA : (columnSelectedA ? 1'b0 : busWeInBufA);
wire busWeOutIntB =  broadcastB ? busWeInBufB : (columnSelectedB ? 1'b0 : busWeInBufB);
wire busWeOutIntC =  broadcastC ? busWeInBufC : (columnSelectedC ? 1'b0 : busWeInBufC);
wire busClkOutIntA =  (busTmrErrorMaskedA|!columnSelectedA|broadcastA) ? busClkInBufA : 1'b0;
wire busClkOutIntB =  (busTmrErrorMaskedB|!columnSelectedB|broadcastB) ? busClkInBufB : 1'b0;
wire busClkOutIntC =  (busTmrErrorMaskedC|!columnSelectedC|broadcastC) ? busClkInBufC : 1'b0;
wire busReOutIntA =  busReInBufA;
wire busReOutIntB =  busReInBufB;
wire busReOutIntC =  busReInBufC;
wire [15:0] busAddrOutIntA =  broadcastA ? busAddrInBufA : (columnSelectedA ? 16'b0 : busAddrInBufA);
wire [15:0] busAddrOutIntB =  broadcastB ? busAddrInBufB : (columnSelectedB ? 16'b0 : busAddrInBufB);
wire [15:0] busAddrOutIntC =  broadcastC ? busAddrInBufC : (columnSelectedC ? 16'b0 : busAddrInBufC);
wire [7:0] busDataMosiOutIntA =  broadcastA ? busDataMosiInBufA : (columnSelectedA ? 8'b0 : busDataMosiInBufA);
wire [7:0] busDataMosiOutIntB =  broadcastB ? busDataMosiInBufB : (columnSelectedB ? 8'b0 : busDataMosiInBufB);
wire [7:0] busDataMosiOutIntC =  broadcastC ? busDataMosiInBufC : (columnSelectedC ? 8'b0 : busDataMosiInBufC);
wire [7:0] busDataMisoOutIntA =  columnSelectedA ? colDataMisoInBufA : busDataMisoMaskedA;
wire [7:0] busDataMisoOutIntB =  columnSelectedB ? colDataMisoInBufB : busDataMisoMaskedB;
wire [7:0] busDataMisoOutIntC =  columnSelectedC ? colDataMisoInBufC : busDataMisoMaskedC;
wire busTmrErrorOutIntA =  colTmrErrorInBufA|busTmrErrorMaskedA;
wire busTmrErrorOutIntB =  colTmrErrorInBufB|busTmrErrorMaskedB;
wire busTmrErrorOutIntC =  colTmrErrorInBufC|busTmrErrorMaskedC;

busColumnAdapterOutBufTMR #(.WIDTH(16)) OB0 (
          .IA(busAddrOutIntA),
          .IB(busAddrOutIntB),
          .IC(busAddrOutIntC),
          .ZA(busAddrOutA),
          .ZB(busAddrOutB),
          .ZC(busAddrOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(16)) OB1 (
          .IA(colAddrOutIntA),
          .IB(colAddrOutIntB),
          .IC(colAddrOutIntC),
          .ZA(colAddrOutA),
          .ZB(colAddrOutB),
          .ZC(colAddrOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(8)) OB2 (
          .IA(busDataMisoOutIntA),
          .IB(busDataMisoOutIntB),
          .IC(busDataMisoOutIntC),
          .ZA(busDataMisoOutA),
          .ZB(busDataMisoOutB),
          .ZC(busDataMisoOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(8)) OB3 (
          .IA(busDataMosiOutIntA),
          .IB(busDataMosiOutIntB),
          .IC(busDataMosiOutIntC),
          .ZA(busDataMosiOutA),
          .ZB(busDataMosiOutB),
          .ZC(busDataMosiOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(8)) OB4 (
          .IA(colDataMosiOutIntA),
          .IB(colDataMosiOutIntB),
          .IC(colDataMosiOutIntC),
          .ZA(colDataMosiOutA),
          .ZB(colDataMosiOutB),
          .ZC(colDataMosiOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(4)) OB5 (
          .IA(colIDIntA),
          .IB(colIDIntB),
          .IC(colIDIntC),
          .ZA(colIDA),
          .ZB(colIDB),
          .ZC(colIDC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(4)) OB6 (
          .IA(columnAddrNextOutIntA),
          .IB(columnAddrNextOutIntB),
          .IC(columnAddrNextOutIntC),
          .ZA(columnAddrNextOutA),
          .ZB(columnAddrNextOutB),
          .ZC(columnAddrNextOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(1)) OB7 (
          .IA(busTmrErrorOutIntA),
          .IB(busTmrErrorOutIntB),
          .IC(busTmrErrorOutIntC),
          .ZA(busTmrErrorOutA),
          .ZB(busTmrErrorOutB),
          .ZC(busTmrErrorOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(1)) OB8 (
          .IA(busRstOutIntA),
          .IB(busRstOutIntB),
          .IC(busRstOutIntC),
          .ZA(busRstOutA),
          .ZB(busRstOutB),
          .ZC(busRstOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(1)) OB9 (
          .IA(busWeOutIntA),
          .IB(busWeOutIntB),
          .IC(busWeOutIntC),
          .ZA(busWeOutA),
          .ZB(busWeOutB),
          .ZC(busWeOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(1)) OB10 (
          .IA(busClkOutIntA),
          .IB(busClkOutIntB),
          .IC(busClkOutIntC),
          .ZA(busClkOutA),
          .ZB(busClkOutB),
          .ZC(busClkOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(1)) OB11 (
          .IA(busReOutIntA),
          .IB(busReOutIntB),
          .IC(busReOutIntC),
          .ZA(busReOutA),
          .ZB(busReOutB),
          .ZC(busReOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(1)) OB12 (
          .IA(colRstOutIntA),
          .IB(colRstOutIntB),
          .IC(colRstOutIntC),
          .ZA(colRstOutA),
          .ZB(colRstOutB),
          .ZC(colRstOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(1)) OB13 (
          .IA(colWeOutIntA),
          .IB(colWeOutIntB),
          .IC(colWeOutIntC),
          .ZA(colWeOutA),
          .ZB(colWeOutB),
          .ZC(colWeOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(1)) OB14 (
          .IA(colClkOutIntA),
          .IB(colClkOutIntB),
          .IC(colClkOutIntC),
          .ZA(colClkOutA),
          .ZB(colClkOutB),
          .ZC(colClkOutC)
          );

busColumnAdapterOutBufTMR #(.WIDTH(1)) OB15 (
          .IA(colReOutIntA),
          .IB(colReOutIntB),
          .IC(colReOutIntC),
          .ZA(colReOutA),
          .ZB(colReOutB),
          .ZC(colReOutC)
          );
endmodule

