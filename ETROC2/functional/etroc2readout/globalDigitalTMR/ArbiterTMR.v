/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/ArbiterTMR.v                                                        *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:03                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: fastcommand/Arbiter.v                                                                  *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-22 20:45:26.989552                                         *
 *           File Size         : 1399                                                               *
 *           MD5 hash          : 6640da814f341b9cae9dc46718a92085                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns/1ps
module ArbiterTMR(
     clk1A,
     clk1B,
     clk1C,
     clk2A,
     clk2B,
     clk2C,
     enableA,
     enableB,
     enableC,
     clk_samplerA,
     clk_samplerB,
     clk_samplerC,
     rstn_arbiterA,
     rstn_arbiterB,
     rstn_arbiterC,
     fcA,
     fcB,
     fcC,
     edA,
     edB,
     edC,
     n_samplesA,
     n_samplesB,
     n_samplesC
);
input clk1A;
input clk1B;
input clk1C;
input clk2A;
input clk2B;
input clk2C;
input enableA;
input enableB;
input enableC;
input clk_samplerA;
input clk_samplerB;
input clk_samplerC;
input rstn_arbiterA;
input rstn_arbiterB;
input rstn_arbiterC;
input fcA;
input fcB;
input fcC;
output edA;
output edB;
output edC;
reg  edA;
reg  edB;
reg  edC;
output [7:0] n_samplesA;
output [7:0] n_samplesB;
output [7:0] n_samplesC;
reg  [7:0] n_samplesA;
reg  [7:0] n_samplesB;
reg  [7:0] n_samplesC;
reg  q1A;
reg  q2A;
reg  q1B;
reg  q2B;
reg  q1C;
reg  q2C;

always @( posedge clk1A )
     begin
          if (enableA)
               q1A <= fcA;
     end

always @( posedge clk1B )
     begin
          if (enableB)
               q1B <= fcB;
     end

always @( posedge clk1C )
     begin
          if (enableC)
               q1C <= fcC;
     end

always @( posedge clk2A )
     begin
          if (enableA)
               q2A <= fcA;
     end

always @( posedge clk2B )
     begin
          if (enableB)
               q2B <= fcB;
     end

always @( posedge clk2C )
     begin
          if (enableC)
               q2C <= fcC;
     end
wire [7:0] next_n_samplesA =  n_samplesA+1;
wire [7:0] next_n_samplesB =  n_samplesB+1;
wire [7:0] next_n_samplesC =  n_samplesC+1;
wire [7:0] next_n_samples_VotedA =  next_n_samplesA;
wire [7:0] next_n_samples_VotedB =  next_n_samplesB;
wire [7:0] next_n_samples_VotedC =  next_n_samplesC;

always @( posedge clk_samplerA )
     begin
          if (!rstn_arbiterA)
               begin
                    n_samplesA <= 0;
                    edA <= 0;
               end
          else
               if (enableA)
                    begin
                         if (n_samplesA!=8'b11111111)
                              begin
                                   n_samplesA <= next_n_samples_VotedA;
                                   if (q1A!=q2A)
                                        begin
                                             edA <= 1;
                                        end
                              end
                    end
     end

always @( posedge clk_samplerB )
     begin
          if (!rstn_arbiterB)
               begin
                    n_samplesB <= 0;
                    edB <= 0;
               end
          else
               if (enableB)
                    begin
                         if (n_samplesB!=8'b11111111)
                              begin
                                   n_samplesB <= next_n_samples_VotedB;
                                   if (q1B!=q2B)
                                        begin
                                             edB <= 1;
                                        end
                              end
                    end
     end

always @( posedge clk_samplerC )
     begin
          if (!rstn_arbiterC)
               begin
                    n_samplesC <= 0;
                    edC <= 0;
               end
          else
               if (enableC)
                    begin
                         if (n_samplesC!=8'b11111111)
                              begin
                                   n_samplesC <= next_n_samples_VotedC;
                                   if (q1C!=q2C)
                                        begin
                                             edC <= 1;
                                        end
                              end
                    end
     end
endmodule

