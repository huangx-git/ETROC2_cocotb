/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/BCIDBufferTMR.v                                                     *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:00                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: BCIDBuffer.v                                                                           *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:01.508902                                         *
 *           File Size         : 2888                                                               *
 *           MD5 hash          : 907d0dd20eb2628abcd34d33c9d36fb0                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps / 1ps

module BCIDBufferTMR #(
  parameter ADDRWIDTH=7
)(
     input  clkA,
     input  clkB,
     input  clkC,
     input  resetA,
     input  resetB,
     input  resetC,
     input [11:0] inBCIDA,
     input [11:0] inBCIDB,
     input [11:0] inBCIDC,
     input [ADDRWIDTH-1:0] wrAddrA,
     input [ADDRWIDTH-1:0] wrAddrB,
     input [ADDRWIDTH-1:0] wrAddrC,
     input [ADDRWIDTH-1:0] rdAddrA,
     input [ADDRWIDTH-1:0] rdAddrB,
     input [ADDRWIDTH-1:0] rdAddrC,
     input  L1AA,
     input  L1AB,
     input  L1AC,
     input  rdEnA,
     input  rdEnB,
     input  rdEnC,
     output [11:0] outBCIDA,
     output [11:0] outBCIDB,
     output [11:0] outBCIDC,
     output  E1AA,
     output  E1AB,
     output  E1AC,
     output  E2AA,
     output  E2AB,
     output  E2AC
);
reg  wrenA;
reg  wrenB;
reg  wrenC;
reg  syncL1AA;
reg  syncL1AB;
reg  syncL1AC;
reg  syncL1A1DA;
reg  syncL1A1DB;
reg  syncL1A1DC;
reg  localL1AA;
reg  localL1AB;
reg  localL1AC;

always @( posedge clkA )
     begin
          if (~resetA)
               localL1AA <= 1'b0;
          else
               localL1AA <= L1AA;
     end

always @( posedge clkB )
     begin
          if (~resetB)
               localL1AB <= 1'b0;
          else
               localL1AB <= L1AB;
     end

always @( posedge clkC )
     begin
          if (~resetC)
               localL1AC <= 1'b0;
          else
               localL1AC <= L1AC;
     end

always @( negedge clkA )
     begin
          syncL1AA <= localL1AA;
          syncL1A1DA <= syncL1AA;
     end

always @( negedge clkB )
     begin
          syncL1AB <= localL1AB;
          syncL1A1DB <= syncL1AB;
     end

always @( negedge clkC )
     begin
          syncL1AC <= localL1AC;
          syncL1A1DC <= syncL1AC;
     end

always @( posedge clkA )
     begin
          if (~resetA)
               wrenA <= 1'b0;
          else
               wrenA <= syncL1A1DA;
     end

always @( posedge clkB )
     begin
          if (~resetB)
               wrenB <= 1'b0;
          else
               wrenB <= syncL1A1DB;
     end

always @( posedge clkC )
     begin
          if (~resetC)
               wrenC <= 1'b0;
          else
               wrenC <= syncL1A1DC;
     end
wire rdEnNA =  ~rdEnA;
wire rdEnNB =  ~rdEnB;
wire rdEnNC =  ~rdEnC;
wire clkNA =  ~clkA;
wire clkNB =  ~clkB;
wire clkNC =  ~clkC;
wire wrenNA =  ~wrenA;
wire wrenNB =  ~wrenB;
wire wrenNC =  ~wrenC;

BCID_mem_rtl_topTMR BCIDB (
          .QAA(outBCIDA),
          .QAB(outBCIDB),
          .QAC(outBCIDC),
          .E1AA(E1AA),
          .E1AB(E1AB),
          .E1AC(E1AC),
          .E2AA(E2AA),
          .E2AB(E2AB),
          .E2AC(E2AC),
          .CLKAA(clkA),
          .CLKAB(clkB),
          .CLKAC(clkC),
          .CENAA(rdEnNA),
          .CENAB(rdEnNB),
          .CENAC(rdEnNC),
          .AAA(rdAddrA),
          .AAB(rdAddrB),
          .AAC(rdAddrC),
          .CLKBA(clkNA),
          .CLKBB(clkNB),
          .CLKBC(clkNC),
          .CENBA(wrenNA),
          .CENBB(wrenNB),
          .CENBC(wrenNC),
          .ABA(wrAddrA),
          .ABB(wrAddrB),
          .ABC(wrAddrC),
          .DBA(inBCIDA),
          .DBB(inBCIDB),
          .DBC(inBCIDC),
          .EMAAA(3'b010),
          .EMAAB(3'b010),
          .EMAAC(3'b010),
          .EMABA(3'b010),
          .EMABB(3'b010),
          .EMABC(3'b010),
          .RET1NA(1'b1),
          .RET1NB(1'b1),
          .RET1NC(1'b1),
          .COLLDISNA(1'b1),
          .COLLDISNB(1'b1),
          .COLLDISNC(1'b1)
          );
endmodule

