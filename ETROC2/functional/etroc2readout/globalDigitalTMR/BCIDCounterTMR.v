/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/BCIDCounterTMR.v                                                    *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:01                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: BCIDCounter.v                                                                          *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:01.509911                                         *
 *           File Size         : 1375                                                               *
 *           MD5 hash          : a01eb2fa5ff9c45fca594420ca896861                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps / 1ps

`include  "commonDefinition.v"

module BCIDCounterTMR(
     input  clkTMRA,
     input  clkTMRB,
     input  clkTMRC,
     input  resetTMRA,
     input  resetTMRB,
     input  resetTMRC,
     input  disTMRA,
     input  disTMRB,
     input  disTMRC,
     input  rstBCIDTMRA,
     input  rstBCIDTMRB,
     input  rstBCIDTMRC,
     input [11:0] offsetTMRA,
     input [11:0] offsetTMRB,
     input [11:0] offsetTMRC,
     output [11:0] BCIDTMRA,
     output [11:0] BCIDTMRB,
     output [11:0] BCIDTMRC
);
wor nextBCIDTmrErrorC;
wire [11:0] nextBCIDVotedC;
wor nextBCIDTmrErrorB;
wire [11:0] nextBCIDVotedB;
wor nextBCIDTmrErrorA;
wire [11:0] nextBCIDVotedA;
reg  [11:0] BCIDRegTMRA;
reg  [11:0] BCIDRegTMRB;
reg  [11:0] BCIDRegTMRC;
assign BCIDTMRA =  BCIDRegTMRA;
assign BCIDTMRB =  BCIDRegTMRB;
assign BCIDTMRC =  BCIDRegTMRC;
wire [11:0] nextBCIDA =  BCIDRegTMRA+12'd1;
wire [11:0] nextBCIDB =  BCIDRegTMRB+12'd1;
wire [11:0] nextBCIDC =  BCIDRegTMRC+12'd1;

always @( posedge clkTMRA )
     begin
          if (!resetTMRA)
               begin
                    BCIDRegTMRA <= offsetTMRA;
               end
          else
               if (!disTMRA)
                    begin
                         if (!rstBCIDTMRA)
                              begin
                                   BCIDRegTMRA <= offsetTMRA;
                              end
                         else
                              if (BCIDRegTMRA==`MAX_BCID_NUMBER)
                                   begin
                                        BCIDRegTMRA <= 12'H000;
                                   end
                              else
                                   begin
                                        BCIDRegTMRA <= nextBCIDVotedA;
                                   end
                    end
     end

always @( posedge clkTMRB )
     begin
          if (!resetTMRB)
               begin
                    BCIDRegTMRB <= offsetTMRB;
               end
          else
               if (!disTMRB)
                    begin
                         if (!rstBCIDTMRB)
                              begin
                                   BCIDRegTMRB <= offsetTMRB;
                              end
                         else
                              if (BCIDRegTMRB==`MAX_BCID_NUMBER)
                                   begin
                                        BCIDRegTMRB <= 12'H000;
                                   end
                              else
                                   begin
                                        BCIDRegTMRB <= nextBCIDVotedB;
                                   end
                    end
     end

always @( posedge clkTMRC )
     begin
          if (!resetTMRC)
               begin
                    BCIDRegTMRC <= offsetTMRC;
               end
          else
               if (!disTMRC)
                    begin
                         if (!rstBCIDTMRC)
                              begin
                                   BCIDRegTMRC <= offsetTMRC;
                              end
                         else
                              if (BCIDRegTMRC==`MAX_BCID_NUMBER)
                                   begin
                                        BCIDRegTMRC <= 12'H000;
                                   end
                              else
                                   begin
                                        BCIDRegTMRC <= nextBCIDVotedC;
                                   end
                    end
     end

majorityVoter #(.WIDTH(12)) nextBCIDVoterA (
          .inA(nextBCIDA),
          .inB(nextBCIDB),
          .inC(nextBCIDC),
          .out(nextBCIDVotedA),
          .tmrErr(nextBCIDTmrErrorA)
          );

majorityVoter #(.WIDTH(12)) nextBCIDVoterB (
          .inA(nextBCIDA),
          .inB(nextBCIDB),
          .inC(nextBCIDC),
          .out(nextBCIDVotedB),
          .tmrErr(nextBCIDTmrErrorB)
          );

majorityVoter #(.WIDTH(12)) nextBCIDVoterC (
          .inA(nextBCIDA),
          .inB(nextBCIDB),
          .inC(nextBCIDC),
          .out(nextBCIDVotedC),
          .tmrErr(nextBCIDTmrErrorC)
          );
endmodule

