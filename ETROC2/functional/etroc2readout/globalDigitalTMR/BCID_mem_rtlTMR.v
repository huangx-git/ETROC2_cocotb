/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/BCID_mem_rtlTMR.v                                                   *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:09                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: memBlock/BCID_mem_rtl.v                                                                *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:02.318897                                         *
 *           File Size         : 8228                                                               *
 *           MD5 hash          : 904f0758b75e542f8f757e3bea324e8d                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns/1ps
`include  "commonDefinition.v"
module BCID_mem_rtl_topTMR(
     QAA,
     QAB,
     QAC,
     E1AA,
     E1AB,
     E1AC,
     E2AA,
     E2AB,
     E2AC,
     CLKAA,
     CLKAB,
     CLKAC,
     CENAA,
     CENAB,
     CENAC,
     AAA,
     AAB,
     AAC,
     CLKBA,
     CLKBB,
     CLKBC,
     CENBA,
     CENBB,
     CENBC,
     ABA,
     ABB,
     ABC,
     DBA,
     DBB,
     DBC,
     EMAAA,
     EMAAB,
     EMAAC,
     EMABA,
     EMABB,
     EMABC,
     RET1NA,
     RET1NB,
     RET1NC,
     COLLDISNA,
     COLLDISNB,
     COLLDISNC
);
output [11:0] QAA;
output [11:0] QAB;
output [11:0] QAC;
output E1AA;
output E1AB;
output E1AC;
output E2AA;
output E2AB;
output E2AC;
input CLKAA;
input CLKAB;
input CLKAC;
input CENAA;
input CENAB;
input CENAC;
input [6:0] AAA;
input [6:0] AAB;
input [6:0] AAC;
input CLKBA;
input CLKBB;
input CLKBC;
input CENBA;
input CENBB;
input CENBC;
input [6:0] ABA;
input [6:0] ABB;
input [6:0] ABC;
input [11:0] DBA;
input [11:0] DBB;
input [11:0] DBC;
input [2:0] EMAAA;
input [2:0] EMAAB;
input [2:0] EMAAC;
input [2:0] EMABA;
input [2:0] EMABB;
input [2:0] EMABC;
input RET1NA;
input RET1NB;
input RET1NC;
input COLLDISNA;
input COLLDISNB;
input COLLDISNC;
wire [17:0] QOAA;
wire [17:0] QOAB;
wire [17:0] QOAC;
wire [17:0] DIBA;
wire [17:0] DIBB;
wire [17:0] DIBC;

BCID_mem_fr_topTMR u0 (
          .QOAA(QOAA),
          .QOAB(QOAB),
          .QOAC(QOAC),
          .CLKAA(CLKAA),
          .CLKAB(CLKAB),
          .CLKAC(CLKAC),
          .CENAA(CENAA),
          .CENAB(CENAB),
          .CENAC(CENAC),
          .AAA(AAA),
          .AAB(AAB),
          .AAC(AAC),
          .CLKBA(CLKBA),
          .CLKBB(CLKBB),
          .CLKBC(CLKBC),
          .CENBA(CENBA),
          .CENBB(CENBB),
          .CENBC(CENBC),
          .ABA(ABA),
          .ABB(ABB),
          .ABC(ABC),
          .DIBA(DIBA),
          .DIBB(DIBB),
          .DIBC(DIBC),
          .EMAAA(EMAAA),
          .EMAAB(EMAAB),
          .EMAAC(EMAAC),
          .EMABA(EMABA),
          .EMABB(EMABB),
          .EMABC(EMABC),
          .RET1NA(RET1NA),
          .RET1NB(RET1NB),
          .RET1NC(RET1NC),
          .COLLDISNA(COLLDISNA),
          .COLLDISNB(COLLDISNB),
          .COLLDISNC(COLLDISNC)
          );

BCID_mem_encoderTMR e0 (
          .EDIA(DBA),
          .EDIB(DBB),
          .EDIC(DBC),
          .EDOA(DIBA),
          .EDOB(DIBB),
          .EDOC(DIBC)
          );

BCID_mem_decoderTMR d0 (
          .DDIA(QOAA),
          .DDIB(QOAB),
          .DDIC(QOAC),
          .DDOA(QAA),
          .DDOB(QAB),
          .DDOC(QAC),
          .E1CODEA(E1AA),
          .E1CODEB(E1AB),
          .E1CODEC(E1AC),
          .E2CODEA(E2AA),
          .E2CODEB(E2AB),
          .E2CODEC(E2AC)
          );
endmodule

module BCID_mem_fr_topTMR(
     QOAA,
     QOAB,
     QOAC,
     CLKAA,
     CLKAB,
     CLKAC,
     CENAA,
     CENAB,
     CENAC,
     AAA,
     AAB,
     AAC,
     CLKBA,
     CLKBB,
     CLKBC,
     CENBA,
     CENBB,
     CENBC,
     ABA,
     ABB,
     ABC,
     DIBA,
     DIBB,
     DIBC,
     EMAAA,
     EMAAB,
     EMAAC,
     EMABA,
     EMABB,
     EMABC,
     RET1NA,
     RET1NB,
     RET1NC,
     COLLDISNA,
     COLLDISNB,
     COLLDISNC
);
wire [17:0] QA;
wor EMABTmrError;
wire [2:0] EMAB;
wor CLKATmrError;
wire CLKA;
wor COLLDISNTmrError;
wire COLLDISN;
wor EMAATmrError;
wire [2:0] EMAA;
wor RET1NTmrError;
wire RET1N;
wor AATmrError;
wire [6:0] AA;
wor ABTmrError;
wire [6:0] AB;
wor DBTmrError;
wire [17:0] DB;
wor CENATmrError;
wire CENA;
wor CLKBTmrError;
wire CLKB;
wor CENBTmrError;
wire CENB;
output [17:0] QOAA;
output [17:0] QOAB;
output [17:0] QOAC;
input CLKAA;
input CLKAB;
input CLKAC;
input CENAA;
input CENAB;
input CENAC;
input [6:0] AAA;
input [6:0] AAB;
input [6:0] AAC;
input CLKBA;
input CLKBB;
input CLKBC;
input CENBA;
input CENBB;
input CENBC;
input [6:0] ABA;
input [6:0] ABB;
input [6:0] ABC;
input [17:0] DIBA;
input [17:0] DIBB;
input [17:0] DIBC;
input [2:0] EMAAA;
input [2:0] EMAAB;
input [2:0] EMAAC;
input [2:0] EMABA;
input [2:0] EMABB;
input [2:0] EMABC;
input RET1NA;
input RET1NB;
input RET1NC;
input COLLDISNA;
input COLLDISNB;
input COLLDISNC;
wire [17:0] DBA;
wire [17:0] DBB;
wire [17:0] DBC;
wire [17:0] QAA;
wire [17:0] QAB;
wire [17:0] QAC;
assign DBA =  DIBA;
assign DBB =  DIBB;
assign DBC =  DIBC;
assign QOAA =  QAA;
assign QOAB =  QAB;
assign QOAC =  QAC;

latchedBasedRAM #(.data_width(18), .depth(128), .log_depth(7), .delay(4)) u0 (
          .QA(QA),
          .CLKA(CLKA),
          .CENA(CENA),
          .AA(AA),
          .CLKB(CLKB),
          .CENB(CENB),
          .AB(AB),
          .DB(DB),
          .EMAA(EMAA),
          .EMAB(EMAB),
          .RET1N(RET1N),
          .COLLDISN(COLLDISN)
          );

majorityVoter CENBVoter (
          .inA(CENBA),
          .inB(CENBB),
          .inC(CENBC),
          .out(CENB),
          .tmrErr(CENBTmrError)
          );

majorityVoter CLKBVoter (
          .inA(CLKBA),
          .inB(CLKBB),
          .inC(CLKBC),
          .out(CLKB),
          .tmrErr(CLKBTmrError)
          );

majorityVoter CENAVoter (
          .inA(CENAA),
          .inB(CENAB),
          .inC(CENAC),
          .out(CENA),
          .tmrErr(CENATmrError)
          );

majorityVoter #(.WIDTH(18)) DBVoter (
          .inA(DBA),
          .inB(DBB),
          .inC(DBC),
          .out(DB),
          .tmrErr(DBTmrError)
          );

majorityVoter #(.WIDTH(7)) ABVoter (
          .inA(ABA),
          .inB(ABB),
          .inC(ABC),
          .out(AB),
          .tmrErr(ABTmrError)
          );

majorityVoter #(.WIDTH(7)) AAVoter (
          .inA(AAA),
          .inB(AAB),
          .inC(AAC),
          .out(AA),
          .tmrErr(AATmrError)
          );

majorityVoter RET1NVoter (
          .inA(RET1NA),
          .inB(RET1NB),
          .inC(RET1NC),
          .out(RET1N),
          .tmrErr(RET1NTmrError)
          );

majorityVoter #(.WIDTH(3)) EMAAVoter (
          .inA(EMAAA),
          .inB(EMAAB),
          .inC(EMAAC),
          .out(EMAA),
          .tmrErr(EMAATmrError)
          );

majorityVoter COLLDISNVoter (
          .inA(COLLDISNA),
          .inB(COLLDISNB),
          .inC(COLLDISNC),
          .out(COLLDISN),
          .tmrErr(COLLDISNTmrError)
          );

majorityVoter CLKAVoter (
          .inA(CLKAA),
          .inB(CLKAB),
          .inC(CLKAC),
          .out(CLKA),
          .tmrErr(CLKATmrError)
          );

majorityVoter #(.WIDTH(3)) EMABVoter (
          .inA(EMABA),
          .inB(EMABB),
          .inC(EMABC),
          .out(EMAB),
          .tmrErr(EMABTmrError)
          );

fanout #(.WIDTH(18)) QAFanout (
          .in(QA),
          .outA(QAA),
          .outB(QAB),
          .outC(QAC)
          );
endmodule

module BCID_mem_encoderTMR(
     EDIA,
     EDIB,
     EDIC,
     EDOA,
     EDOB,
     EDOC
);
input [11:0] EDIA;
input [11:0] EDIB;
input [11:0] EDIC;
output [17:0] EDOA;
output [17:0] EDOB;
output [17:0] EDOC;
assign EDOA[0]  =  EDIA[0] ^EDIA[1] ^EDIA[2] ^EDIA[4] ^EDIA[5] ^EDIA[8] ;
assign EDOB[0]  =  EDIB[0] ^EDIB[1] ^EDIB[2] ^EDIB[4] ^EDIB[5] ^EDIB[8] ;
assign EDOC[0]  =  EDIC[0] ^EDIC[1] ^EDIC[2] ^EDIC[4] ^EDIC[5] ^EDIC[8] ;
assign EDOA[1]  =  EDIA[0] ^EDIA[1] ^EDIA[3] ^EDIA[4] ^EDIA[6] ^EDIA[9] ;
assign EDOB[1]  =  EDIB[0] ^EDIB[1] ^EDIB[3] ^EDIB[4] ^EDIB[6] ^EDIB[9] ;
assign EDOC[1]  =  EDIC[0] ^EDIC[1] ^EDIC[3] ^EDIC[4] ^EDIC[6] ^EDIC[9] ;
assign EDOA[2]  =  EDIA[0] ^EDIA[2] ^EDIA[3] ^EDIA[5] ^EDIA[7] ^EDIA[10] ;
assign EDOB[2]  =  EDIB[0] ^EDIB[2] ^EDIB[3] ^EDIB[5] ^EDIB[7] ^EDIB[10] ;
assign EDOC[2]  =  EDIC[0] ^EDIC[2] ^EDIC[3] ^EDIC[5] ^EDIC[7] ^EDIC[10] ;
assign EDOA[3]  =  EDIA[0] ;
assign EDOB[3]  =  EDIB[0] ;
assign EDOC[3]  =  EDIC[0] ;
assign EDOA[4]  =  EDIA[1] ^EDIA[2] ^EDIA[3] ^EDIA[6] ^EDIA[7] ^EDIA[11] ;
assign EDOB[4]  =  EDIB[1] ^EDIB[2] ^EDIB[3] ^EDIB[6] ^EDIB[7] ^EDIB[11] ;
assign EDOC[4]  =  EDIC[1] ^EDIC[2] ^EDIC[3] ^EDIC[6] ^EDIC[7] ^EDIC[11] ;
assign EDOA[5]  =  EDIA[1] ;
assign EDOB[5]  =  EDIB[1] ;
assign EDOC[5]  =  EDIC[1] ;
assign EDOA[6]  =  EDIA[2] ;
assign EDOB[6]  =  EDIB[2] ;
assign EDOC[6]  =  EDIC[2] ;
assign EDOA[7]  =  EDIA[3] ;
assign EDOB[7]  =  EDIB[3] ;
assign EDOC[7]  =  EDIC[3] ;
assign EDOA[8]  =  EDIA[4] ^EDIA[5] ^EDIA[8] ^EDIA[9] ^EDIA[10] ^EDIA[11] ;
assign EDOB[8]  =  EDIB[4] ^EDIB[5] ^EDIB[8] ^EDIB[9] ^EDIB[10] ^EDIB[11] ;
assign EDOC[8]  =  EDIC[4] ^EDIC[5] ^EDIC[8] ^EDIC[9] ^EDIC[10] ^EDIC[11] ;
assign EDOA[9]  =  EDIA[4] ;
assign EDOB[9]  =  EDIB[4] ;
assign EDOC[9]  =  EDIC[4] ;
assign EDOA[10]  =  EDIA[5] ;
assign EDOB[10]  =  EDIB[5] ;
assign EDOC[10]  =  EDIC[5] ;
assign EDOA[11]  =  EDIA[6] ^EDIA[7] ^EDIA[8] ^EDIA[9] ^EDIA[10] ^EDIA[11] ;
assign EDOB[11]  =  EDIB[6] ^EDIB[7] ^EDIB[8] ^EDIB[9] ^EDIB[10] ^EDIB[11] ;
assign EDOC[11]  =  EDIC[6] ^EDIC[7] ^EDIC[8] ^EDIC[9] ^EDIC[10] ^EDIC[11] ;
assign EDOA[12]  =  EDIA[6] ;
assign EDOB[12]  =  EDIB[6] ;
assign EDOC[12]  =  EDIC[6] ;
assign EDOA[13]  =  EDIA[7] ;
assign EDOB[13]  =  EDIB[7] ;
assign EDOC[13]  =  EDIC[7] ;
assign EDOA[14]  =  EDIA[8] ;
assign EDOB[14]  =  EDIB[8] ;
assign EDOC[14]  =  EDIC[8] ;
assign EDOA[15]  =  EDIA[9] ;
assign EDOB[15]  =  EDIB[9] ;
assign EDOC[15]  =  EDIC[9] ;
assign EDOA[16]  =  EDIA[10] ;
assign EDOB[16]  =  EDIB[10] ;
assign EDOC[16]  =  EDIC[10] ;
assign EDOA[17]  =  EDIA[11] ;
assign EDOB[17]  =  EDIB[11] ;
assign EDOC[17]  =  EDIC[11] ;
endmodule

module BCID_mem_decoderTMR(
     DDIA,
     DDIB,
     DDIC,
     DDOA,
     DDOB,
     DDOC,
     E1CODEA,
     E1CODEB,
     E1CODEC,
     E2CODEA,
     E2CODEB,
     E2CODEC
);
input [17:0] DDIA;
input [17:0] DDIB;
input [17:0] DDIC;
output [11:0] DDOA;
output [11:0] DDOB;
output [11:0] DDOC;
output E1CODEA;
output E1CODEB;
output E1CODEC;
output E2CODEA;
output E2CODEB;
output E2CODEC;
wire [5:0] ncA;
wire [5:0] ncB;
wire [5:0] ncC;
wire [11:0] errBitA;
wire [11:0] errBitB;
wire [11:0] errBitC;
wire [17:0] XIA;
wire [17:0] XIB;
wire [17:0] XIC;
assign XIA =  DDIA;
assign XIB =  DDIB;
assign XIC =  DDIC;
assign ncA[0]  =  XIA[0] ^XIA[3] ^XIA[5] ^XIA[6] ^XIA[9] ^XIA[10] ^XIA[14] ;
assign ncB[0]  =  XIB[0] ^XIB[3] ^XIB[5] ^XIB[6] ^XIB[9] ^XIB[10] ^XIB[14] ;
assign ncC[0]  =  XIC[0] ^XIC[3] ^XIC[5] ^XIC[6] ^XIC[9] ^XIC[10] ^XIC[14] ;
assign ncA[1]  =  XIA[1] ^XIA[3] ^XIA[5] ^XIA[7] ^XIA[9] ^XIA[12] ^XIA[15] ;
assign ncB[1]  =  XIB[1] ^XIB[3] ^XIB[5] ^XIB[7] ^XIB[9] ^XIB[12] ^XIB[15] ;
assign ncC[1]  =  XIC[1] ^XIC[3] ^XIC[5] ^XIC[7] ^XIC[9] ^XIC[12] ^XIC[15] ;
assign ncA[2]  =  XIA[2] ^XIA[3] ^XIA[6] ^XIA[7] ^XIA[10] ^XIA[13] ^XIA[16] ;
assign ncB[2]  =  XIB[2] ^XIB[3] ^XIB[6] ^XIB[7] ^XIB[10] ^XIB[13] ^XIB[16] ;
assign ncC[2]  =  XIC[2] ^XIC[3] ^XIC[6] ^XIC[7] ^XIC[10] ^XIC[13] ^XIC[16] ;
assign ncA[3]  =  XIA[4] ^XIA[5] ^XIA[6] ^XIA[7] ^XIA[12] ^XIA[13] ^XIA[17] ;
assign ncB[3]  =  XIB[4] ^XIB[5] ^XIB[6] ^XIB[7] ^XIB[12] ^XIB[13] ^XIB[17] ;
assign ncC[3]  =  XIC[4] ^XIC[5] ^XIC[6] ^XIC[7] ^XIC[12] ^XIC[13] ^XIC[17] ;
assign ncA[4]  =  XIA[8] ^XIA[9] ^XIA[10] ^XIA[14] ^XIA[15] ^XIA[16] ^XIA[17] ;
assign ncB[4]  =  XIB[8] ^XIB[9] ^XIB[10] ^XIB[14] ^XIB[15] ^XIB[16] ^XIB[17] ;
assign ncC[4]  =  XIC[8] ^XIC[9] ^XIC[10] ^XIC[14] ^XIC[15] ^XIC[16] ^XIC[17] ;
assign ncA[5]  =  XIA[11] ^XIA[12] ^XIA[13] ^XIA[14] ^XIA[15] ^XIA[16] ^XIA[17] ;
assign ncB[5]  =  XIB[11] ^XIB[12] ^XIB[13] ^XIB[14] ^XIB[15] ^XIB[16] ^XIB[17] ;
assign ncC[5]  =  XIC[11] ^XIC[12] ^XIC[13] ^XIC[14] ^XIC[15] ^XIC[16] ^XIC[17] ;
assign E1CODEA =  |ncA;
assign E1CODEB =  |ncB;
assign E1CODEC =  |ncC;
assign E2CODEA =  E1CODEA&&!(^ ncA );
assign E2CODEB =  E1CODEB&&!(^ ncB );
assign E2CODEC =  E1CODEC&&!(^ ncC );
assign errBitA[0]  =  !ncA[5] &!ncA[4] &!ncA[3] &ncA[2] &ncA[1] &ncA[0] ;
assign errBitB[0]  =  !ncB[5] &!ncB[4] &!ncB[3] &ncB[2] &ncB[1] &ncB[0] ;
assign errBitC[0]  =  !ncC[5] &!ncC[4] &!ncC[3] &ncC[2] &ncC[1] &ncC[0] ;
assign errBitA[1]  =  !ncA[5] &!ncA[4] &ncA[3] &!ncA[2] &ncA[1] &ncA[0] ;
assign errBitB[1]  =  !ncB[5] &!ncB[4] &ncB[3] &!ncB[2] &ncB[1] &ncB[0] ;
assign errBitC[1]  =  !ncC[5] &!ncC[4] &ncC[3] &!ncC[2] &ncC[1] &ncC[0] ;
assign errBitA[2]  =  !ncA[5] &!ncA[4] &ncA[3] &ncA[2] &!ncA[1] &ncA[0] ;
assign errBitB[2]  =  !ncB[5] &!ncB[4] &ncB[3] &ncB[2] &!ncB[1] &ncB[0] ;
assign errBitC[2]  =  !ncC[5] &!ncC[4] &ncC[3] &ncC[2] &!ncC[1] &ncC[0] ;
assign errBitA[3]  =  !ncA[5] &!ncA[4] &ncA[3] &ncA[2] &ncA[1] &!ncA[0] ;
assign errBitB[3]  =  !ncB[5] &!ncB[4] &ncB[3] &ncB[2] &ncB[1] &!ncB[0] ;
assign errBitC[3]  =  !ncC[5] &!ncC[4] &ncC[3] &ncC[2] &ncC[1] &!ncC[0] ;
assign errBitA[4]  =  !ncA[5] &ncA[4] &!ncA[3] &!ncA[2] &ncA[1] &ncA[0] ;
assign errBitB[4]  =  !ncB[5] &ncB[4] &!ncB[3] &!ncB[2] &ncB[1] &ncB[0] ;
assign errBitC[4]  =  !ncC[5] &ncC[4] &!ncC[3] &!ncC[2] &ncC[1] &ncC[0] ;
assign errBitA[5]  =  !ncA[5] &ncA[4] &!ncA[3] &ncA[2] &!ncA[1] &ncA[0] ;
assign errBitB[5]  =  !ncB[5] &ncB[4] &!ncB[3] &ncB[2] &!ncB[1] &ncB[0] ;
assign errBitC[5]  =  !ncC[5] &ncC[4] &!ncC[3] &ncC[2] &!ncC[1] &ncC[0] ;
assign errBitA[6]  =  ncA[5] &!ncA[4] &ncA[3] &!ncA[2] &ncA[1] &!ncA[0] ;
assign errBitB[6]  =  ncB[5] &!ncB[4] &ncB[3] &!ncB[2] &ncB[1] &!ncB[0] ;
assign errBitC[6]  =  ncC[5] &!ncC[4] &ncC[3] &!ncC[2] &ncC[1] &!ncC[0] ;
assign errBitA[7]  =  ncA[5] &!ncA[4] &ncA[3] &ncA[2] &!ncA[1] &!ncA[0] ;
assign errBitB[7]  =  ncB[5] &!ncB[4] &ncB[3] &ncB[2] &!ncB[1] &!ncB[0] ;
assign errBitC[7]  =  ncC[5] &!ncC[4] &ncC[3] &ncC[2] &!ncC[1] &!ncC[0] ;
assign errBitA[8]  =  ncA[5] &ncA[4] &!ncA[3] &!ncA[2] &!ncA[1] &ncA[0] ;
assign errBitB[8]  =  ncB[5] &ncB[4] &!ncB[3] &!ncB[2] &!ncB[1] &ncB[0] ;
assign errBitC[8]  =  ncC[5] &ncC[4] &!ncC[3] &!ncC[2] &!ncC[1] &ncC[0] ;
assign errBitA[9]  =  ncA[5] &ncA[4] &!ncA[3] &!ncA[2] &ncA[1] &!ncA[0] ;
assign errBitB[9]  =  ncB[5] &ncB[4] &!ncB[3] &!ncB[2] &ncB[1] &!ncB[0] ;
assign errBitC[9]  =  ncC[5] &ncC[4] &!ncC[3] &!ncC[2] &ncC[1] &!ncC[0] ;
assign errBitA[10]  =  ncA[5] &ncA[4] &!ncA[3] &ncA[2] &!ncA[1] &!ncA[0] ;
assign errBitB[10]  =  ncB[5] &ncB[4] &!ncB[3] &ncB[2] &!ncB[1] &!ncB[0] ;
assign errBitC[10]  =  ncC[5] &ncC[4] &!ncC[3] &ncC[2] &!ncC[1] &!ncC[0] ;
assign errBitA[11]  =  ncA[5] &ncA[4] &ncA[3] &!ncA[2] &!ncA[1] &!ncA[0] ;
assign errBitB[11]  =  ncB[5] &ncB[4] &ncB[3] &!ncB[2] &!ncB[1] &!ncB[0] ;
assign errBitC[11]  =  ncC[5] &ncC[4] &ncC[3] &!ncC[2] &!ncC[1] &!ncC[0] ;
assign DDOA[0]  =  XIA[3] &!errBitA[0] |!XIA[3] &errBitA[0] ;
assign DDOB[0]  =  XIB[3] &!errBitB[0] |!XIB[3] &errBitB[0] ;
assign DDOC[0]  =  XIC[3] &!errBitC[0] |!XIC[3] &errBitC[0] ;
assign DDOA[1]  =  XIA[5] &!errBitA[1] |!XIA[5] &errBitA[1] ;
assign DDOB[1]  =  XIB[5] &!errBitB[1] |!XIB[5] &errBitB[1] ;
assign DDOC[1]  =  XIC[5] &!errBitC[1] |!XIC[5] &errBitC[1] ;
assign DDOA[2]  =  XIA[6] &!errBitA[2] |!XIA[6] &errBitA[2] ;
assign DDOB[2]  =  XIB[6] &!errBitB[2] |!XIB[6] &errBitB[2] ;
assign DDOC[2]  =  XIC[6] &!errBitC[2] |!XIC[6] &errBitC[2] ;
assign DDOA[3]  =  XIA[7] &!errBitA[3] |!XIA[7] &errBitA[3] ;
assign DDOB[3]  =  XIB[7] &!errBitB[3] |!XIB[7] &errBitB[3] ;
assign DDOC[3]  =  XIC[7] &!errBitC[3] |!XIC[7] &errBitC[3] ;
assign DDOA[4]  =  XIA[9] &!errBitA[4] |!XIA[9] &errBitA[4] ;
assign DDOB[4]  =  XIB[9] &!errBitB[4] |!XIB[9] &errBitB[4] ;
assign DDOC[4]  =  XIC[9] &!errBitC[4] |!XIC[9] &errBitC[4] ;
assign DDOA[5]  =  XIA[10] &!errBitA[5] |!XIA[10] &errBitA[5] ;
assign DDOB[5]  =  XIB[10] &!errBitB[5] |!XIB[10] &errBitB[5] ;
assign DDOC[5]  =  XIC[10] &!errBitC[5] |!XIC[10] &errBitC[5] ;
assign DDOA[6]  =  XIA[12] &!errBitA[6] |!XIA[12] &errBitA[6] ;
assign DDOB[6]  =  XIB[12] &!errBitB[6] |!XIB[12] &errBitB[6] ;
assign DDOC[6]  =  XIC[12] &!errBitC[6] |!XIC[12] &errBitC[6] ;
assign DDOA[7]  =  XIA[13] &!errBitA[7] |!XIA[13] &errBitA[7] ;
assign DDOB[7]  =  XIB[13] &!errBitB[7] |!XIB[13] &errBitB[7] ;
assign DDOC[7]  =  XIC[13] &!errBitC[7] |!XIC[13] &errBitC[7] ;
assign DDOA[8]  =  XIA[14] &!errBitA[8] |!XIA[14] &errBitA[8] ;
assign DDOB[8]  =  XIB[14] &!errBitB[8] |!XIB[14] &errBitB[8] ;
assign DDOC[8]  =  XIC[14] &!errBitC[8] |!XIC[14] &errBitC[8] ;
assign DDOA[9]  =  XIA[15] &!errBitA[9] |!XIA[15] &errBitA[9] ;
assign DDOB[9]  =  XIB[15] &!errBitB[9] |!XIB[15] &errBitB[9] ;
assign DDOC[9]  =  XIC[15] &!errBitC[9] |!XIC[15] &errBitC[9] ;
assign DDOA[10]  =  XIA[16] &!errBitA[10] |!XIA[16] &errBitA[10] ;
assign DDOB[10]  =  XIB[16] &!errBitB[10] |!XIB[16] &errBitB[10] ;
assign DDOC[10]  =  XIC[16] &!errBitC[10] |!XIC[16] &errBitC[10] ;
assign DDOA[11]  =  XIA[17] &!errBitA[11] |!XIA[17] &errBitA[11] ;
assign DDOB[11]  =  XIB[17] &!errBitB[11] |!XIB[17] &errBitB[11] ;
assign DDOC[11]  =  XIC[17] &!errBitC[11] |!XIC[17] &errBitC[11] ;
endmodule

