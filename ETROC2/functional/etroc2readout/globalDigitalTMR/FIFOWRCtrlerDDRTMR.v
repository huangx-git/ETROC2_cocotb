/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/FIFOWRCtrlerDDRTMR.v                                                *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:01                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: FIFOWRCtrlerDDR.v                                                                      *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:01.781905                                         *
 *           File Size         : 3041                                                               *
 *           MD5 hash          : c682c7456846684b5b668cd22d8059ed                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

module FIFOWRCtrlerDDRTMR #(
  parameter WIDTH=7
)(
     input  clkA,
     input  clkB,
     input  clkC,
     input  resetA,
     input  resetB,
     input  resetC,
     input  wrenA,
     input  wrenB,
     input  wrenC,
     input  rdenA,
     input  rdenB,
     input  rdenC,
     input  enWordCountA,
     input  enWordCountB,
     input  enWordCountC,
     output  emptyA,
     output  emptyB,
     output  emptyC,
     output  fullA,
     output  fullB,
     output  fullC,
     output reg [WIDTH-1:0] wrAddrA,
     output reg [WIDTH-1:0] wrAddrB,
     output reg [WIDTH-1:0] wrAddrC,
     output reg [WIDTH-1:0] rdAddrA,
     output reg [WIDTH-1:0] rdAddrB,
     output reg [WIDTH-1:0] rdAddrC,
     output [WIDTH-1:0] wordCountA,
     output [WIDTH-1:0] wordCountB,
     output [WIDTH-1:0] wordCountC
);
wor rdEmptyTmrErrorC;
wire rdEmptyVotedC;
wor wrAddrNextTmrErrorC;
wire [WIDTH-1:0] wrAddrNextVotedC;
wor wrFullTmrErrorC;
wire wrFullVotedC;
wor wrFullNextTmrErrorC;
wire wrFullNextVotedC;
wor rdEmptyNextTmrErrorC;
wire rdEmptyNextVotedC;
wor wrenTmrErrorC;
wire wrenVotedC;
wor rdAddrNextTmrErrorC;
wire [WIDTH-1:0] rdAddrNextVotedC;
wor rdenTmrErrorC;
wire rdenVotedC;
wor rdenTmrErrorB;
wire rdenVotedB;
wor wrAddrNextTmrErrorB;
wire [WIDTH-1:0] wrAddrNextVotedB;
wor rdEmptyTmrErrorB;
wire rdEmptyVotedB;
wor wrFullTmrErrorB;
wire wrFullVotedB;
wor wrFullNextTmrErrorB;
wire wrFullNextVotedB;
wor rdEmptyNextTmrErrorB;
wire rdEmptyNextVotedB;
wor wrenTmrErrorB;
wire wrenVotedB;
wor rdAddrNextTmrErrorB;
wire [WIDTH-1:0] rdAddrNextVotedB;
wor rdEmptyTmrErrorA;
wire rdEmptyVotedA;
wor wrAddrNextTmrErrorA;
wire [WIDTH-1:0] wrAddrNextVotedA;
wor wrFullTmrErrorA;
wire wrFullVotedA;
wor rdenTmrErrorA;
wire rdenVotedA;
wor wrFullNextTmrErrorA;
wire wrFullNextVotedA;
wor wrenTmrErrorA;
wire wrenVotedA;
wor rdEmptyNextTmrErrorA;
wire rdEmptyNextVotedA;
wor rdAddrNextTmrErrorA;
wire [WIDTH-1:0] rdAddrNextVotedA;
wire [WIDTH-1:0] wrAddrNextA;
wire [WIDTH-1:0] wrAddrNextB;
wire [WIDTH-1:0] wrAddrNextC;
wire [WIDTH-1:0] rdAddrNextA;
wire [WIDTH-1:0] rdAddrNextB;
wire [WIDTH-1:0] rdAddrNextC;
assign rdAddrNextA =  !emptyA ? (rdAddrA+1) : rdAddrA;
assign rdAddrNextB =  !emptyB ? (rdAddrB+1) : rdAddrB;
assign rdAddrNextC =  !emptyC ? (rdAddrC+1) : rdAddrC;
assign wrAddrNextA =  !fullA ? (wrAddrA+1) : wrAddrA;
assign wrAddrNextB =  !fullB ? (wrAddrB+1) : wrAddrB;
assign wrAddrNextC =  !fullC ? (wrAddrC+1) : wrAddrC;
reg  rdEmptyA;
reg  rdEmptyB;
reg  rdEmptyC;
reg  rdFullA;
reg  rdFullB;
reg  rdFullC;
reg  wrEmptyA;
reg  wrEmptyB;
reg  wrEmptyC;
reg  wrFullA;
reg  wrFullB;
reg  wrFullC;
wire rdEmptyNextA =  (rdAddrNextA==wrAddrA) ? ~ wrEmptyA  : wrEmptyA;
wire rdEmptyNextB =  (rdAddrNextB==wrAddrB) ? ~ wrEmptyB  : wrEmptyB;
wire rdEmptyNextC =  (rdAddrNextC==wrAddrC) ? ~ wrEmptyC  : wrEmptyC;
wire wrFullNextA =  (wrAddrNextA==rdAddrA) ? ~ rdFullA  : rdFullA;
wire wrFullNextB =  (wrAddrNextB==rdAddrB) ? ~ rdFullB  : rdFullB;
wire wrFullNextC =  (wrAddrNextC==rdAddrC) ? ~ rdFullC  : rdFullC;
assign emptyA =  wrEmptyA^rdEmptyA;
assign emptyB =  wrEmptyB^rdEmptyB;
assign emptyC =  wrEmptyC^rdEmptyC;
assign fullA =  wrFullA^rdFullA;
assign fullB =  wrFullB^rdFullB;
assign fullC =  wrFullC^rdFullC;

always @( posedge clkA )
     begin
          if (!resetA)
               begin
                    rdAddrA <= {WIDTH{1'b0}};
                    rdEmptyA <= 1'b1;
                    rdFullA <= 1'b0;
               end
          else
               begin
                    if (rdenVotedA==1'b1)
                         begin
                              rdFullA <= wrFullVotedA;
                              rdAddrA <= rdAddrNextVotedA;
                              rdEmptyA <= rdEmptyNextVotedA;
                         end
               end
     end

always @( posedge clkB )
     begin
          if (!resetB)
               begin
                    rdAddrB <= {WIDTH{1'b0}};
                    rdEmptyB <= 1'b1;
                    rdFullB <= 1'b0;
               end
          else
               begin
                    if (rdenVotedB==1'b1)
                         begin
                              rdFullB <= wrFullVotedB;
                              rdAddrB <= rdAddrNextVotedB;
                              rdEmptyB <= rdEmptyNextVotedB;
                         end
               end
     end

always @( posedge clkC )
     begin
          if (!resetC)
               begin
                    rdAddrC <= {WIDTH{1'b0}};
                    rdEmptyC <= 1'b1;
                    rdFullC <= 1'b0;
               end
          else
               begin
                    if (rdenVotedC==1'b1)
                         begin
                              rdFullC <= wrFullVotedC;
                              rdAddrC <= rdAddrNextVotedC;
                              rdEmptyC <= rdEmptyNextVotedC;
                         end
               end
     end

always @( negedge clkA )
     begin
          if (!resetA)
               begin
                    wrAddrA <= {WIDTH{1'b0}};
                    wrEmptyA <= 1'b0;
                    wrFullA <= 1'b0;
               end
          else
               begin
                    if (wrenVotedA==1'b1)
                         begin
                              wrAddrA <= wrAddrNextVotedA;
                              wrEmptyA <= rdEmptyVotedA;
                              wrFullA <= wrFullNextVotedA;
                         end
               end
     end

always @( negedge clkB )
     begin
          if (!resetB)
               begin
                    wrAddrB <= {WIDTH{1'b0}};
                    wrEmptyB <= 1'b0;
                    wrFullB <= 1'b0;
               end
          else
               begin
                    if (wrenVotedB==1'b1)
                         begin
                              wrAddrB <= wrAddrNextVotedB;
                              wrEmptyB <= rdEmptyVotedB;
                              wrFullB <= wrFullNextVotedB;
                         end
               end
     end

always @( negedge clkC )
     begin
          if (!resetC)
               begin
                    wrAddrC <= {WIDTH{1'b0}};
                    wrEmptyC <= 1'b0;
                    wrFullC <= 1'b0;
               end
          else
               begin
                    if (wrenVotedC==1'b1)
                         begin
                              wrAddrC <= wrAddrNextVotedC;
                              wrEmptyC <= rdEmptyVotedC;
                              wrFullC <= wrFullNextVotedC;
                         end
               end
     end
assign wordCountA =  ~enWordCountA ? { WIDTH {1'b0} }  : ((wrAddrA>=rdAddrA) ? (wrAddrA-rdAddrA) : ({1'b1,wrAddrA}-{1'b0,rdAddrA}));
assign wordCountB =  ~enWordCountB ? { WIDTH {1'b0} }  : ((wrAddrB>=rdAddrB) ? (wrAddrB-rdAddrB) : ({1'b1,wrAddrB}-{1'b0,rdAddrB}));
assign wordCountC =  ~enWordCountC ? { WIDTH {1'b0} }  : ((wrAddrC>=rdAddrC) ? (wrAddrC-rdAddrC) : ({1'b1,wrAddrC}-{1'b0,rdAddrC}));

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) rdAddrNextVoterA (
          .inA(rdAddrNextA),
          .inB(rdAddrNextB),
          .inC(rdAddrNextC),
          .out(rdAddrNextVotedA),
          .tmrErr(rdAddrNextTmrErrorA)
          );

majorityVoter rdEmptyNextVoterA (
          .inA(rdEmptyNextA),
          .inB(rdEmptyNextB),
          .inC(rdEmptyNextC),
          .out(rdEmptyNextVotedA),
          .tmrErr(rdEmptyNextTmrErrorA)
          );

majorityVoter wrenVoterA (
          .inA(wrenA),
          .inB(wrenB),
          .inC(wrenC),
          .out(wrenVotedA),
          .tmrErr(wrenTmrErrorA)
          );

majorityVoter wrFullNextVoterA (
          .inA(wrFullNextA),
          .inB(wrFullNextB),
          .inC(wrFullNextC),
          .out(wrFullNextVotedA),
          .tmrErr(wrFullNextTmrErrorA)
          );

majorityVoter rdenVoterA (
          .inA(rdenA),
          .inB(rdenB),
          .inC(rdenC),
          .out(rdenVotedA),
          .tmrErr(rdenTmrErrorA)
          );

majorityVoter wrFullVoterA (
          .inA(wrFullA),
          .inB(wrFullB),
          .inC(wrFullC),
          .out(wrFullVotedA),
          .tmrErr(wrFullTmrErrorA)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) wrAddrNextVoterA (
          .inA(wrAddrNextA),
          .inB(wrAddrNextB),
          .inC(wrAddrNextC),
          .out(wrAddrNextVotedA),
          .tmrErr(wrAddrNextTmrErrorA)
          );

majorityVoter rdEmptyVoterA (
          .inA(rdEmptyA),
          .inB(rdEmptyB),
          .inC(rdEmptyC),
          .out(rdEmptyVotedA),
          .tmrErr(rdEmptyTmrErrorA)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) rdAddrNextVoterB (
          .inA(rdAddrNextA),
          .inB(rdAddrNextB),
          .inC(rdAddrNextC),
          .out(rdAddrNextVotedB),
          .tmrErr(rdAddrNextTmrErrorB)
          );

majorityVoter wrenVoterB (
          .inA(wrenA),
          .inB(wrenB),
          .inC(wrenC),
          .out(wrenVotedB),
          .tmrErr(wrenTmrErrorB)
          );

majorityVoter rdEmptyNextVoterB (
          .inA(rdEmptyNextA),
          .inB(rdEmptyNextB),
          .inC(rdEmptyNextC),
          .out(rdEmptyNextVotedB),
          .tmrErr(rdEmptyNextTmrErrorB)
          );

majorityVoter wrFullNextVoterB (
          .inA(wrFullNextA),
          .inB(wrFullNextB),
          .inC(wrFullNextC),
          .out(wrFullNextVotedB),
          .tmrErr(wrFullNextTmrErrorB)
          );

majorityVoter wrFullVoterB (
          .inA(wrFullA),
          .inB(wrFullB),
          .inC(wrFullC),
          .out(wrFullVotedB),
          .tmrErr(wrFullTmrErrorB)
          );

majorityVoter rdEmptyVoterB (
          .inA(rdEmptyA),
          .inB(rdEmptyB),
          .inC(rdEmptyC),
          .out(rdEmptyVotedB),
          .tmrErr(rdEmptyTmrErrorB)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) wrAddrNextVoterB (
          .inA(wrAddrNextA),
          .inB(wrAddrNextB),
          .inC(wrAddrNextC),
          .out(wrAddrNextVotedB),
          .tmrErr(wrAddrNextTmrErrorB)
          );

majorityVoter rdenVoterB (
          .inA(rdenA),
          .inB(rdenB),
          .inC(rdenC),
          .out(rdenVotedB),
          .tmrErr(rdenTmrErrorB)
          );

majorityVoter rdenVoterC (
          .inA(rdenA),
          .inB(rdenB),
          .inC(rdenC),
          .out(rdenVotedC),
          .tmrErr(rdenTmrErrorC)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) rdAddrNextVoterC (
          .inA(rdAddrNextA),
          .inB(rdAddrNextB),
          .inC(rdAddrNextC),
          .out(rdAddrNextVotedC),
          .tmrErr(rdAddrNextTmrErrorC)
          );

majorityVoter wrenVoterC (
          .inA(wrenA),
          .inB(wrenB),
          .inC(wrenC),
          .out(wrenVotedC),
          .tmrErr(wrenTmrErrorC)
          );

majorityVoter rdEmptyNextVoterC (
          .inA(rdEmptyNextA),
          .inB(rdEmptyNextB),
          .inC(rdEmptyNextC),
          .out(rdEmptyNextVotedC),
          .tmrErr(rdEmptyNextTmrErrorC)
          );

majorityVoter wrFullNextVoterC (
          .inA(wrFullNextA),
          .inB(wrFullNextB),
          .inC(wrFullNextC),
          .out(wrFullNextVotedC),
          .tmrErr(wrFullNextTmrErrorC)
          );

majorityVoter wrFullVoterC (
          .inA(wrFullA),
          .inB(wrFullB),
          .inC(wrFullC),
          .out(wrFullVotedC),
          .tmrErr(wrFullTmrErrorC)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) wrAddrNextVoterC (
          .inA(wrAddrNextA),
          .inB(wrAddrNextB),
          .inC(wrAddrNextC),
          .out(wrAddrNextVotedC),
          .tmrErr(wrAddrNextTmrErrorC)
          );

majorityVoter rdEmptyVoterC (
          .inA(rdEmptyA),
          .inB(rdEmptyB),
          .inC(rdEmptyC),
          .out(rdEmptyVotedC),
          .tmrErr(rdEmptyTmrErrorC)
          );
endmodule

