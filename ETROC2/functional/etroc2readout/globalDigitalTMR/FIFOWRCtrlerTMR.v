/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/FIFOWRCtrlerTMR.v                                                   *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:01                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: FIFOWRCtrler.v                                                                         *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:01.780893                                         *
 *           File Size         : 3118                                                               *
 *           MD5 hash          : 941f82131e9f69d9c787430684201f60                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

module FIFOWRCtrlerTMR #(
  parameter WIDTH=4,
  parameter clockEdge=1
)(
     input  clkA,
     input  clkB,
     input  clkC,
     input  resetA,
     input  resetB,
     input  resetC,
     input  wrenA,
     input  wrenB,
     input  wrenC,
     input  rdenA,
     input  rdenB,
     input  rdenC,
     input  enWordCountA,
     input  enWordCountB,
     input  enWordCountC,
     output reg  emptyA,
     output reg  emptyB,
     output reg  emptyC,
     output reg  fullA,
     output reg  fullB,
     output reg  fullC,
     output reg [WIDTH-1:0] wrAddrA,
     output reg [WIDTH-1:0] wrAddrB,
     output reg [WIDTH-1:0] wrAddrC,
     output reg [WIDTH-1:0] rdAddrA,
     output reg [WIDTH-1:0] rdAddrB,
     output reg [WIDTH-1:0] rdAddrC,
     output [WIDTH-1:0] wordCountA,
     output [WIDTH-1:0] wordCountB,
     output [WIDTH-1:0] wordCountC
);
wor wrenTmrErrorC;
wire wrenVotedC;
wor wrAddrNextTmrErrorC;
wire [WIDTH-1:0] wrAddrNextVotedC;
wor rdAddrNextTmrErrorC;
wire [WIDTH-1:0] rdAddrNextVotedC;
wor rdenTmrErrorC;
wire rdenVotedC;
wor rdenTmrErrorB;
wire rdenVotedB;
wor wrAddrNextTmrErrorB;
wire [WIDTH-1:0] wrAddrNextVotedB;
wor wrenTmrErrorB;
wire wrenVotedB;
wor rdAddrNextTmrErrorB;
wire [WIDTH-1:0] rdAddrNextVotedB;
wor wrenTmrErrorA;
wire wrenVotedA;
wor wrAddrNextTmrErrorA;
wire [WIDTH-1:0] wrAddrNextVotedA;
wor rdenTmrErrorA;
wire rdenVotedA;
wor rdAddrNextTmrErrorA;
wire [WIDTH-1:0] rdAddrNextVotedA;
wire [WIDTH-1:0] wrAddrNextA;
wire [WIDTH-1:0] wrAddrNextB;
wire [WIDTH-1:0] wrAddrNextC;
wire [WIDTH-1:0] rdAddrNextA;
wire [WIDTH-1:0] rdAddrNextB;
wire [WIDTH-1:0] rdAddrNextC;
assign rdAddrNextA =  !emptyA ? (rdAddrA+1) : rdAddrA;
assign rdAddrNextB =  !emptyB ? (rdAddrB+1) : rdAddrB;
assign rdAddrNextC =  !emptyC ? (rdAddrC+1) : rdAddrC;
assign wrAddrNextA =  !fullA ? (wrAddrA+1) : wrAddrA;
assign wrAddrNextB =  !fullB ? (wrAddrB+1) : wrAddrB;
assign wrAddrNextC =  !fullC ? (wrAddrC+1) : wrAddrC;
wire fullNextVotedA =  (wrAddrNextVotedA==rdAddrA);
wire fullNextVotedB =  (wrAddrNextVotedB==rdAddrB);
wire fullNextVotedC =  (wrAddrNextVotedC==rdAddrC);
wire emptyNextVotedA =  (rdAddrNextVotedA==wrAddrA);
wire emptyNextVotedB =  (rdAddrNextVotedB==wrAddrB);
wire emptyNextVotedC =  (rdAddrNextVotedC==wrAddrC);

generate
     if (clockEdge==1)          begin 

               always @( posedge clkA )
                    begin
                         if (!resetA)
                              begin
                                   rdAddrA <= {WIDTH{1'b0}};
                                   wrAddrA <= {WIDTH{1'b0}};
                                   emptyA <= 1'b1;
                                   fullA <= 1'b0;
                              end
                         else
                              begin
                                   if (rdenVotedA==1'b1)
                                        begin
                                             rdAddrA <= rdAddrNextVotedA;
                                             emptyA <= emptyNextVotedA;
                                             fullA <= 1'b0;
                                        end
                                   if (wrenVotedA==1'b1)
                                        begin
                                             wrAddrA <= wrAddrNextVotedA;
                                             fullA <= fullNextVotedA;
                                             emptyA <= 1'b0;
                                        end
                              end
                    end

               always @( posedge clkB )
                    begin
                         if (!resetB)
                              begin
                                   rdAddrB <= {WIDTH{1'b0}};
                                   wrAddrB <= {WIDTH{1'b0}};
                                   emptyB <= 1'b1;
                                   fullB <= 1'b0;
                              end
                         else
                              begin
                                   if (rdenVotedB==1'b1)
                                        begin
                                             rdAddrB <= rdAddrNextVotedB;
                                             emptyB <= emptyNextVotedB;
                                             fullB <= 1'b0;
                                        end
                                   if (wrenVotedB==1'b1)
                                        begin
                                             wrAddrB <= wrAddrNextVotedB;
                                             fullB <= fullNextVotedB;
                                             emptyB <= 1'b0;
                                        end
                              end
                    end

               always @( posedge clkC )
                    begin
                         if (!resetC)
                              begin
                                   rdAddrC <= {WIDTH{1'b0}};
                                   wrAddrC <= {WIDTH{1'b0}};
                                   emptyC <= 1'b1;
                                   fullC <= 1'b0;
                              end
                         else
                              begin
                                   if (rdenVotedC==1'b1)
                                        begin
                                             rdAddrC <= rdAddrNextVotedC;
                                             emptyC <= emptyNextVotedC;
                                             fullC <= 1'b0;
                                        end
                                   if (wrenVotedC==1'b1)
                                        begin
                                             wrAddrC <= wrAddrNextVotedC;
                                             fullC <= fullNextVotedC;
                                             emptyC <= 1'b0;
                                        end
                              end
                    end
          end
     else          begin 

               always @( negedge clkA )
                    begin
                         if (!resetA)
                              begin
                                   rdAddrA <= {WIDTH{1'b0}};
                                   wrAddrA <= {WIDTH{1'b0}};
                                   emptyA <= 1'b1;
                                   fullA <= 1'b0;
                              end
                         else
                              begin
                                   if (rdenVotedA==1'b1)
                                        begin
                                             rdAddrA <= rdAddrNextVotedA;
                                             emptyA <= emptyNextVotedA;
                                             fullA <= 1'b0;
                                        end
                                   if (wrenVotedA==1'b1)
                                        begin
                                             wrAddrA <= wrAddrNextVotedA;
                                             fullA <= fullNextVotedA;
                                             emptyA <= 1'b0;
                                        end
                              end
                    end

               always @( negedge clkB )
                    begin
                         if (!resetB)
                              begin
                                   rdAddrB <= {WIDTH{1'b0}};
                                   wrAddrB <= {WIDTH{1'b0}};
                                   emptyB <= 1'b1;
                                   fullB <= 1'b0;
                              end
                         else
                              begin
                                   if (rdenVotedB==1'b1)
                                        begin
                                             rdAddrB <= rdAddrNextVotedB;
                                             emptyB <= emptyNextVotedB;
                                             fullB <= 1'b0;
                                        end
                                   if (wrenVotedB==1'b1)
                                        begin
                                             wrAddrB <= wrAddrNextVotedB;
                                             fullB <= fullNextVotedB;
                                             emptyB <= 1'b0;
                                        end
                              end
                    end

               always @( negedge clkC )
                    begin
                         if (!resetC)
                              begin
                                   rdAddrC <= {WIDTH{1'b0}};
                                   wrAddrC <= {WIDTH{1'b0}};
                                   emptyC <= 1'b1;
                                   fullC <= 1'b0;
                              end
                         else
                              begin
                                   if (rdenVotedC==1'b1)
                                        begin
                                             rdAddrC <= rdAddrNextVotedC;
                                             emptyC <= emptyNextVotedC;
                                             fullC <= 1'b0;
                                        end
                                   if (wrenVotedC==1'b1)
                                        begin
                                             wrAddrC <= wrAddrNextVotedC;
                                             fullC <= fullNextVotedC;
                                             emptyC <= 1'b0;
                                        end
                              end
                    end
          end

endgenerate
assign wordCountA =  !enWordCountA ? { WIDTH {1'b0} }  : ((wrAddrA>=rdAddrA) ? (wrAddrA-rdAddrA) : ({1'b1,wrAddrA}-{1'b0,rdAddrA}));
assign wordCountB =  !enWordCountB ? { WIDTH {1'b0} }  : ((wrAddrB>=rdAddrB) ? (wrAddrB-rdAddrB) : ({1'b1,wrAddrB}-{1'b0,rdAddrB}));
assign wordCountC =  !enWordCountC ? { WIDTH {1'b0} }  : ((wrAddrC>=rdAddrC) ? (wrAddrC-rdAddrC) : ({1'b1,wrAddrC}-{1'b0,rdAddrC}));

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) rdAddrNextVoterA (
          .inA(rdAddrNextA),
          .inB(rdAddrNextB),
          .inC(rdAddrNextC),
          .out(rdAddrNextVotedA),
          .tmrErr(rdAddrNextTmrErrorA)
          );

majorityVoter rdenVoterA (
          .inA(rdenA),
          .inB(rdenB),
          .inC(rdenC),
          .out(rdenVotedA),
          .tmrErr(rdenTmrErrorA)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) wrAddrNextVoterA (
          .inA(wrAddrNextA),
          .inB(wrAddrNextB),
          .inC(wrAddrNextC),
          .out(wrAddrNextVotedA),
          .tmrErr(wrAddrNextTmrErrorA)
          );

majorityVoter wrenVoterA (
          .inA(wrenA),
          .inB(wrenB),
          .inC(wrenC),
          .out(wrenVotedA),
          .tmrErr(wrenTmrErrorA)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) rdAddrNextVoterB (
          .inA(rdAddrNextA),
          .inB(rdAddrNextB),
          .inC(rdAddrNextC),
          .out(rdAddrNextVotedB),
          .tmrErr(rdAddrNextTmrErrorB)
          );

majorityVoter wrenVoterB (
          .inA(wrenA),
          .inB(wrenB),
          .inC(wrenC),
          .out(wrenVotedB),
          .tmrErr(wrenTmrErrorB)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) wrAddrNextVoterB (
          .inA(wrAddrNextA),
          .inB(wrAddrNextB),
          .inC(wrAddrNextC),
          .out(wrAddrNextVotedB),
          .tmrErr(wrAddrNextTmrErrorB)
          );

majorityVoter rdenVoterB (
          .inA(rdenA),
          .inB(rdenB),
          .inC(rdenC),
          .out(rdenVotedB),
          .tmrErr(rdenTmrErrorB)
          );

majorityVoter rdenVoterC (
          .inA(rdenA),
          .inB(rdenB),
          .inC(rdenC),
          .out(rdenVotedC),
          .tmrErr(rdenTmrErrorC)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) rdAddrNextVoterC (
          .inA(rdAddrNextA),
          .inB(rdAddrNextB),
          .inC(rdAddrNextC),
          .out(rdAddrNextVotedC),
          .tmrErr(rdAddrNextTmrErrorC)
          );

majorityVoter #(.WIDTH(((WIDTH-1)>(0)) ? ((WIDTH-1)-(0)+1) : ((0)-(WIDTH-1)+1))) wrAddrNextVoterC (
          .inA(wrAddrNextA),
          .inB(wrAddrNextB),
          .inC(wrAddrNextC),
          .out(wrAddrNextVotedC),
          .tmrErr(wrAddrNextTmrErrorC)
          );

majorityVoter wrenVoterC (
          .inA(wrenA),
          .inB(wrenB),
          .inC(wrenC),
          .out(wrenVotedC),
          .tmrErr(wrenTmrErrorC)
          );
endmodule

