/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./L1BufferAddrTMR.v                                                                    *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 13/08/2022 23:37:08                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout/tmp    *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg ../L1BufferAddr.v   *
 *           ../FIFOWRCtrlerDDR.v                                                                   *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: ../L1BufferAddr.v                                                                      *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-08-13 23:36:49.743992                                         *
 *           File Size         : 2193                                                               *
 *           MD5 hash          : 48fb11a29582fe4b7ed37a051e243251                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

module L1BufferAddrTMR #(
  parameter ADDRWIDTH=7
)(
  input  clkA,
  input  clkB,
  input  clkC,
  input  resetA,
  input  resetB,
  input  resetC,
  input  wrEnA,
  input  wrEnB,
  input  wrEnC,
  input  rdEnA,
  input  rdEnB,
  input  rdEnC,
  output [ADDRWIDTH-1:0] wordCountA,
  output [ADDRWIDTH-1:0] wordCountB,
  output [ADDRWIDTH-1:0] wordCountC,
  output reg [ADDRWIDTH-1:0] wrAddrA,
  output reg [ADDRWIDTH-1:0] wrAddrB,
  output reg [ADDRWIDTH-1:0] wrAddrC,
  output reg [ADDRWIDTH-1:0] rdAddrA,
  output reg [ADDRWIDTH-1:0] rdAddrB,
  output reg [ADDRWIDTH-1:0] rdAddrC,
  output  firstEventA,
  output  firstEventB,
  output  firstEventC,
  output  emptyA,
  output  emptyB,
  output  emptyC,
  output  fullA,
  output  fullB,
  output  fullC
);
reg  wrenFIFOA;
reg  wrenFIFOB;
reg  wrenFIFOC;
reg  wrEnDelayA;
reg  wrEnDelayB;
reg  wrEnDelayC;
wire fifoEmptyA;
wire fifoEmptyB;
wire fifoEmptyC;
wire fifoFullA;
wire fifoFullB;
wire fifoFullC;
reg  fifoEmpty1DA;
reg  fifoEmpty1DB;
reg  fifoEmpty1DC;
reg  fifoFull1DA;
reg  fifoFull1DB;
reg  fifoFull1DC;
reg  firstEventRegA;
reg  firstEventRegB;
reg  firstEventRegC;

always @( negedge clkA )
  begin
    wrEnDelayA <= wrEnA;
    wrenFIFOA <= wrEnDelayA;
    fifoEmpty1DA <= fifoEmptyA;
    fifoFull1DA <= fifoFullA;
    firstEventRegA <= fifoEmpty1DA&!fifoEmptyA;
  end

always @( negedge clkB )
  begin
    wrEnDelayB <= wrEnB;
    wrenFIFOB <= wrEnDelayB;
    fifoEmpty1DB <= fifoEmptyB;
    fifoFull1DB <= fifoFullB;
    firstEventRegB <= fifoEmpty1DB&!fifoEmptyB;
  end

always @( negedge clkC )
  begin
    wrEnDelayC <= wrEnC;
    wrenFIFOC <= wrEnDelayC;
    fifoEmpty1DC <= fifoEmptyC;
    fifoFull1DC <= fifoFullC;
    firstEventRegC <= fifoEmpty1DC&!fifoEmptyC;
  end
assign fullA =  fifoFull1DA|fifoFullA;
assign fullB =  fifoFull1DB|fifoFullB;
assign fullC =  fifoFull1DC|fifoFullC;
assign emptyA =  fifoEmpty1DA;
assign emptyB =  fifoEmpty1DB;
assign emptyC =  fifoEmpty1DC;
assign firstEventA =  firstEventRegA;
assign firstEventB =  firstEventRegB;
assign firstEventC =  firstEventRegC;
wire [ADDRWIDTH-1:0] wrAddr1A;
wire [ADDRWIDTH-1:0] wrAddr1B;
wire [ADDRWIDTH-1:0] wrAddr1C;
wire [ADDRWIDTH-1:0] rdAddr1A;
wire [ADDRWIDTH-1:0] rdAddr1B;
wire [ADDRWIDTH-1:0] rdAddr1C;

FIFOWRCtrlerDDRTMR #(.WIDTH(ADDRWIDTH)) L1Ctrl (
    .clkA(clkA),
    .clkB(clkB),
    .clkC(clkC),
    .resetA(resetA),
    .resetB(resetB),
    .resetC(resetC),
    .wrenA(wrenFIFOA),
    .wrenB(wrenFIFOB),
    .wrenC(wrenFIFOC),
    .rdenA(rdEnA),
    .rdenB(rdEnB),
    .rdenC(rdEnC),
    .enWordCountA(1'b1),
    .enWordCountB(1'b1),
    .enWordCountC(1'b1),
    .emptyA(fifoEmptyA),
    .emptyB(fifoEmptyB),
    .emptyC(fifoEmptyC),
    .fullA(fifoFullA),
    .fullB(fifoFullB),
    .fullC(fifoFullC),
    .wrAddrA(wrAddr1A),
    .wrAddrB(wrAddr1B),
    .wrAddrC(wrAddr1C),
    .rdAddrA(rdAddr1A),
    .rdAddrB(rdAddr1B),
    .rdAddrC(rdAddr1C),
    .wordCountA(wordCountA),
    .wordCountB(wordCountB),
    .wordCountC(wordCountC)
    );

always @( posedge clkA )
  begin
    wrAddrA <= wrAddr1A;
  end

always @( posedge clkB )
  begin
    wrAddrB <= wrAddr1B;
  end

always @( posedge clkC )
  begin
    wrAddrC <= wrAddr1C;
  end

always @( negedge clkA )
  begin
    rdAddrA <= rdAddr1A;
  end

always @( negedge clkB )
  begin
    rdAddrB <= rdAddr1B;
  end

always @( negedge clkC )
  begin
    rdAddrC <= rdAddr1C;
  end
endmodule

