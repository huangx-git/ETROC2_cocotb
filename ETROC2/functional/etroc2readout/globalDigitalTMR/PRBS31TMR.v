/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/PRBS31TMR.v                                                         *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:02                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: PRBS31.v                                                                               *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:01.794907                                         *
 *           File Size         : 2791                                                               *
 *           MD5 hash          : 8eafb8d74add3d3f8ab105f37c12f70e                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

module forwardPRBS31SeedTMR #(
  parameter WORDWIDTH=15,
  parameter FORWARDSTEPS=1
)(
     input [30:0] seedTMRA,
     input [30:0] seedTMRB,
     input [30:0] seedTMRC,
     output [30:0] newSeedTMRA,
     output [30:0] newSeedTMRB,
     output [30:0] newSeedTMRC
);
wire [30:0] cA [ WORDWIDTH*FORWARDSTEPS : 0 ] ;
wire [30:0] cB [ WORDWIDTH*FORWARDSTEPS : 0 ] ;
wire [30:0] cC [ WORDWIDTH*FORWARDSTEPS : 0 ] ;
assign cA[0]  =  seedTMRA;
assign cB[0]  =  seedTMRB;
assign cC[0]  =  seedTMRC;

generate
genvar i;

     for(i =  0;i<WORDWIDTH*FORWARDSTEPS;i =  i+1)
          begin : loop_itr 
               assign cA[i+1]  =  {cA[i] [3] ^cA[i] [0] ,cA[i] [30:1] };
               assign cB[i+1]  =  {cB[i] [3] ^cB[i] [0] ,cB[i] [30:1] };
               assign cC[i+1]  =  {cC[i] [3] ^cC[i] [0] ,cC[i] [30:1] };
          end

endgenerate
assign newSeedTMRA =  cA[WORDWIDTH*FORWARDSTEPS] ;
assign newSeedTMRB =  cB[WORDWIDTH*FORWARDSTEPS] ;
assign newSeedTMRC =  cC[WORDWIDTH*FORWARDSTEPS] ;
endmodule

module nextPRBS31WordTMR #(
  parameter WORDWIDTH=15
)(
     input [30:0] seedTMRA,
     input [30:0] seedTMRB,
     input [30:0] seedTMRC,
     output [30:0] nextWordTMRA,
     output [30:0] nextWordTMRB,
     output [30:0] nextWordTMRC
);
wire [30:0] cA [ WORDWIDTH : 0 ] ;
wire [30:0] cB [ WORDWIDTH : 0 ] ;
wire [30:0] cC [ WORDWIDTH : 0 ] ;
assign cA[0]  =  seedTMRA;
assign cB[0]  =  seedTMRB;
assign cC[0]  =  seedTMRC;

generate
genvar i;

     for(i =  0;i<WORDWIDTH;i =  i+1)
          begin : loop_itr 
               assign cA[i+1]  =  {cA[i] [3] ^cA[i] [0] ,cA[i] [30:1] };
               assign cB[i+1]  =  {cB[i] [3] ^cB[i] [0] ,cB[i] [30:1] };
               assign cC[i+1]  =  {cC[i] [3] ^cC[i] [0] ,cC[i] [30:1] };
          end

endgenerate
assign nextWordTMRA =  cA[WORDWIDTH] ;
assign nextWordTMRB =  cB[WORDWIDTH] ;
assign nextWordTMRC =  cC[WORDWIDTH] ;
endmodule

module PRBS31TMR #(
  parameter WORDWIDTH=15,
  parameter FORWARDSTEPS=1
)(
     input  clkTMRA,
     input  clkTMRB,
     input  clkTMRC,
     input  resetTMRA,
     input  resetTMRB,
     input  resetTMRC,
     input  disTMRA,
     input  disTMRB,
     input  disTMRC,
     input [30:0] seedTMRA,
     input [30:0] seedTMRB,
     input [30:0] seedTMRC,
     output [WORDWIDTH-1:0] prbsTMRA,
     output [WORDWIDTH-1:0] prbsTMRB,
     output [WORDWIDTH-1:0] prbsTMRC
);
reg  [30:0] rTMRA;
reg  [30:0] rTMRB;
reg  [30:0] rTMRC;
wire [30:0] newSeedTMRA;
wire [30:0] newSeedTMRB;
wire [30:0] newSeedTMRC;

forwardPRBS31SeedTMR #(.WORDWIDTH(WORDWIDTH), .FORWARDSTEPS(FORWARDSTEPS)) forwardPRBS31SeedInst (
          .seedTMRA(seedTMRA),
          .seedTMRB(seedTMRB),
          .seedTMRC(seedTMRC),
          .newSeedTMRA(newSeedTMRA),
          .newSeedTMRB(newSeedTMRB),
          .newSeedTMRC(newSeedTMRC)
          );
wire [30:0] nextWordTMRA;
wire [30:0] nextWordTMRB;
wire [30:0] nextWordTMRC;
wire [30:0] nextWordVotedA =  nextWordTMRA;
wire [30:0] nextWordVotedB =  nextWordTMRB;
wire [30:0] nextWordVotedC =  nextWordTMRC;

always @( posedge clkTMRA )
     begin
          if (!resetTMRA)
               begin
                    rTMRA <= newSeedTMRA;
               end
          else
               if (!disTMRA)
                    begin
                         rTMRA <= nextWordVotedA;
                    end
     end

always @( posedge clkTMRB )
     begin
          if (!resetTMRB)
               begin
                    rTMRB <= newSeedTMRB;
               end
          else
               if (!disTMRB)
                    begin
                         rTMRB <= nextWordVotedB;
                    end
     end

always @( posedge clkTMRC )
     begin
          if (!resetTMRC)
               begin
                    rTMRC <= newSeedTMRC;
               end
          else
               if (!disTMRC)
                    begin
                         rTMRC <= nextWordVotedC;
                    end
     end

nextPRBS31WordTMR #(.WORDWIDTH(WORDWIDTH)) nextWordInst (
          .seedTMRA(rTMRA),
          .seedTMRB(rTMRB),
          .seedTMRC(rTMRC),
          .nextWordTMRA(nextWordTMRA),
          .nextWordTMRB(nextWordTMRB),
          .nextWordTMRC(nextWordTMRC)
          );
assign prbsTMRA =  rTMRA[WORDWIDTH-1:0] ;
assign prbsTMRB =  rTMRB[WORDWIDTH-1:0] ;
assign prbsTMRC =  rTMRC[WORDWIDTH-1:0] ;
endmodule

