/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/PRBS7TMR.v                                                          *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:02                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: PRBS7.v                                                                                *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:01.797899                                         *
 *           File Size         : 1456                                                               *
 *           MD5 hash          : 597dc3c3c1c72705f4caf00aca88689d                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

module PRBS7TMR #(
  parameter WORDWIDTH=16
)(
     input  clkA,
     input  clkB,
     input  clkC,
     input  resetA,
     input  resetB,
     input  resetC,
     input  disA,
     input  disB,
     input  disC,
     input [6:0] seedA,
     input [6:0] seedB,
     input [6:0] seedC,
     output [WORDWIDTH-1:0] prbsA,
     output [WORDWIDTH-1:0] prbsB,
     output [WORDWIDTH-1:0] prbsC
);
wor seedTmrErrorC;
wire [6:0] seedVotedC;
wor seedTmrErrorB;
wire [6:0] seedVotedB;
wor seedTmrErrorA;
wire [6:0] seedVotedA;
wire [6:0] cA [ WORDWIDTH : 0 ] ;
wire [6:0] cB [ WORDWIDTH : 0 ] ;
wire [6:0] cC [ WORDWIDTH : 0 ] ;
wire [6:0] nextRVotedA =  cA[WORDWIDTH] ;
wire [6:0] nextRVotedB =  cB[WORDWIDTH] ;
wire [6:0] nextRVotedC =  cC[WORDWIDTH] ;
reg  [6:0] rA;
reg  [6:0] rB;
reg  [6:0] rC;

always @( posedge clkA )
     begin
          if (!disA)
               begin
                    if (!resetA)
                         begin
                              rA <= seedVotedA;
                         end
                    else
                         begin
                              rA <= nextRVotedA;
                         end
               end
     end

always @( posedge clkB )
     begin
          if (!disB)
               begin
                    if (!resetB)
                         begin
                              rB <= seedVotedB;
                         end
                    else
                         begin
                              rB <= nextRVotedB;
                         end
               end
     end

always @( posedge clkC )
     begin
          if (!disC)
               begin
                    if (!resetC)
                         begin
                              rC <= seedVotedC;
                         end
                    else
                         begin
                              rC <= nextRVotedC;
                         end
               end
     end
assign cA[0]  =  rA;
assign cB[0]  =  rB;
assign cC[0]  =  rC;

generate
genvar i;

     for(i =  0;i<WORDWIDTH;i =  i+1)
          begin : loop_itr 
               assign prbsA[i]  =  cA[i] [1] ^cA[i] [0] ;
               assign prbsB[i]  =  cB[i] [1] ^cB[i] [0] ;
               assign prbsC[i]  =  cC[i] [1] ^cC[i] [0] ;
               assign cA[i+1]  =  {prbsA[i] ,cA[i] [6:1] };
               assign cB[i+1]  =  {prbsB[i] ,cB[i] [6:1] };
               assign cC[i+1]  =  {prbsC[i] ,cC[i] [6:1] };
          end

endgenerate

majorityVoter #(.WIDTH(7)) seedVoterA (
          .inA(seedA),
          .inB(seedB),
          .inC(seedC),
          .out(seedVotedA),
          .tmrErr(seedTmrErrorA)
          );

majorityVoter #(.WIDTH(7)) seedVoterB (
          .inA(seedA),
          .inB(seedB),
          .inC(seedC),
          .out(seedVotedB),
          .tmrErr(seedTmrErrorB)
          );

majorityVoter #(.WIDTH(7)) seedVoterC (
          .inA(seedA),
          .inB(seedB),
          .inC(seedC),
          .out(seedVotedC),
          .tmrErr(seedTmrErrorC)
          );
endmodule

