/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/ScramblerTMR.v                                                      *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:02                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: Scrambler.v                                                                            *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:01.837908                                         *
 *           File Size         : 2626                                                               *
 *           MD5 hash          : 8ffe2a1ff605f5a3164cc737a4db6b25                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps
module ScramblerTMR(
     input  clkA,
     input  clkB,
     input  clkC,
     input  resetA,
     input  resetB,
     input  resetC,
     input [1:0] dataWidthA,
     input [1:0] dataWidthB,
     input [1:0] dataWidthC,
     input [31:0] dinA,
     input [31:0] dinB,
     input [31:0] dinC,
     input  bypassA,
     input  bypassB,
     input  bypassC,
     output [31:0] doutA,
     output [31:0] doutB,
     output [31:0] doutC
);
wor rNextTmrErrorC;
wire [57:0] rNextVotedC;
wor rNextTmrErrorB;
wire [57:0] rNextVotedB;
wor rNextTmrErrorA;
wire [57:0] rNextVotedA;
reg  [57:0] rA;
reg  [57:0] rB;
reg  [57:0] rC;
wire [57:0] cA [ 32 : 0 ] ;
wire [57:0] cB [ 32 : 0 ] ;
wire [57:0] cC [ 32 : 0 ] ;
wire [57:0] rNextA =  dataWidthA==2'b00 ? cA[8]  : (dataWidthA==2'b01 ? cA[16]  : cA[32] );
wire [57:0] rNextB =  dataWidthB==2'b00 ? cB[8]  : (dataWidthB==2'b01 ? cB[16]  : cB[32] );
wire [57:0] rNextC =  dataWidthC==2'b00 ? cC[8]  : (dataWidthC==2'b01 ? cC[16]  : cC[32] );

always @( negedge clkA )
     begin
          if (~resetA)
               begin
                    rA <= {29{2'b00}};
               end
          else
               if (~bypassA)
                    begin
                         rA <= rNextVotedA;
                    end
     end

always @( negedge clkB )
     begin
          if (~resetB)
               begin
                    rB <= {29{2'b00}};
               end
          else
               if (~bypassB)
                    begin
                         rB <= rNextVotedB;
                    end
     end

always @( negedge clkC )
     begin
          if (~resetC)
               begin
                    rC <= {29{2'b00}};
               end
          else
               if (~bypassC)
                    begin
                         rC <= rNextVotedC;
                    end
     end
wire [31:0] dA;
wire [31:0] dB;
wire [31:0] dC;
wire [31:0] outbufA;
wire [31:0] outbufB;
wire [31:0] outbufC;
assign dA =  bypassA ? { 32 {1'b0} }  : dinA;
assign dB =  bypassB ? { 32 {1'b0} }  : dinB;
assign dC =  bypassC ? { 32 {1'b0} }  : dinC;
assign doutA =  bypassA ? dinA : (dataWidthA==2'b00 ? {{ 24 {1'b0} } ,outbufA[7:0] } : (dataWidthA==2'b01 ? {{ 16 {1'b0} } ,outbufA[15:0] } : outbufA));
assign doutB =  bypassB ? dinB : (dataWidthB==2'b00 ? {{ 24 {1'b0} } ,outbufB[7:0] } : (dataWidthB==2'b01 ? {{ 16 {1'b0} } ,outbufB[15:0] } : outbufB));
assign doutC =  bypassC ? dinC : (dataWidthC==2'b00 ? {{ 24 {1'b0} } ,outbufC[7:0] } : (dataWidthC==2'b01 ? {{ 16 {1'b0} } ,outbufC[15:0] } : outbufC));

generate
genvar i;

     for(i =  0;i<32;i =  i+1)
          begin : scr_itr 
               assign cA[i+1]  =  {cA[i] [56:0] ,dA[i] ^cA[i] [38] ^cA[i] [57] };
               assign cB[i+1]  =  {cB[i] [56:0] ,dB[i] ^cB[i] [38] ^cB[i] [57] };
               assign cC[i+1]  =  {cC[i] [56:0] ,dC[i] ^cC[i] [38] ^cC[i] [57] };
               assign outbufA[i]  =  dA[i] ^cA[i] [38] ^cA[i] [57] ;
               assign outbufB[i]  =  dB[i] ^cB[i] [38] ^cB[i] [57] ;
               assign outbufC[i]  =  dC[i] ^cC[i] [38] ^cC[i] [57] ;
          end

endgenerate
assign cA[0]  =  rA;
assign cB[0]  =  rB;
assign cC[0]  =  rC;

majorityVoter #(.WIDTH(58)) rNextVoterA (
          .inA(rNextA),
          .inB(rNextB),
          .inC(rNextC),
          .out(rNextVotedA),
          .tmrErr(rNextTmrErrorA)
          );

majorityVoter #(.WIDTH(58)) rNextVoterB (
          .inA(rNextA),
          .inB(rNextB),
          .inC(rNextC),
          .out(rNextVotedB),
          .tmrErr(rNextTmrErrorB)
          );

majorityVoter #(.WIDTH(58)) rNextVoterC (
          .inA(rNextA),
          .inB(rNextB),
          .inC(rNextC),
          .out(rNextVotedC),
          .tmrErr(rNextTmrErrorC)
          );
endmodule

