/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/bitCLKAlignerTMR.v                                                  *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:04                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: fastcommand/bitCLKAligner.v                                                            *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-22 20:45:26.997543                                         *
 *           File Size         : 10174                                                              *
 *           MD5 hash          : 41a5a372d21f1e4b9f21869e58027a91                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns/1ps
module bitCLKAlignerTMR(
     fccAlignA,
     fccAlignB,
     fccAlignC,
     clk1280A,
     clk1280B,
     clk1280C,
     clk40A,
     clk40B,
     clk40C,
     enableA,
     enableB,
     enableC,
     rstn1280A,
     rstn1280B,
     rstn1280C,
     rstn40A,
     rstn40B,
     rstn40C,
     fcA,
     fcB,
     fcC,
     clk320_alignedA,
     clk320_alignedB,
     clk320_alignedC,
     alignedA,
     alignedB,
     alignedC,
     stateA,
     stateB,
     stateC,
     errorA,
     errorB,
     errorC,
     ed0A,
     ed0B,
     ed0C,
     ed1A,
     ed1B,
     ed1C,
     ed2A,
     ed2B,
     ed2C,
     ed3A,
     ed3B,
     ed3C
);
localparam    INIT=0;
localparam    RST_ARBITER_P0=1;
localparam    P0=2;
localparam    RST_ARBITER_P1=3;
localparam    P1=4;
localparam    RST_ARBITER_P2=5;
localparam    P2=6;
localparam    RST_ARBITER_P3=7;
localparam    P3=8;
localparam    DONE=9;
wor stateTmrErrorC;
wire [3:0] stateVotedC;
wor stateTmrErrorB;
wire [3:0] stateVotedB;
wor stateTmrErrorA;
wire [3:0] stateVotedA;
input fccAlignA;
input fccAlignB;
input fccAlignC;
input clk1280A;
input clk1280B;
input clk1280C;
input enableA;
input enableB;
input enableC;
input clk40A;
input clk40B;
input clk40C;
input rstn1280A;
input rstn1280B;
input rstn1280C;
input rstn40A;
input rstn40B;
input rstn40C;
input fcA;
input fcB;
input fcC;
output clk320_alignedA;
output clk320_alignedB;
output clk320_alignedC;
output alignedA;
output alignedB;
output alignedC;
reg  alignedA;
reg  alignedB;
reg  alignedC;
reg  clk320A;
reg  clk320B;
reg  clk320C;
output [3:0] stateA;
output [3:0] stateB;
output [3:0] stateC;
output errorA;
output errorB;
output errorC;
output ed0A;
output ed0B;
output ed0C;
output ed1A;
output ed1B;
output ed1C;
output ed2A;
output ed2B;
output ed2C;
output ed3A;
output ed3B;
output ed3C;
reg  [3:0] stateA;
reg  [3:0] stateB;
reg  [3:0] stateC;
reg  clken_p0A;
reg  clken_p0B;
reg  clken_p0C;
reg  clken_p1A;
reg  clken_p1B;
reg  clken_p1C;
reg  clken_p2A;
reg  clken_p2B;
reg  clken_p2C;
reg  clken_p3A;
reg  clken_p3B;
reg  clken_p3C;
wire clk320_p0A;
wire clk320_p0B;
wire clk320_p0C;
wire clk320_p1A;
wire clk320_p1B;
wire clk320_p1C;
wire clk320_p2A;
wire clk320_p2B;
wire clk320_p2C;
wire clk320_p3A;
wire clk320_p3B;
wire clk320_p3C;
wire init_pulseA;
wire init_pulseB;
wire init_pulseC;
reg  [2:0] fcca_streamA;
reg  [2:0] fcca_streamB;
reg  [2:0] fcca_streamC;
reg  clk1A;
reg  clk2A;
reg  clk_samplerA;
reg  rstn_arbiterA;
reg  errorA;
reg  clk1B;
reg  clk2B;
reg  clk_samplerB;
reg  rstn_arbiterB;
reg  errorB;
reg  clk1C;
reg  clk2C;
reg  clk_samplerC;
reg  rstn_arbiterC;
reg  errorC;
reg  ed0regA;
reg  ed1regA;
reg  ed2regA;
reg  ed3regA;
reg  ed0regB;
reg  ed1regB;
reg  ed2regB;
reg  ed3regB;
reg  ed0regC;
reg  ed1regC;
reg  ed2regC;
reg  ed3regC;
wire ed0regVotedA;
wire ed1regVotedA;
wire ed2regVotedA;
wire ed3regVotedA;
wire ed0regVotedB;
wire ed1regVotedB;
wire ed2regVotedB;
wire ed3regVotedB;
wire ed0regVotedC;
wire ed1regVotedC;
wire ed2regVotedC;
wire ed3regVotedC;
assign ed0regVotedA =  ed0regA;
assign ed0regVotedB =  ed0regB;
assign ed0regVotedC =  ed0regC;
assign ed1regVotedA =  ed1regA;
assign ed1regVotedB =  ed1regB;
assign ed1regVotedC =  ed1regC;
assign ed2regVotedA =  ed2regA;
assign ed2regVotedB =  ed2regB;
assign ed2regVotedC =  ed2regC;
assign ed3regVotedA =  ed3regA;
assign ed3regVotedB =  ed3regB;
assign ed3regVotedC =  ed3regC;
wire ed0A;
wire ed1A;
wire ed2A;
wire ed3A;
wire ed0B;
wire ed1B;
wire ed2B;
wire ed3B;
wire ed0C;
wire ed1C;
wire ed2C;
wire ed3C;
assign ed0A =  ed0regA;
assign ed0B =  ed0regB;
assign ed0C =  ed0regC;
assign ed1A =  ed1regA;
assign ed1B =  ed1regB;
assign ed1C =  ed1regC;
assign ed2A =  ed2regA;
assign ed2B =  ed2regB;
assign ed2C =  ed2regC;
assign ed3A =  ed3regA;
assign ed3B =  ed3regB;
assign ed3C =  ed3regC;
wire edA;
wire edB;
wire edC;
wire [7:0] n_samplesA;
wire [7:0] n_samplesB;
wire [7:0] n_samplesC;
assign clk320_alignedA =  clk320A;
assign clk320_alignedB =  clk320B;
assign clk320_alignedC =  clk320C;

always @( posedge clk40A )
     begin
          if (!rstn40A)
               begin
                    fcca_streamA <= 0;
               end
          else
               if (enableA)
                    begin
                         fcca_streamA[2:0]  <= {fcca_streamA[1:0] ,fccAlignA};
                    end
     end

always @( posedge clk40B )
     begin
          if (!rstn40B)
               begin
                    fcca_streamB <= 0;
               end
          else
               if (enableB)
                    begin
                         fcca_streamB[2:0]  <= {fcca_streamB[1:0] ,fccAlignB};
                    end
     end

always @( posedge clk40C )
     begin
          if (!rstn40C)
               begin
                    fcca_streamC <= 0;
               end
          else
               if (enableC)
                    begin
                         fcca_streamC[2:0]  <= {fcca_streamC[1:0] ,fccAlignC};
                    end
     end
assign init_pulseA =  (fcca_streamA==3'b011);
assign init_pulseB =  (fcca_streamB==3'b011);
assign init_pulseC =  (fcca_streamC==3'b011);

always @( * )
     begin
          case (stateA)
               INIT : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b0;
                         clken_p1A =  1'b0;
                         clken_p2A =  1'b0;
                         clken_p3A =  1'b0;
                         clk1A =  1'b0;
                         clk2A =  1'b0;
                         clk_samplerA =  1'b0;
                         rstn_arbiterA =  1'b1;
                         ed0regA =  0;
                         ed1regA =  0;
                         ed2regA =  0;
                         ed3regA =  0;
                         errorA =  1'b0;
                    end
               RST_ARBITER_P0 : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b1;
                         clken_p1A =  1'b0;
                         clken_p2A =  1'b1;
                         clken_p3A =  1'b1;
                         clk1A =  clk320_p2A;
                         clk2A =  clk320_p3A;
                         clk_samplerA =  clk320_p0A;
                         rstn_arbiterA =  1'b0;
                         ed0regA =  0;
                         ed1regA =  0;
                         ed2regA =  0;
                         ed3regA =  0;
                         errorA =  1'b0;
                    end
               P0 : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b1;
                         clken_p1A =  1'b0;
                         clken_p2A =  1'b1;
                         clken_p3A =  1'b1;
                         clk1A =  clk320_p2A;
                         clk2A =  clk320_p3A;
                         clk_samplerA =  clk320_p0A;
                         rstn_arbiterA =  1'b1;
                         ed0regA =  edA;
                         ed1regA =  0;
                         ed2regA =  0;
                         ed3regA =  0;
                         errorA =  1'b0;
                    end
               RST_ARBITER_P1 : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b1;
                         clken_p1A =  1'b1;
                         clken_p2A =  1'b0;
                         clken_p3A =  1'b1;
                         clk1A =  clk320_p3A;
                         clk2A =  clk320_p0A;
                         clk_samplerA =  clk320_p1A;
                         rstn_arbiterA =  1'b0;
                         ed0regA =  ed0regVotedA;
                         ed1regA =  0;
                         ed2regA =  0;
                         ed3regA =  0;
                         errorA =  1'b0;
                    end
               P1 : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b1;
                         clken_p1A =  1'b1;
                         clken_p2A =  1'b0;
                         clken_p3A =  1'b1;
                         clk1A =  clk320_p3A;
                         clk2A =  clk320_p0A;
                         clk_samplerA =  clk320_p1A;
                         rstn_arbiterA =  1'b1;
                         ed0regA =  ed0regVotedA;
                         ed1regA =  edA;
                         ed2regA =  0;
                         ed3regA =  0;
                         errorA =  1'b0;
                    end
               RST_ARBITER_P2 : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b1;
                         clken_p1A =  1'b1;
                         clken_p2A =  1'b1;
                         clken_p3A =  1'b0;
                         clk1A =  clk320_p0A;
                         clk2A =  clk320_p1A;
                         clk_samplerA =  clk320_p2A;
                         rstn_arbiterA =  1'b0;
                         ed0regA =  ed0regVotedA;
                         ed1regA =  ed1regVotedA;
                         ed2regA =  0;
                         ed3regA =  0;
                         errorA =  1'b0;
                    end
               P2 : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b1;
                         clken_p1A =  1'b1;
                         clken_p2A =  1'b1;
                         clken_p3A =  1'b0;
                         clk1A =  clk320_p0A;
                         clk2A =  clk320_p1A;
                         clk_samplerA =  clk320_p2A;
                         rstn_arbiterA =  1'b1;
                         ed0regA =  ed0regVotedA;
                         ed1regA =  ed1regVotedA;
                         ed2regA =  edA;
                         ed3regA =  0;
                         errorA =  1'b0;
                    end
               RST_ARBITER_P3 : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b0;
                         clken_p1A =  1'b1;
                         clken_p2A =  1'b1;
                         clken_p3A =  1'b1;
                         clk1A =  clk320_p1A;
                         clk2A =  clk320_p2A;
                         clk_samplerA =  clk320_p3A;
                         rstn_arbiterA =  1'b0;
                         ed0regA =  ed0regVotedA;
                         ed1regA =  ed1regVotedA;
                         ed2regA =  ed2regVotedA;
                         ed3regA =  0;
                         errorA =  1'b0;
                    end
               P3 : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b0;
                         clken_p1A =  1'b1;
                         clken_p2A =  1'b1;
                         clken_p3A =  1'b1;
                         clk1A =  clk320_p1A;
                         clk2A =  clk320_p2A;
                         clk_samplerA =  clk320_p3A;
                         rstn_arbiterA =  1'b1;
                         ed0regA =  ed0regVotedA;
                         ed1regA =  ed1regVotedA;
                         ed2regA =  ed2regVotedA;
                         ed3regA =  edA;
                         errorA =  1'b0;
                    end
               DONE : 
                    begin
                         if (({ed0regVotedA,ed1regVotedA,ed2regVotedA,ed3regVotedA}==4'b0000)||({ed0regVotedA,ed1regVotedA,ed2regVotedA,ed3regVotedA}==4'b1111)||({ed0regVotedA,ed1regVotedA,ed2regVotedA,ed3regVotedA}==4'b1010)||({ed0regVotedA,ed1regVotedA,ed2regVotedA,ed3regVotedA}==4'b0101))
                              begin
                                   clk320A =  0;
                                   clken_p0A =  1'b0;
                                   clken_p1A =  1'b0;
                                   clken_p2A =  1'b0;
                                   clken_p3A =  1'b0;
                                   clk1A =  0;
                                   clk2A =  0;
                                   clk_samplerA =  0;
                                   rstn_arbiterA =  1'b1;
                                   ed0regA =  ed0regVotedA;
                                   ed1regA =  ed1regVotedA;
                                   ed2regA =  ed2regVotedA;
                                   ed3regA =  ed3regVotedA;
                                   errorA =  1'b1;
                              end
                         else
                              if ({ed0regVotedA,ed1regVotedA}==2'b10)
                                   begin
                                        clk320A =  clk320_p0A;
                                        clken_p0A =  1'b1;
                                        clken_p1A =  1'b0;
                                        clken_p2A =  1'b0;
                                        clken_p3A =  1'b0;
                                        clk1A =  0;
                                        clk2A =  0;
                                        clk_samplerA =  0;
                                        rstn_arbiterA =  1'b1;
                                        ed0regA =  ed0regVotedA;
                                        ed1regA =  ed1regVotedA;
                                        ed2regA =  ed2regVotedA;
                                        ed3regA =  ed3regVotedA;
                                        errorA =  1'b0;
                                   end
                              else
                                   if ({ed1regVotedA,ed2regVotedA}==2'b10)
                                        begin
                                             clk320A =  clk320_p1A;
                                             clken_p0A =  1'b0;
                                             clken_p1A =  1'b1;
                                             clken_p2A =  1'b0;
                                             clken_p3A =  1'b0;
                                             clk1A =  0;
                                             clk2A =  0;
                                             clk_samplerA =  0;
                                             rstn_arbiterA =  1'b1;
                                             ed0regA =  ed0regVotedA;
                                             ed1regA =  ed1regVotedA;
                                             ed2regA =  ed2regVotedA;
                                             ed3regA =  ed3regVotedA;
                                             errorA =  1'b0;
                                        end
                                   else
                                        if ({ed2regVotedA,ed3regVotedA}==2'b10)
                                             begin
                                                  clk320A =  clk320_p2A;
                                                  clken_p0A =  1'b0;
                                                  clken_p1A =  1'b0;
                                                  clken_p2A =  1'b1;
                                                  clken_p3A =  1'b0;
                                                  clk1A =  0;
                                                  clk2A =  0;
                                                  clk_samplerA =  0;
                                                  rstn_arbiterA =  1'b1;
                                                  ed0regA =  ed0regVotedA;
                                                  ed1regA =  ed1regVotedA;
                                                  ed2regA =  ed2regVotedA;
                                                  ed3regA =  ed3regVotedA;
                                                  errorA =  1'b0;
                                             end
                                        else
                                             if ({ed3regVotedA,ed0regVotedA}==2'b10)
                                                  begin
                                                       clk320A =  clk320_p3A;
                                                       clken_p0A =  1'b0;
                                                       clken_p1A =  1'b0;
                                                       clken_p2A =  1'b0;
                                                       clken_p3A =  1'b1;
                                                       clk1A =  0;
                                                       clk2A =  0;
                                                       clk_samplerA =  0;
                                                       rstn_arbiterA =  1'b1;
                                                       ed0regA =  ed0regVotedA;
                                                       ed1regA =  ed1regVotedA;
                                                       ed2regA =  ed2regVotedA;
                                                       ed3regA =  ed3regVotedA;
                                                       errorA =  1'b0;
                                                  end
                                             else
                                                  begin
                                                       clk320A =  0;
                                                       clken_p0A =  1'b0;
                                                       clken_p1A =  1'b0;
                                                       clken_p2A =  1'b0;
                                                       clken_p3A =  1'b0;
                                                       clk1A =  0;
                                                       clk2A =  0;
                                                       clk_samplerA =  0;
                                                       rstn_arbiterA =  1'b1;
                                                       ed0regA =  ed0regVotedA;
                                                       ed1regA =  ed1regVotedA;
                                                       ed2regA =  ed2regVotedA;
                                                       ed3regA =  ed3regVotedA;
                                                       errorA =  1'b1;
                                                  end
                    end
               default : 
                    begin
                         clk320A =  1'b0;
                         clken_p0A =  1'b0;
                         clken_p1A =  1'b0;
                         clken_p2A =  1'b0;
                         clken_p3A =  1'b0;
                         clk1A =  1'b0;
                         clk2A =  1'b0;
                         clk_samplerA =  1'b0;
                         rstn_arbiterA =  1'b1;
                         ed0regA =  0;
                         ed1regA =  0;
                         ed2regA =  0;
                         ed3regA =  0;
                         errorA =  1'b1;
                    end
          endcase
     end

always @( * )
     begin
          case (stateB)
               INIT : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b0;
                         clken_p1B =  1'b0;
                         clken_p2B =  1'b0;
                         clken_p3B =  1'b0;
                         clk1B =  1'b0;
                         clk2B =  1'b0;
                         clk_samplerB =  1'b0;
                         rstn_arbiterB =  1'b1;
                         ed0regB =  0;
                         ed1regB =  0;
                         ed2regB =  0;
                         ed3regB =  0;
                         errorB =  1'b0;
                    end
               RST_ARBITER_P0 : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b1;
                         clken_p1B =  1'b0;
                         clken_p2B =  1'b1;
                         clken_p3B =  1'b1;
                         clk1B =  clk320_p2B;
                         clk2B =  clk320_p3B;
                         clk_samplerB =  clk320_p0B;
                         rstn_arbiterB =  1'b0;
                         ed0regB =  0;
                         ed1regB =  0;
                         ed2regB =  0;
                         ed3regB =  0;
                         errorB =  1'b0;
                    end
               P0 : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b1;
                         clken_p1B =  1'b0;
                         clken_p2B =  1'b1;
                         clken_p3B =  1'b1;
                         clk1B =  clk320_p2B;
                         clk2B =  clk320_p3B;
                         clk_samplerB =  clk320_p0B;
                         rstn_arbiterB =  1'b1;
                         ed0regB =  edB;
                         ed1regB =  0;
                         ed2regB =  0;
                         ed3regB =  0;
                         errorB =  1'b0;
                    end
               RST_ARBITER_P1 : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b1;
                         clken_p1B =  1'b1;
                         clken_p2B =  1'b0;
                         clken_p3B =  1'b1;
                         clk1B =  clk320_p3B;
                         clk2B =  clk320_p0B;
                         clk_samplerB =  clk320_p1B;
                         rstn_arbiterB =  1'b0;
                         ed0regB =  ed0regVotedB;
                         ed1regB =  0;
                         ed2regB =  0;
                         ed3regB =  0;
                         errorB =  1'b0;
                    end
               P1 : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b1;
                         clken_p1B =  1'b1;
                         clken_p2B =  1'b0;
                         clken_p3B =  1'b1;
                         clk1B =  clk320_p3B;
                         clk2B =  clk320_p0B;
                         clk_samplerB =  clk320_p1B;
                         rstn_arbiterB =  1'b1;
                         ed0regB =  ed0regVotedB;
                         ed1regB =  edB;
                         ed2regB =  0;
                         ed3regB =  0;
                         errorB =  1'b0;
                    end
               RST_ARBITER_P2 : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b1;
                         clken_p1B =  1'b1;
                         clken_p2B =  1'b1;
                         clken_p3B =  1'b0;
                         clk1B =  clk320_p0B;
                         clk2B =  clk320_p1B;
                         clk_samplerB =  clk320_p2B;
                         rstn_arbiterB =  1'b0;
                         ed0regB =  ed0regVotedB;
                         ed1regB =  ed1regVotedB;
                         ed2regB =  0;
                         ed3regB =  0;
                         errorB =  1'b0;
                    end
               P2 : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b1;
                         clken_p1B =  1'b1;
                         clken_p2B =  1'b1;
                         clken_p3B =  1'b0;
                         clk1B =  clk320_p0B;
                         clk2B =  clk320_p1B;
                         clk_samplerB =  clk320_p2B;
                         rstn_arbiterB =  1'b1;
                         ed0regB =  ed0regVotedB;
                         ed1regB =  ed1regVotedB;
                         ed2regB =  edB;
                         ed3regB =  0;
                         errorB =  1'b0;
                    end
               RST_ARBITER_P3 : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b0;
                         clken_p1B =  1'b1;
                         clken_p2B =  1'b1;
                         clken_p3B =  1'b1;
                         clk1B =  clk320_p1B;
                         clk2B =  clk320_p2B;
                         clk_samplerB =  clk320_p3B;
                         rstn_arbiterB =  1'b0;
                         ed0regB =  ed0regVotedB;
                         ed1regB =  ed1regVotedB;
                         ed2regB =  ed2regVotedB;
                         ed3regB =  0;
                         errorB =  1'b0;
                    end
               P3 : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b0;
                         clken_p1B =  1'b1;
                         clken_p2B =  1'b1;
                         clken_p3B =  1'b1;
                         clk1B =  clk320_p1B;
                         clk2B =  clk320_p2B;
                         clk_samplerB =  clk320_p3B;
                         rstn_arbiterB =  1'b1;
                         ed0regB =  ed0regVotedB;
                         ed1regB =  ed1regVotedB;
                         ed2regB =  ed2regVotedB;
                         ed3regB =  edB;
                         errorB =  1'b0;
                    end
               DONE : 
                    begin
                         if (({ed0regVotedB,ed1regVotedB,ed2regVotedB,ed3regVotedB}==4'b0000)||({ed0regVotedB,ed1regVotedB,ed2regVotedB,ed3regVotedB}==4'b1111)||({ed0regVotedB,ed1regVotedB,ed2regVotedB,ed3regVotedB}==4'b1010)||({ed0regVotedB,ed1regVotedB,ed2regVotedB,ed3regVotedB}==4'b0101))
                              begin
                                   clk320B =  0;
                                   clken_p0B =  1'b0;
                                   clken_p1B =  1'b0;
                                   clken_p2B =  1'b0;
                                   clken_p3B =  1'b0;
                                   clk1B =  0;
                                   clk2B =  0;
                                   clk_samplerB =  0;
                                   rstn_arbiterB =  1'b1;
                                   ed0regB =  ed0regVotedB;
                                   ed1regB =  ed1regVotedB;
                                   ed2regB =  ed2regVotedB;
                                   ed3regB =  ed3regVotedB;
                                   errorB =  1'b1;
                              end
                         else
                              if ({ed0regVotedB,ed1regVotedB}==2'b10)
                                   begin
                                        clk320B =  clk320_p0B;
                                        clken_p0B =  1'b1;
                                        clken_p1B =  1'b0;
                                        clken_p2B =  1'b0;
                                        clken_p3B =  1'b0;
                                        clk1B =  0;
                                        clk2B =  0;
                                        clk_samplerB =  0;
                                        rstn_arbiterB =  1'b1;
                                        ed0regB =  ed0regVotedB;
                                        ed1regB =  ed1regVotedB;
                                        ed2regB =  ed2regVotedB;
                                        ed3regB =  ed3regVotedB;
                                        errorB =  1'b0;
                                   end
                              else
                                   if ({ed1regVotedB,ed2regVotedB}==2'b10)
                                        begin
                                             clk320B =  clk320_p1B;
                                             clken_p0B =  1'b0;
                                             clken_p1B =  1'b1;
                                             clken_p2B =  1'b0;
                                             clken_p3B =  1'b0;
                                             clk1B =  0;
                                             clk2B =  0;
                                             clk_samplerB =  0;
                                             rstn_arbiterB =  1'b1;
                                             ed0regB =  ed0regVotedB;
                                             ed1regB =  ed1regVotedB;
                                             ed2regB =  ed2regVotedB;
                                             ed3regB =  ed3regVotedB;
                                             errorB =  1'b0;
                                        end
                                   else
                                        if ({ed2regVotedB,ed3regVotedB}==2'b10)
                                             begin
                                                  clk320B =  clk320_p2B;
                                                  clken_p0B =  1'b0;
                                                  clken_p1B =  1'b0;
                                                  clken_p2B =  1'b1;
                                                  clken_p3B =  1'b0;
                                                  clk1B =  0;
                                                  clk2B =  0;
                                                  clk_samplerB =  0;
                                                  rstn_arbiterB =  1'b1;
                                                  ed0regB =  ed0regVotedB;
                                                  ed1regB =  ed1regVotedB;
                                                  ed2regB =  ed2regVotedB;
                                                  ed3regB =  ed3regVotedB;
                                                  errorB =  1'b0;
                                             end
                                        else
                                             if ({ed3regVotedB,ed0regVotedB}==2'b10)
                                                  begin
                                                       clk320B =  clk320_p3B;
                                                       clken_p0B =  1'b0;
                                                       clken_p1B =  1'b0;
                                                       clken_p2B =  1'b0;
                                                       clken_p3B =  1'b1;
                                                       clk1B =  0;
                                                       clk2B =  0;
                                                       clk_samplerB =  0;
                                                       rstn_arbiterB =  1'b1;
                                                       ed0regB =  ed0regVotedB;
                                                       ed1regB =  ed1regVotedB;
                                                       ed2regB =  ed2regVotedB;
                                                       ed3regB =  ed3regVotedB;
                                                       errorB =  1'b0;
                                                  end
                                             else
                                                  begin
                                                       clk320B =  0;
                                                       clken_p0B =  1'b0;
                                                       clken_p1B =  1'b0;
                                                       clken_p2B =  1'b0;
                                                       clken_p3B =  1'b0;
                                                       clk1B =  0;
                                                       clk2B =  0;
                                                       clk_samplerB =  0;
                                                       rstn_arbiterB =  1'b1;
                                                       ed0regB =  ed0regVotedB;
                                                       ed1regB =  ed1regVotedB;
                                                       ed2regB =  ed2regVotedB;
                                                       ed3regB =  ed3regVotedB;
                                                       errorB =  1'b1;
                                                  end
                    end
               default : 
                    begin
                         clk320B =  1'b0;
                         clken_p0B =  1'b0;
                         clken_p1B =  1'b0;
                         clken_p2B =  1'b0;
                         clken_p3B =  1'b0;
                         clk1B =  1'b0;
                         clk2B =  1'b0;
                         clk_samplerB =  1'b0;
                         rstn_arbiterB =  1'b1;
                         ed0regB =  0;
                         ed1regB =  0;
                         ed2regB =  0;
                         ed3regB =  0;
                         errorB =  1'b1;
                    end
          endcase
     end

always @( * )
     begin
          case (stateC)
               INIT : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b0;
                         clken_p1C =  1'b0;
                         clken_p2C =  1'b0;
                         clken_p3C =  1'b0;
                         clk1C =  1'b0;
                         clk2C =  1'b0;
                         clk_samplerC =  1'b0;
                         rstn_arbiterC =  1'b1;
                         ed0regC =  0;
                         ed1regC =  0;
                         ed2regC =  0;
                         ed3regC =  0;
                         errorC =  1'b0;
                    end
               RST_ARBITER_P0 : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b1;
                         clken_p1C =  1'b0;
                         clken_p2C =  1'b1;
                         clken_p3C =  1'b1;
                         clk1C =  clk320_p2C;
                         clk2C =  clk320_p3C;
                         clk_samplerC =  clk320_p0C;
                         rstn_arbiterC =  1'b0;
                         ed0regC =  0;
                         ed1regC =  0;
                         ed2regC =  0;
                         ed3regC =  0;
                         errorC =  1'b0;
                    end
               P0 : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b1;
                         clken_p1C =  1'b0;
                         clken_p2C =  1'b1;
                         clken_p3C =  1'b1;
                         clk1C =  clk320_p2C;
                         clk2C =  clk320_p3C;
                         clk_samplerC =  clk320_p0C;
                         rstn_arbiterC =  1'b1;
                         ed0regC =  edC;
                         ed1regC =  0;
                         ed2regC =  0;
                         ed3regC =  0;
                         errorC =  1'b0;
                    end
               RST_ARBITER_P1 : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b1;
                         clken_p1C =  1'b1;
                         clken_p2C =  1'b0;
                         clken_p3C =  1'b1;
                         clk1C =  clk320_p3C;
                         clk2C =  clk320_p0C;
                         clk_samplerC =  clk320_p1C;
                         rstn_arbiterC =  1'b0;
                         ed0regC =  ed0regVotedC;
                         ed1regC =  0;
                         ed2regC =  0;
                         ed3regC =  0;
                         errorC =  1'b0;
                    end
               P1 : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b1;
                         clken_p1C =  1'b1;
                         clken_p2C =  1'b0;
                         clken_p3C =  1'b1;
                         clk1C =  clk320_p3C;
                         clk2C =  clk320_p0C;
                         clk_samplerC =  clk320_p1C;
                         rstn_arbiterC =  1'b1;
                         ed0regC =  ed0regVotedC;
                         ed1regC =  edC;
                         ed2regC =  0;
                         ed3regC =  0;
                         errorC =  1'b0;
                    end
               RST_ARBITER_P2 : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b1;
                         clken_p1C =  1'b1;
                         clken_p2C =  1'b1;
                         clken_p3C =  1'b0;
                         clk1C =  clk320_p0C;
                         clk2C =  clk320_p1C;
                         clk_samplerC =  clk320_p2C;
                         rstn_arbiterC =  1'b0;
                         ed0regC =  ed0regVotedC;
                         ed1regC =  ed1regVotedC;
                         ed2regC =  0;
                         ed3regC =  0;
                         errorC =  1'b0;
                    end
               P2 : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b1;
                         clken_p1C =  1'b1;
                         clken_p2C =  1'b1;
                         clken_p3C =  1'b0;
                         clk1C =  clk320_p0C;
                         clk2C =  clk320_p1C;
                         clk_samplerC =  clk320_p2C;
                         rstn_arbiterC =  1'b1;
                         ed0regC =  ed0regVotedC;
                         ed1regC =  ed1regVotedC;
                         ed2regC =  edC;
                         ed3regC =  0;
                         errorC =  1'b0;
                    end
               RST_ARBITER_P3 : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b0;
                         clken_p1C =  1'b1;
                         clken_p2C =  1'b1;
                         clken_p3C =  1'b1;
                         clk1C =  clk320_p1C;
                         clk2C =  clk320_p2C;
                         clk_samplerC =  clk320_p3C;
                         rstn_arbiterC =  1'b0;
                         ed0regC =  ed0regVotedC;
                         ed1regC =  ed1regVotedC;
                         ed2regC =  ed2regVotedC;
                         ed3regC =  0;
                         errorC =  1'b0;
                    end
               P3 : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b0;
                         clken_p1C =  1'b1;
                         clken_p2C =  1'b1;
                         clken_p3C =  1'b1;
                         clk1C =  clk320_p1C;
                         clk2C =  clk320_p2C;
                         clk_samplerC =  clk320_p3C;
                         rstn_arbiterC =  1'b1;
                         ed0regC =  ed0regVotedC;
                         ed1regC =  ed1regVotedC;
                         ed2regC =  ed2regVotedC;
                         ed3regC =  edC;
                         errorC =  1'b0;
                    end
               DONE : 
                    begin
                         if (({ed0regVotedC,ed1regVotedC,ed2regVotedC,ed3regVotedC}==4'b0000)||({ed0regVotedC,ed1regVotedC,ed2regVotedC,ed3regVotedC}==4'b1111)||({ed0regVotedC,ed1regVotedC,ed2regVotedC,ed3regVotedC}==4'b1010)||({ed0regVotedC,ed1regVotedC,ed2regVotedC,ed3regVotedC}==4'b0101))
                              begin
                                   clk320C =  0;
                                   clken_p0C =  1'b0;
                                   clken_p1C =  1'b0;
                                   clken_p2C =  1'b0;
                                   clken_p3C =  1'b0;
                                   clk1C =  0;
                                   clk2C =  0;
                                   clk_samplerC =  0;
                                   rstn_arbiterC =  1'b1;
                                   ed0regC =  ed0regVotedC;
                                   ed1regC =  ed1regVotedC;
                                   ed2regC =  ed2regVotedC;
                                   ed3regC =  ed3regVotedC;
                                   errorC =  1'b1;
                              end
                         else
                              if ({ed0regVotedC,ed1regVotedC}==2'b10)
                                   begin
                                        clk320C =  clk320_p0C;
                                        clken_p0C =  1'b1;
                                        clken_p1C =  1'b0;
                                        clken_p2C =  1'b0;
                                        clken_p3C =  1'b0;
                                        clk1C =  0;
                                        clk2C =  0;
                                        clk_samplerC =  0;
                                        rstn_arbiterC =  1'b1;
                                        ed0regC =  ed0regVotedC;
                                        ed1regC =  ed1regVotedC;
                                        ed2regC =  ed2regVotedC;
                                        ed3regC =  ed3regVotedC;
                                        errorC =  1'b0;
                                   end
                              else
                                   if ({ed1regVotedC,ed2regVotedC}==2'b10)
                                        begin
                                             clk320C =  clk320_p1C;
                                             clken_p0C =  1'b0;
                                             clken_p1C =  1'b1;
                                             clken_p2C =  1'b0;
                                             clken_p3C =  1'b0;
                                             clk1C =  0;
                                             clk2C =  0;
                                             clk_samplerC =  0;
                                             rstn_arbiterC =  1'b1;
                                             ed0regC =  ed0regVotedC;
                                             ed1regC =  ed1regVotedC;
                                             ed2regC =  ed2regVotedC;
                                             ed3regC =  ed3regVotedC;
                                             errorC =  1'b0;
                                        end
                                   else
                                        if ({ed2regVotedC,ed3regVotedC}==2'b10)
                                             begin
                                                  clk320C =  clk320_p2C;
                                                  clken_p0C =  1'b0;
                                                  clken_p1C =  1'b0;
                                                  clken_p2C =  1'b1;
                                                  clken_p3C =  1'b0;
                                                  clk1C =  0;
                                                  clk2C =  0;
                                                  clk_samplerC =  0;
                                                  rstn_arbiterC =  1'b1;
                                                  ed0regC =  ed0regVotedC;
                                                  ed1regC =  ed1regVotedC;
                                                  ed2regC =  ed2regVotedC;
                                                  ed3regC =  ed3regVotedC;
                                                  errorC =  1'b0;
                                             end
                                        else
                                             if ({ed3regVotedC,ed0regVotedC}==2'b10)
                                                  begin
                                                       clk320C =  clk320_p3C;
                                                       clken_p0C =  1'b0;
                                                       clken_p1C =  1'b0;
                                                       clken_p2C =  1'b0;
                                                       clken_p3C =  1'b1;
                                                       clk1C =  0;
                                                       clk2C =  0;
                                                       clk_samplerC =  0;
                                                       rstn_arbiterC =  1'b1;
                                                       ed0regC =  ed0regVotedC;
                                                       ed1regC =  ed1regVotedC;
                                                       ed2regC =  ed2regVotedC;
                                                       ed3regC =  ed3regVotedC;
                                                       errorC =  1'b0;
                                                  end
                                             else
                                                  begin
                                                       clk320C =  0;
                                                       clken_p0C =  1'b0;
                                                       clken_p1C =  1'b0;
                                                       clken_p2C =  1'b0;
                                                       clken_p3C =  1'b0;
                                                       clk1C =  0;
                                                       clk2C =  0;
                                                       clk_samplerC =  0;
                                                       rstn_arbiterC =  1'b1;
                                                       ed0regC =  ed0regVotedC;
                                                       ed1regC =  ed1regVotedC;
                                                       ed2regC =  ed2regVotedC;
                                                       ed3regC =  ed3regVotedC;
                                                       errorC =  1'b1;
                                                  end
                    end
               default : 
                    begin
                         clk320C =  1'b0;
                         clken_p0C =  1'b0;
                         clken_p1C =  1'b0;
                         clken_p2C =  1'b0;
                         clken_p3C =  1'b0;
                         clk1C =  1'b0;
                         clk2C =  1'b0;
                         clk_samplerC =  1'b0;
                         rstn_arbiterC =  1'b1;
                         ed0regC =  0;
                         ed1regC =  0;
                         ed2regC =  0;
                         ed3regC =  0;
                         errorC =  1'b1;
                    end
          endcase
     end

always @( posedge clk40A )
     begin
          if (!rstn40A)
               begin
                    stateA <= INIT;
                    alignedA <= 1'b0;
               end
          else
               if (enableA)
                    case (stateVotedA)
                         INIT : 
                              begin
                                   if (init_pulseA)
                                        stateA <= RST_ARBITER_P0;
                                   else
                                        stateA <= INIT;
                              end
                         RST_ARBITER_P0 : 
                              begin
                                   if (n_samplesA==8'b00000000&&edA==1'b0)
                                        stateA <= P0;
                                   else
                                        stateA <= RST_ARBITER_P0;
                              end
                         P0 : 
                              begin
                                   if (n_samplesA==8'b11111111)
                                        stateA <= RST_ARBITER_P1;
                                   else
                                        stateA <= P0;
                              end
                         RST_ARBITER_P1 : 
                              begin
                                   if (n_samplesA==8'b00000000&&edA==1'b0)
                                        stateA <= P1;
                                   else
                                        stateA <= RST_ARBITER_P1;
                              end
                         P1 : 
                              begin
                                   if (n_samplesA==8'b11111111)
                                        stateA <= RST_ARBITER_P2;
                              end
                         RST_ARBITER_P2 : 
                              begin
                                   if (n_samplesA==8'b00000000&&edA==1'b0)
                                        stateA <= P2;
                                   else
                                        stateA <= RST_ARBITER_P2;
                              end
                         P2 : 
                              begin
                                   if (n_samplesA==8'b11111111)
                                        stateA <= RST_ARBITER_P3;
                                   else
                                        stateA <= P2;
                              end
                         RST_ARBITER_P3 : 
                              begin
                                   if (n_samplesA==8'b00000000&&edA==1'b0)
                                        stateA <= P3;
                                   else
                                        stateA <= RST_ARBITER_P3;
                              end
                         P3 : 
                              begin
                                   if (n_samplesA==8'b11111111)
                                        stateA <= DONE;
                                   else
                                        stateA <= P3;
                              end
                         DONE : 
                              begin
                                   if (init_pulseA)
                                        stateA <= RST_ARBITER_P0;
                                   else
                                        begin
                                             stateA <= DONE;
                                             alignedA <= 1'b1;
                                        end
                              end
                         default : 
                              begin
                                   if (init_pulseA)
                                        stateA <= RST_ARBITER_P0;
                                   else
                                        stateA <= INIT;
                              end
                    endcase
     end

always @( posedge clk40B )
     begin
          if (!rstn40B)
               begin
                    stateB <= INIT;
                    alignedB <= 1'b0;
               end
          else
               if (enableB)
                    case (stateVotedB)
                         INIT : 
                              begin
                                   if (init_pulseB)
                                        stateB <= RST_ARBITER_P0;
                                   else
                                        stateB <= INIT;
                              end
                         RST_ARBITER_P0 : 
                              begin
                                   if (n_samplesB==8'b00000000&&edB==1'b0)
                                        stateB <= P0;
                                   else
                                        stateB <= RST_ARBITER_P0;
                              end
                         P0 : 
                              begin
                                   if (n_samplesB==8'b11111111)
                                        stateB <= RST_ARBITER_P1;
                                   else
                                        stateB <= P0;
                              end
                         RST_ARBITER_P1 : 
                              begin
                                   if (n_samplesB==8'b00000000&&edB==1'b0)
                                        stateB <= P1;
                                   else
                                        stateB <= RST_ARBITER_P1;
                              end
                         P1 : 
                              begin
                                   if (n_samplesB==8'b11111111)
                                        stateB <= RST_ARBITER_P2;
                              end
                         RST_ARBITER_P2 : 
                              begin
                                   if (n_samplesB==8'b00000000&&edB==1'b0)
                                        stateB <= P2;
                                   else
                                        stateB <= RST_ARBITER_P2;
                              end
                         P2 : 
                              begin
                                   if (n_samplesB==8'b11111111)
                                        stateB <= RST_ARBITER_P3;
                                   else
                                        stateB <= P2;
                              end
                         RST_ARBITER_P3 : 
                              begin
                                   if (n_samplesB==8'b00000000&&edB==1'b0)
                                        stateB <= P3;
                                   else
                                        stateB <= RST_ARBITER_P3;
                              end
                         P3 : 
                              begin
                                   if (n_samplesB==8'b11111111)
                                        stateB <= DONE;
                                   else
                                        stateB <= P3;
                              end
                         DONE : 
                              begin
                                   if (init_pulseB)
                                        stateB <= RST_ARBITER_P0;
                                   else
                                        begin
                                             stateB <= DONE;
                                             alignedB <= 1'b1;
                                        end
                              end
                         default : 
                              begin
                                   if (init_pulseB)
                                        stateB <= RST_ARBITER_P0;
                                   else
                                        stateB <= INIT;
                              end
                    endcase
     end

always @( posedge clk40C )
     begin
          if (!rstn40C)
               begin
                    stateC <= INIT;
                    alignedC <= 1'b0;
               end
          else
               if (enableC)
                    case (stateVotedC)
                         INIT : 
                              begin
                                   if (init_pulseC)
                                        stateC <= RST_ARBITER_P0;
                                   else
                                        stateC <= INIT;
                              end
                         RST_ARBITER_P0 : 
                              begin
                                   if (n_samplesC==8'b00000000&&edC==1'b0)
                                        stateC <= P0;
                                   else
                                        stateC <= RST_ARBITER_P0;
                              end
                         P0 : 
                              begin
                                   if (n_samplesC==8'b11111111)
                                        stateC <= RST_ARBITER_P1;
                                   else
                                        stateC <= P0;
                              end
                         RST_ARBITER_P1 : 
                              begin
                                   if (n_samplesC==8'b00000000&&edC==1'b0)
                                        stateC <= P1;
                                   else
                                        stateC <= RST_ARBITER_P1;
                              end
                         P1 : 
                              begin
                                   if (n_samplesC==8'b11111111)
                                        stateC <= RST_ARBITER_P2;
                              end
                         RST_ARBITER_P2 : 
                              begin
                                   if (n_samplesC==8'b00000000&&edC==1'b0)
                                        stateC <= P2;
                                   else
                                        stateC <= RST_ARBITER_P2;
                              end
                         P2 : 
                              begin
                                   if (n_samplesC==8'b11111111)
                                        stateC <= RST_ARBITER_P3;
                                   else
                                        stateC <= P2;
                              end
                         RST_ARBITER_P3 : 
                              begin
                                   if (n_samplesC==8'b00000000&&edC==1'b0)
                                        stateC <= P3;
                                   else
                                        stateC <= RST_ARBITER_P3;
                              end
                         P3 : 
                              begin
                                   if (n_samplesC==8'b11111111)
                                        stateC <= DONE;
                                   else
                                        stateC <= P3;
                              end
                         DONE : 
                              begin
                                   if (init_pulseC)
                                        stateC <= RST_ARBITER_P0;
                                   else
                                        begin
                                             stateC <= DONE;
                                             alignedC <= 1'b1;
                                        end
                              end
                         default : 
                              begin
                                   if (init_pulseC)
                                        stateC <= RST_ARBITER_P0;
                                   else
                                        stateC <= INIT;
                              end
                    endcase
     end

bitclkgenTMR bitclkgen_inst (
          .clk1280A(clk1280A),
          .clk1280B(clk1280B),
          .clk1280C(clk1280C),
          .rstnA(rstn1280A),
          .rstnB(rstn1280B),
          .rstnC(rstn1280C),
          .enableA(enableA),
          .enableB(enableB),
          .enableC(enableC),
          .clken_p0A(clken_p0A),
          .clken_p0B(clken_p0B),
          .clken_p0C(clken_p0C),
          .clken_p1A(clken_p1A),
          .clken_p1B(clken_p1B),
          .clken_p1C(clken_p1C),
          .clken_p2A(clken_p2A),
          .clken_p2B(clken_p2B),
          .clken_p2C(clken_p2C),
          .clken_p3A(clken_p3A),
          .clken_p3B(clken_p3B),
          .clken_p3C(clken_p3C),
          .clk320_p0A(clk320_p0A),
          .clk320_p0B(clk320_p0B),
          .clk320_p0C(clk320_p0C),
          .clk320_p1A(clk320_p1A),
          .clk320_p1B(clk320_p1B),
          .clk320_p1C(clk320_p1C),
          .clk320_p2A(clk320_p2A),
          .clk320_p2B(clk320_p2B),
          .clk320_p2C(clk320_p2C),
          .clk320_p3A(clk320_p3A),
          .clk320_p3B(clk320_p3B),
          .clk320_p3C(clk320_p3C)
          );

ArbiterTMR Arbiter_ints (
          .clk1A(clk1A),
          .clk1B(clk1B),
          .clk1C(clk1C),
          .clk2A(clk2A),
          .clk2B(clk2B),
          .clk2C(clk2C),
          .enableA(enableA),
          .enableB(enableB),
          .enableC(enableC),
          .clk_samplerA(clk_samplerA),
          .clk_samplerB(clk_samplerB),
          .clk_samplerC(clk_samplerC),
          .rstn_arbiterA(rstn_arbiterA),
          .rstn_arbiterB(rstn_arbiterB),
          .rstn_arbiterC(rstn_arbiterC),
          .fcA(fcA),
          .fcB(fcB),
          .fcC(fcC),
          .edA(edA),
          .edB(edB),
          .edC(edC),
          .n_samplesA(n_samplesA),
          .n_samplesB(n_samplesB),
          .n_samplesC(n_samplesC)
          );

majorityVoter #(.WIDTH(4)) stateVoterA (
          .inA(stateA),
          .inB(stateB),
          .inC(stateC),
          .out(stateVotedA),
          .tmrErr(stateTmrErrorA)
          );

majorityVoter #(.WIDTH(4)) stateVoterB (
          .inA(stateA),
          .inB(stateB),
          .inC(stateC),
          .out(stateVotedB),
          .tmrErr(stateTmrErrorB)
          );

majorityVoter #(.WIDTH(4)) stateVoterC (
          .inA(stateA),
          .inB(stateB),
          .inC(stateC),
          .out(stateVotedC),
          .tmrErr(stateTmrErrorC)
          );
endmodule

