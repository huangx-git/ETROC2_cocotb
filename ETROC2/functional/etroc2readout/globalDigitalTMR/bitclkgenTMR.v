/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/bitclkgenTMR.v                                                      *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:04                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: fastcommand/bitclkgen.v                                                                *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-22 20:45:26.999553                                         *
 *           File Size         : 2792                                                               *
 *           MD5 hash          : 0b56759ddd8a5d22b94a8262f731375e                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns/1ps
module bitclkgenTMR(
     clk1280A,
     clk1280B,
     clk1280C,
     rstnA,
     rstnB,
     rstnC,
     enableA,
     enableB,
     enableC,
     clken_p0A,
     clken_p0B,
     clken_p0C,
     clken_p1A,
     clken_p1B,
     clken_p1C,
     clken_p2A,
     clken_p2B,
     clken_p2C,
     clken_p3A,
     clken_p3B,
     clken_p3C,
     clk320_p0A,
     clk320_p0B,
     clk320_p0C,
     clk320_p1A,
     clk320_p1B,
     clk320_p1C,
     clk320_p2A,
     clk320_p2B,
     clk320_p2C,
     clk320_p3A,
     clk320_p3B,
     clk320_p3C
);
wor nextCountTmrErrorC;
wire [1:0] nextCountVotedC;
wor nextCountTmrErrorB;
wire [1:0] nextCountVotedB;
wor nextCountTmrErrorA;
wire [1:0] nextCountVotedA;
input clk1280A;
input clk1280B;
input clk1280C;
input enableA;
input enableB;
input enableC;
input rstnA;
input rstnB;
input rstnC;
input clken_p0A;
input clken_p0B;
input clken_p0C;
input clken_p1A;
input clken_p1B;
input clken_p1C;
input clken_p2A;
input clken_p2B;
input clken_p2C;
input clken_p3A;
input clken_p3B;
input clken_p3C;
output reg    clk320_p0A;
output reg    clk320_p0B;
output reg    clk320_p0C;
output reg    clk320_p1A;
output reg    clk320_p1B;
output reg    clk320_p1C;
output reg    clk320_p2A;
output reg    clk320_p2B;
output reg    clk320_p2C;
output reg    clk320_p3A;
output reg    clk320_p3B;
output reg    clk320_p3C;
reg  [1:0] counterA;
reg  [1:0] counterB;
reg  [1:0] counterC;
wire [1:0] nextCountA =  counterA+1;
wire [1:0] nextCountB =  counterB+1;
wire [1:0] nextCountC =  counterC+1;

always @( posedge clk1280A )
     begin
          if (!rstnA)
               counterA <= 2'b00;
          else
               if (enableA)
                    counterA <= nextCountVotedA;
     end

always @( posedge clk1280B )
     begin
          if (!rstnB)
               counterB <= 2'b00;
          else
               if (enableB)
                    counterB <= nextCountVotedB;
     end

always @( posedge clk1280C )
     begin
          if (!rstnC)
               counterC <= 2'b00;
          else
               if (enableC)
                    counterC <= nextCountVotedC;
     end

always @( posedge clk1280A )
     begin
          if (enableA)
               begin
                    if (clken_p0A==1)
                         begin
                              if (counterA==2'd0)
                                   clk320_p0A <= 1;
                              else
                                   if (counterA==2'd2)
                                        clk320_p0A <= 0;
                         end
                    else
                         clk320_p0A <= 0;
               end
     end

always @( posedge clk1280B )
     begin
          if (enableB)
               begin
                    if (clken_p0B==1)
                         begin
                              if (counterB==2'd0)
                                   clk320_p0B <= 1;
                              else
                                   if (counterB==2'd2)
                                        clk320_p0B <= 0;
                         end
                    else
                         clk320_p0B <= 0;
               end
     end

always @( posedge clk1280C )
     begin
          if (enableC)
               begin
                    if (clken_p0C==1)
                         begin
                              if (counterC==2'd0)
                                   clk320_p0C <= 1;
                              else
                                   if (counterC==2'd2)
                                        clk320_p0C <= 0;
                         end
                    else
                         clk320_p0C <= 0;
               end
     end

always @( posedge clk1280A )
     begin
          if (enableA)
               begin
                    if (clken_p1A==1)
                         begin
                              if (counterA==2'd1)
                                   clk320_p1A <= 1;
                              else
                                   if (counterA==2'd3)
                                        clk320_p1A <= 0;
                         end
                    else
                         clk320_p1A <= 0;
               end
     end

always @( posedge clk1280B )
     begin
          if (enableB)
               begin
                    if (clken_p1B==1)
                         begin
                              if (counterB==2'd1)
                                   clk320_p1B <= 1;
                              else
                                   if (counterB==2'd3)
                                        clk320_p1B <= 0;
                         end
                    else
                         clk320_p1B <= 0;
               end
     end

always @( posedge clk1280C )
     begin
          if (enableC)
               begin
                    if (clken_p1C==1)
                         begin
                              if (counterC==2'd1)
                                   clk320_p1C <= 1;
                              else
                                   if (counterC==2'd3)
                                        clk320_p1C <= 0;
                         end
                    else
                         clk320_p1C <= 0;
               end
     end

always @( posedge clk1280A )
     begin
          if (enableA)
               begin
                    if (clken_p2A==1)
                         begin
                              if (counterA==2'd2)
                                   clk320_p2A <= 1;
                              else
                                   if (counterA==2'd0)
                                        clk320_p2A <= 0;
                         end
                    else
                         clk320_p2A <= 0;
               end
     end

always @( posedge clk1280B )
     begin
          if (enableB)
               begin
                    if (clken_p2B==1)
                         begin
                              if (counterB==2'd2)
                                   clk320_p2B <= 1;
                              else
                                   if (counterB==2'd0)
                                        clk320_p2B <= 0;
                         end
                    else
                         clk320_p2B <= 0;
               end
     end

always @( posedge clk1280C )
     begin
          if (enableC)
               begin
                    if (clken_p2C==1)
                         begin
                              if (counterC==2'd2)
                                   clk320_p2C <= 1;
                              else
                                   if (counterC==2'd0)
                                        clk320_p2C <= 0;
                         end
                    else
                         clk320_p2C <= 0;
               end
     end

always @( posedge clk1280A )
     begin
          if (enableA)
               begin
                    if (clken_p3A==1)
                         begin
                              if (counterA==2'd3)
                                   clk320_p3A <= 1;
                              else
                                   if (counterA==2'd1)
                                        clk320_p3A <= 0;
                         end
                    else
                         clk320_p3A <= 0;
               end
     end

always @( posedge clk1280B )
     begin
          if (enableB)
               begin
                    if (clken_p3B==1)
                         begin
                              if (counterB==2'd3)
                                   clk320_p3B <= 1;
                              else
                                   if (counterB==2'd1)
                                        clk320_p3B <= 0;
                         end
                    else
                         clk320_p3B <= 0;
               end
     end

always @( posedge clk1280C )
     begin
          if (enableC)
               begin
                    if (clken_p3C==1)
                         begin
                              if (counterC==2'd3)
                                   clk320_p3C <= 1;
                              else
                                   if (counterC==2'd1)
                                        clk320_p3C <= 0;
                         end
                    else
                         clk320_p3C <= 0;
               end
     end

majorityVoter #(.WIDTH(2)) nextCountVoterA (
          .inA(nextCountA),
          .inB(nextCountB),
          .inC(nextCountC),
          .out(nextCountVotedA),
          .tmrErr(nextCountTmrErrorA)
          );

majorityVoter #(.WIDTH(2)) nextCountVoterB (
          .inA(nextCountA),
          .inB(nextCountB),
          .inC(nextCountC),
          .out(nextCountVotedB),
          .tmrErr(nextCountTmrErrorB)
          );

majorityVoter #(.WIDTH(2)) nextCountVoterC (
          .inA(nextCountA),
          .inB(nextCountB),
          .inC(nextCountC),
          .out(nextCountVotedC),
          .tmrErr(nextCountTmrErrorC)
          );
endmodule

