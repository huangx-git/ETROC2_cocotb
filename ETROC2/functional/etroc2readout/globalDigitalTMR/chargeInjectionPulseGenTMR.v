/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/chargeInjectionPulseGenTMR.v                                        *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:02                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: chargeInjectionPulseGen.v                                                              *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-28 17:20:57.681625                                         *
 *           File Size         : 3926                                                               *
 *           MD5 hash          : 86ec286ee30a725b6179f3f9580239d9                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 10ps

module chargeInjectionPulseGenTMR(
     input  clk40A,
     input  clk40B,
     input  clk40C,
     input  clk1280A,
     input  clk1280B,
     input  clk1280C,
     input  resetA,
     input  resetB,
     input  resetC,
     input  chargeInjectionCmdA,
     input  chargeInjectionCmdB,
     input  chargeInjectionCmdC,
     input [4:0] delayA,
     input [4:0] delayB,
     input [4:0] delayC,
     output  pulseA,
     output  pulseB,
     output  pulseC
);
reg  rstn40A;
reg  rstn40B;
reg  rstn40C;
reg  resetlatchA;
reg  resetlatchB;
reg  resetlatchC;
reg  rstn1280A;
reg  rstn1280B;
reg  rstn1280C;

always @( posedge clk40A )
     begin
          resetlatchA <= resetA;
          rstn40A <= resetlatchA;
     end

always @( posedge clk40B )
     begin
          resetlatchB <= resetB;
          rstn40B <= resetlatchB;
     end

always @( posedge clk40C )
     begin
          resetlatchC <= resetC;
          rstn40C <= resetlatchC;
     end

always @( posedge clk1280A )
     begin
          rstn1280A <= resetlatchA;
     end

always @( posedge clk1280B )
     begin
          rstn1280B <= resetlatchB;
     end

always @( posedge clk1280C )
     begin
          rstn1280C <= resetlatchC;
     end
reg  chargeInjectionCmdDelayA;
reg  chargeInjectionCmdDelayB;
reg  chargeInjectionCmdDelayC;
reg  [1:0] sessionCountA;
reg  [1:0] sessionCountB;
reg  [1:0] sessionCountC;
wire [1:0] nextsessionCountA =  sessionCountA+1'b1;
wire [1:0] nextsessionCountB =  sessionCountB+1'b1;
wire [1:0] nextsessionCountC =  sessionCountC+1'b1;
reg  endSessionA;
reg  endSessionB;
reg  endSessionC;
wire startSessionA =  ~chargeInjectionCmdDelayA&chargeInjectionCmdA;
wire startSessionB =  ~chargeInjectionCmdDelayB&chargeInjectionCmdB;
wire startSessionC =  ~chargeInjectionCmdDelayC&chargeInjectionCmdC;
reg  startRegA;
reg  startRegB;
reg  startRegC;

always @( posedge clk40A )
     begin
          startRegA <= startSessionA;
          chargeInjectionCmdDelayA <= chargeInjectionCmdA;
          if (~rstn40A)
               begin
                    endSessionA <= 1'b1;
                    sessionCountA <= 2'd0;
               end
          else
               if (startSessionA)
                    begin
                         endSessionA <= 1'b0;
                         sessionCountA <= 2'd0;
                    end
               else
                    if (~endSessionA)
                         begin
                              sessionCountA <= nextsessionCountA;
                              if (sessionCountA==2'd3)
                                   begin
                                        endSessionA <= 1'b1;
                                        sessionCountA <= 2'd0;
                                   end
                         end
     end

always @( posedge clk40B )
     begin
          startRegB <= startSessionB;
          chargeInjectionCmdDelayB <= chargeInjectionCmdB;
          if (~rstn40B)
               begin
                    endSessionB <= 1'b1;
                    sessionCountB <= 2'd0;
               end
          else
               if (startSessionB)
                    begin
                         endSessionB <= 1'b0;
                         sessionCountB <= 2'd0;
                    end
               else
                    if (~endSessionB)
                         begin
                              sessionCountB <= nextsessionCountB;
                              if (sessionCountB==2'd3)
                                   begin
                                        endSessionB <= 1'b1;
                                        sessionCountB <= 2'd0;
                                   end
                         end
     end

always @( posedge clk40C )
     begin
          startRegC <= startSessionC;
          chargeInjectionCmdDelayC <= chargeInjectionCmdC;
          if (~rstn40C)
               begin
                    endSessionC <= 1'b1;
                    sessionCountC <= 2'd0;
               end
          else
               if (startSessionC)
                    begin
                         endSessionC <= 1'b0;
                         sessionCountC <= 2'd0;
                    end
               else
                    if (~endSessionC)
                         begin
                              sessionCountC <= nextsessionCountC;
                              if (sessionCountC==2'd3)
                                   begin
                                        endSessionC <= 1'b1;
                                        sessionCountC <= 2'd0;
                                   end
                         end
     end
reg  syncClk40A;
reg  syncClk40B;
reg  syncClk40C;

always @( posedge clk1280A )
     begin
          if (~rstn1280A)
               syncClk40A <= 1'b0;
          else
               if (~endSessionA)
                    begin
                         syncClk40A <= clk40A;
                    end
     end

always @( posedge clk1280B )
     begin
          if (~rstn1280B)
               syncClk40B <= 1'b0;
          else
               if (~endSessionB)
                    begin
                         syncClk40B <= clk40B;
                    end
     end

always @( posedge clk1280C )
     begin
          if (~rstn1280C)
               syncClk40C <= 1'b0;
          else
               if (~endSessionC)
                    begin
                         syncClk40C <= clk40C;
                    end
     end
reg  [4:0] phaseCounterA;
reg  [4:0] phaseCounterB;
reg  [4:0] phaseCounterC;
reg  clk40D1A;
reg  clk40D1B;
reg  clk40D1C;
reg  clk40D2A;
reg  clk40D2B;
reg  clk40D2C;
wire risingClk40A;
wire risingClk40B;
wire risingClk40C;
assign risingClk40A =  ~clk40D2A&clk40D1A;
assign risingClk40B =  ~clk40D2B&clk40D1B;
assign risingClk40C =  ~clk40D2C&clk40D1C;
reg  resetPhaseCountA;
reg  resetPhaseCountB;
reg  resetPhaseCountC;

always @( posedge clk1280A )
     begin
          if (~rstn1280A)
               begin
                    phaseCounterA <= 5'd3;
                    clk40D1A <= 1'b0;
                    clk40D2A <= 1'b0;
                    resetPhaseCountA <= 1'b0;
               end
          else
               if (~endSessionA)
                    begin
                         clk40D1A <= syncClk40A;
                         clk40D2A <= clk40D1A;
                         resetPhaseCountA <= ~clk40D1A&syncClk40A&startRegA;
                         if (resetPhaseCountA)
                              begin
                                   phaseCounterA <= 5'd3;
                              end
                         else
                              begin
                                   phaseCounterA <= phaseCounterA+1'b1;
                              end
                    end
     end

always @( posedge clk1280B )
     begin
          if (~rstn1280B)
               begin
                    phaseCounterB <= 5'd3;
                    clk40D1B <= 1'b0;
                    clk40D2B <= 1'b0;
                    resetPhaseCountB <= 1'b0;
               end
          else
               if (~endSessionB)
                    begin
                         clk40D1B <= syncClk40B;
                         clk40D2B <= clk40D1B;
                         resetPhaseCountB <= ~clk40D1B&syncClk40B&startRegB;
                         if (resetPhaseCountB)
                              begin
                                   phaseCounterB <= 5'd3;
                              end
                         else
                              begin
                                   phaseCounterB <= phaseCounterB+1'b1;
                              end
                    end
     end

always @( posedge clk1280C )
     begin
          if (~rstn1280C)
               begin
                    phaseCounterC <= 5'd3;
                    clk40D1C <= 1'b0;
                    clk40D2C <= 1'b0;
                    resetPhaseCountC <= 1'b0;
               end
          else
               if (~endSessionC)
                    begin
                         clk40D1C <= syncClk40C;
                         clk40D2C <= clk40D1C;
                         resetPhaseCountC <= ~clk40D1C&syncClk40C&startRegC;
                         if (resetPhaseCountC)
                              begin
                                   phaseCounterC <= 5'd3;
                              end
                         else
                              begin
                                   phaseCounterC <= phaseCounterC+1'b1;
                              end
                    end
     end
reg  pulseRegA;
reg  pulseRegB;
reg  pulseRegC;

always @( posedge clk1280A )
     begin
          if (~rstn1280A)
               begin
                    pulseRegA <= 1'b0;
               end
          else
               if (~endSessionA)
                    begin
                         if (phaseCounterA==delayA&&sessionCountA==2'b01)
                              begin
                                   pulseRegA <= 1'b1;
                              end
                         else
                              if (phaseCounterA==delayA&&sessionCountA==2'b11)
                                   begin
                                        pulseRegA <= 1'b0;
                                   end
                    end
               else
                    begin
                         pulseRegA <= 1'b0;
                    end
     end

always @( posedge clk1280B )
     begin
          if (~rstn1280B)
               begin
                    pulseRegB <= 1'b0;
               end
          else
               if (~endSessionB)
                    begin
                         if (phaseCounterB==delayB&&sessionCountB==2'b01)
                              begin
                                   pulseRegB <= 1'b1;
                              end
                         else
                              if (phaseCounterB==delayB&&sessionCountB==2'b11)
                                   begin
                                        pulseRegB <= 1'b0;
                                   end
                    end
               else
                    begin
                         pulseRegB <= 1'b0;
                    end
     end

always @( posedge clk1280C )
     begin
          if (~rstn1280C)
               begin
                    pulseRegC <= 1'b0;
               end
          else
               if (~endSessionC)
                    begin
                         if (phaseCounterC==delayC&&sessionCountC==2'b01)
                              begin
                                   pulseRegC <= 1'b1;
                              end
                         else
                              if (phaseCounterC==delayC&&sessionCountC==2'b11)
                                   begin
                                        pulseRegC <= 1'b0;
                                   end
                    end
               else
                    begin
                         pulseRegC <= 1'b0;
                    end
     end
assign pulseA =  pulseRegA;
assign pulseB =  pulseRegB;
assign pulseC =  pulseRegC;
endmodule

