/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/columnConnecterTMR.v                                                *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:02                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: columnConnecter.v                                                                      *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:01.893891                                         *
 *           File Size         : 4650                                                               *
 *           MD5 hash          : 5fe0c50121e7c33fb2fcd200457e3592                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

`include  "commonDefinition.v"

module columnConnecterTMR #(
  parameter BCSTWIDTH=27
)(
     input [735:0] colDataChain,
     input [15:0] colHitChain,
     input [63:0] trigHitsColumn,
     output [15:0] colReadChain,
     output [BCSTWIDTH*16-1:0] colBCSTChain,
     output [15:0] trigHits,
     output [45:0] dnDataRight,
     output  dnUnreadHitRight,
     input  dnReadRight,
     input [BCSTWIDTH-1:0] dnBCSTRight,
     output [45:0] dnDataLeft,
     output  dnUnreadHitLeft,
     input  dnReadLeft,
     input [BCSTWIDTH-1:0] dnBCSTLeft
);
wire [BCSTWIDTH-1:0] colBCSTChain2D [ 15 : 0 ] ;
wire [45:0] colDataChain2D [ 15 : 0 ] ;

generate
genvar ii;

     for(ii =  0;ii<16;ii =  ii+1)
          begin 
               assign colDataChain2D[ii]  =  colDataChain[46*ii+45:46*ii] ;
          end

endgenerate
wire [45:0] swDataChain [ 15 : 0 ] ;
wire [15:0] swHitChain;
wire [15:0] swReadChain;
wire [BCSTWIDTH-1:0] swBCSTChain [ 15 : 0 ] ;

generate
genvar j;

     for(j =  1;j<8;j =  j+1)
          begin : swLoop1 

               SWCell #(.DATAWIDTH(46), .BCSTWIDTH(BCSTWIDTH), .HITSWIDTH(1)) SWCellInstRght (
                         .ctData(colDataChain2D[j] ),
                         .ctHits(colHitChain[j] ),
                         .ctRead(colReadChain[j] ),
                         .ctBCST(colBCSTChain2D[j] ),
                         .upData(swDataChain[j-1] ),
                         .upHits(swHitChain[j-1] ),
                         .upRead(swReadChain[j-1] ),
                         .upBCST(swBCSTChain[j-1] ),
                         .dnData(swDataChain[j] ),
                         .dnHits(swHitChain[j] ),
                         .dnRead(swReadChain[j] ),
                         .dnBCST(swBCSTChain[j] )
                         );
          end

endgenerate
assign swDataChain[0]  =  colDataChain2D[0] ;
assign swHitChain[0]  =  colHitChain[0] ;
assign colReadChain[0]  =  swReadChain[0] ;
assign colBCSTChain2D[0]  =  swBCSTChain[0] ;

generate
genvar n;

     for(n =  8;n<15;n =  n+1)
          begin : swLoop2 

               SWCell #(.DATAWIDTH(46), .BCSTWIDTH(BCSTWIDTH), .HITSWIDTH(1)) SWCellInstLeft (
                         .ctData(colDataChain2D[n] ),
                         .ctHits(colHitChain[n] ),
                         .ctRead(colReadChain[n] ),
                         .ctBCST(colBCSTChain2D[n] ),
                         .upData(swDataChain[n+1] ),
                         .upHits(swHitChain[n+1] ),
                         .upRead(swReadChain[n+1] ),
                         .upBCST(swBCSTChain[n+1] ),
                         .dnData(swDataChain[n] ),
                         .dnHits(swHitChain[n] ),
                         .dnRead(swReadChain[n] ),
                         .dnBCST(swBCSTChain[n] )
                         );
          end

endgenerate
assign swDataChain[15]  =  colDataChain2D[15] ;
assign swHitChain[15]  =  colHitChain[15] ;
assign colReadChain[15]  =  swReadChain[15] ;
assign colBCSTChain2D[15]  =  swBCSTChain[15] ;

generate
genvar jj;

     for(jj =  0;jj<16;jj =  jj+1)
          begin 
               assign colBCSTChain[jj*BCSTWIDTH+BCSTWIDTH-1:jj*BCSTWIDTH]  =  colBCSTChain2D[jj] ;
          end

endgenerate
assign dnDataRight =  swDataChain[7] ;
assign dnUnreadHitRight =  swHitChain[7] ;
assign swReadChain[7]  =  dnReadRight;
assign swBCSTChain[7]  =  dnBCSTRight;
assign dnDataLeft =  swDataChain[8] ;
assign dnUnreadHitLeft =  swHitChain[8] ;
assign swReadChain[8]  =  dnReadLeft;
assign swBCSTChain[8]  =  dnBCSTLeft;

generate
genvar l;

     for(l =  0;l<16;l =  l+1)
          begin : loopcolumn 
               assign trigHits[l]  =  trigHitsColumn[(l-(l%4))*4+l%4] |trigHitsColumn[(l-(l%4))*4+4+l%4] |trigHitsColumn[(l-(l%4))*4+8+l%4] |trigHitsColumn[(l-(l%4))*4+12+l%4] ;
          end

endgenerate
endmodule

