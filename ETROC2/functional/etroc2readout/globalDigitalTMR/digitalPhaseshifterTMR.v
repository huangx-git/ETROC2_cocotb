/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/digitalPhaseshifterTMR.v                                            *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:03                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: digitalPhaseshifter.v                                                                  *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:01.962905                                         *
 *           File Size         : 4871                                                               *
 *           MD5 hash          : a97d31ce76ec1c0fba75a3f0ecd2ce73                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 10ps

module digitalPhaseshifterTMR(
     input  clk40A,
     input  clk40B,
     input  clk40C,
     input  clk1280A,
     input  clk1280B,
     input  clk1280C,
     input [4:0] clockDelay1A,
     input [4:0] clockDelay1B,
     input [4:0] clockDelay1C,
     input [4:0] pulseWidth1A,
     input [4:0] pulseWidth1B,
     input [4:0] pulseWidth1C,
     input [4:0] clockDelay2A,
     input [4:0] clockDelay2B,
     input [4:0] clockDelay2C,
     input [4:0] pulseWidth2A,
     input [4:0] pulseWidth2B,
     input [4:0] pulseWidth2C,
     output  clkout1A,
     output  clkout1B,
     output  clkout1C,
     output  clkout2A,
     output  clkout2B,
     output  clkout2C
);
reg  [4:0] phaseCounterA;
reg  [4:0] phaseCounterB;
reg  [4:0] phaseCounterC;
reg  clk40D1A;
reg  clk40D1B;
reg  clk40D1C;
reg  clk40D2A;
reg  clk40D2B;
reg  clk40D2C;
wire risingClk40A;
wire risingClk40B;
wire risingClk40C;
assign risingClk40A =  ~clk40D2A&clk40D1A;
assign risingClk40B =  ~clk40D2B&clk40D1B;
assign risingClk40C =  ~clk40D2C&clk40D1C;
wire [4:0] nextCountA =  phaseCounterA+1'b1;
wire [4:0] nextCountB =  phaseCounterB+1'b1;
wire [4:0] nextCountC =  phaseCounterC+1'b1;
reg  syncClk40A;
reg  syncClk40B;
reg  syncClk40C;

always @( posedge clk1280A )
     begin
          syncClk40A <= clk40A;
     end

always @( posedge clk1280B )
     begin
          syncClk40B <= clk40B;
     end

always @( posedge clk1280C )
     begin
          syncClk40C <= clk40C;
     end

always @( posedge clk1280A )
     begin
          clk40D1A <= syncClk40A;
          clk40D2A <= clk40D1A;
          if (risingClk40A)
               begin
                    phaseCounterA <= 5'd3;
               end
          else
               begin
                    phaseCounterA <= nextCountA;
               end
     end

always @( posedge clk1280B )
     begin
          clk40D1B <= syncClk40B;
          clk40D2B <= clk40D1B;
          if (risingClk40B)
               begin
                    phaseCounterB <= 5'd3;
               end
          else
               begin
                    phaseCounterB <= nextCountB;
               end
     end

always @( posedge clk1280C )
     begin
          clk40D1C <= syncClk40C;
          clk40D2C <= clk40D1C;
          if (risingClk40C)
               begin
                    phaseCounterC <= 5'd3;
               end
          else
               begin
                    phaseCounterC <= nextCountC;
               end
     end
reg  [1:0] clkoutRegA;
reg  [1:0] clkoutRegB;
reg  [1:0] clkoutRegC;
wire [4:0] risingAtA [ 1 : 0 ] ;
wire [4:0] risingAtB [ 1 : 0 ] ;
wire [4:0] risingAtC [ 1 : 0 ] ;
assign risingAtA[0]  =  clockDelay1A;
assign risingAtB[0]  =  clockDelay1B;
assign risingAtC[0]  =  clockDelay1C;
assign risingAtA[1]  =  clockDelay2A;
assign risingAtB[1]  =  clockDelay2B;
assign risingAtC[1]  =  clockDelay2C;
wire [4:0] fallingAtA [ 1 : 0 ] ;
wire [4:0] fallingAtB [ 1 : 0 ] ;
wire [4:0] fallingAtC [ 1 : 0 ] ;
assign fallingAtA[0]  =  risingAtA[0] +pulseWidth1A;
assign fallingAtB[0]  =  risingAtB[0] +pulseWidth1B;
assign fallingAtC[0]  =  risingAtC[0] +pulseWidth1C;
assign fallingAtA[1]  =  risingAtA[1] +pulseWidth2A;
assign fallingAtB[1]  =  risingAtB[1] +pulseWidth2B;
assign fallingAtC[1]  =  risingAtC[1] +pulseWidth2C;

always @( posedge clk1280A )
     begin
          begin
               if (fallingAtA[0] >risingAtA[0] )
                    begin
                         if (phaseCounterA>=risingAtA[0] &&phaseCounterA<fallingAtA[0] )
                              begin
                                   clkoutRegA[0]  <= 1'b1;
                              end
                         else
                              begin
                                   clkoutRegA[0]  <= 1'b0;
                              end
                    end
               else
                    if (fallingAtA[0] ==risingAtA[0] )
                         begin
                              if (phaseCounterA==risingAtA[0] )
                                   begin
                                        clkoutRegA[0]  <= 1'b1;
                                   end
                              else
                                   begin
                                        clkoutRegA[0]  <= 1'b0;
                                   end
                         end
                    else
                         begin
                              if (phaseCounterA>=fallingAtA[0] &&phaseCounterA<risingAtA[0] )
                                   begin
                                        clkoutRegA[0]  <= 1'b0;
                                   end
                              else
                                   begin
                                        clkoutRegA[0]  <= 1'b1;
                                   end
                         end
          end
     end

always @( posedge clk1280B )
     begin
          begin
               if (fallingAtB[0] >risingAtB[0] )
                    begin
                         if (phaseCounterB>=risingAtB[0] &&phaseCounterB<fallingAtB[0] )
                              begin
                                   clkoutRegB[0]  <= 1'b1;
                              end
                         else
                              begin
                                   clkoutRegB[0]  <= 1'b0;
                              end
                    end
               else
                    if (fallingAtB[0] ==risingAtB[0] )
                         begin
                              if (phaseCounterB==risingAtB[0] )
                                   begin
                                        clkoutRegB[0]  <= 1'b1;
                                   end
                              else
                                   begin
                                        clkoutRegB[0]  <= 1'b0;
                                   end
                         end
                    else
                         begin
                              if (phaseCounterB>=fallingAtB[0] &&phaseCounterB<risingAtB[0] )
                                   begin
                                        clkoutRegB[0]  <= 1'b0;
                                   end
                              else
                                   begin
                                        clkoutRegB[0]  <= 1'b1;
                                   end
                         end
          end
     end

always @( posedge clk1280C )
     begin
          begin
               if (fallingAtC[0] >risingAtC[0] )
                    begin
                         if (phaseCounterC>=risingAtC[0] &&phaseCounterC<fallingAtC[0] )
                              begin
                                   clkoutRegC[0]  <= 1'b1;
                              end
                         else
                              begin
                                   clkoutRegC[0]  <= 1'b0;
                              end
                    end
               else
                    if (fallingAtC[0] ==risingAtC[0] )
                         begin
                              if (phaseCounterC==risingAtC[0] )
                                   begin
                                        clkoutRegC[0]  <= 1'b1;
                                   end
                              else
                                   begin
                                        clkoutRegC[0]  <= 1'b0;
                                   end
                         end
                    else
                         begin
                              if (phaseCounterC>=fallingAtC[0] &&phaseCounterC<risingAtC[0] )
                                   begin
                                        clkoutRegC[0]  <= 1'b0;
                                   end
                              else
                                   begin
                                        clkoutRegC[0]  <= 1'b1;
                                   end
                         end
          end
     end

always @( posedge clk1280A )
     begin
          begin
               if (fallingAtA[1] >risingAtA[1] )
                    begin
                         if (phaseCounterA>=risingAtA[1] &&phaseCounterA<fallingAtA[1] )
                              begin
                                   clkoutRegA[1]  <= 1'b1;
                              end
                         else
                              begin
                                   clkoutRegA[1]  <= 1'b0;
                              end
                    end
               else
                    if (fallingAtA[1] ==risingAtA[1] )
                         begin
                              if (phaseCounterA==risingAtA[1] )
                                   begin
                                        clkoutRegA[1]  <= 1'b1;
                                   end
                              else
                                   begin
                                        clkoutRegA[1]  <= 1'b0;
                                   end
                         end
                    else
                         begin
                              if (phaseCounterA>=fallingAtA[1] &&phaseCounterA<risingAtA[1] )
                                   begin
                                        clkoutRegA[1]  <= 1'b0;
                                   end
                              else
                                   begin
                                        clkoutRegA[1]  <= 1'b1;
                                   end
                         end
          end
     end

always @( posedge clk1280B )
     begin
          begin
               if (fallingAtB[1] >risingAtB[1] )
                    begin
                         if (phaseCounterB>=risingAtB[1] &&phaseCounterB<fallingAtB[1] )
                              begin
                                   clkoutRegB[1]  <= 1'b1;
                              end
                         else
                              begin
                                   clkoutRegB[1]  <= 1'b0;
                              end
                    end
               else
                    if (fallingAtB[1] ==risingAtB[1] )
                         begin
                              if (phaseCounterB==risingAtB[1] )
                                   begin
                                        clkoutRegB[1]  <= 1'b1;
                                   end
                              else
                                   begin
                                        clkoutRegB[1]  <= 1'b0;
                                   end
                         end
                    else
                         begin
                              if (phaseCounterB>=fallingAtB[1] &&phaseCounterB<risingAtB[1] )
                                   begin
                                        clkoutRegB[1]  <= 1'b0;
                                   end
                              else
                                   begin
                                        clkoutRegB[1]  <= 1'b1;
                                   end
                         end
          end
     end

always @( posedge clk1280C )
     begin
          begin
               if (fallingAtC[1] >risingAtC[1] )
                    begin
                         if (phaseCounterC>=risingAtC[1] &&phaseCounterC<fallingAtC[1] )
                              begin
                                   clkoutRegC[1]  <= 1'b1;
                              end
                         else
                              begin
                                   clkoutRegC[1]  <= 1'b0;
                              end
                    end
               else
                    if (fallingAtC[1] ==risingAtC[1] )
                         begin
                              if (phaseCounterC==risingAtC[1] )
                                   begin
                                        clkoutRegC[1]  <= 1'b1;
                                   end
                              else
                                   begin
                                        clkoutRegC[1]  <= 1'b0;
                                   end
                         end
                    else
                         begin
                              if (phaseCounterC>=fallingAtC[1] &&phaseCounterC<risingAtC[1] )
                                   begin
                                        clkoutRegC[1]  <= 1'b0;
                                   end
                              else
                                   begin
                                        clkoutRegC[1]  <= 1'b1;
                                   end
                         end
          end
     end
assign clkout1A =  clkoutRegA[0] ;
assign clkout1B =  clkoutRegB[0] ;
assign clkout1C =  clkoutRegC[0] ;
`ifdef  HTreeDLY_ON

assign #((`HTREE_MIN_DELAY + `PIXEL_CTS_MIN_DELAY):(`HTREE_TYP_DELAY + `PIXEL_CTS_TYP_DELAY):(`HTREE_MAX_DELAY + `PIXEL_CTS_MAX_DELAY)) clkout2A =  clkoutRegA[1] ;
assign #((`HTREE_MIN_DELAY + `PIXEL_CTS_MIN_DELAY):(`HTREE_TYP_DELAY + `PIXEL_CTS_TYP_DELAY):(`HTREE_MAX_DELAY + `PIXEL_CTS_MAX_DELAY)) clkout2B =  clkoutRegB[1] ;
assign #((`HTREE_MIN_DELAY + `PIXEL_CTS_MIN_DELAY):(`HTREE_TYP_DELAY + `PIXEL_CTS_TYP_DELAY):(`HTREE_MAX_DELAY + `PIXEL_CTS_MAX_DELAY)) clkout2C =  clkoutRegC[1] ;
`else 

assign clkout2A =  clkoutRegA[1] ;
assign clkout2B =  clkoutRegB[1] ;
assign clkout2C =  clkoutRegC[1] ;
`endif 

endmodule

