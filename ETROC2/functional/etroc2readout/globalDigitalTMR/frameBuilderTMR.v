/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/frameBuilderTMR.v                                                   *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:05                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: frameBuilder.v                                                                         *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:02.039903                                         *
 *           File Size         : 5303                                                               *
 *           MD5 hash          : 884884fd237f806a23c65e23dab10b06                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

module frameBuilderTMR(
     input  clkA,
     input  clkB,
     input  clkC,
     input  resetA,
     input  resetB,
     input  resetC,
     input [1:0] typeA,
     input [1:0] typeB,
     input [1:0] typeC,
     input [28:0] TDCDataA,
     input [28:0] TDCDataB,
     input [28:0] TDCDataC,
     input [16:0] chipIDA,
     input [16:0] chipIDB,
     input [16:0] chipIDC,
     input  hitA,
     input  hitB,
     input  hitC,
     input  eventStartA,
     input  eventStartB,
     input  eventStartC,
     input [7:0] pixelIDA,
     input [7:0] pixelIDB,
     input [7:0] pixelIDC,
     input [11:0] BCIDA,
     input [11:0] BCIDB,
     input [11:0] BCIDC,
     input [7:0] L1CounterA,
     input [7:0] L1CounterB,
     input [7:0] L1CounterC,
     input [1:0] EAA,
     input [1:0] EAB,
     input [1:0] EAC,
     input  L1BufFullA,
     input  L1BufFullB,
     input  L1BufFullC,
     input  L1BufHalfFullA,
     input  L1BufHalfFullB,
     input  L1BufHalfFullC,
     input  L1BufOverflowA,
     input  L1BufOverflowB,
     input  L1BufOverflowC,
     input  streamBufAlmostFullA,
     input  streamBufAlmostFullB,
     input  streamBufAlmostFullC,
     output reg [39:0] dataFrameA,
     output reg [39:0] dataFrameB,
     output reg [39:0] dataFrameC
);
localparam    header=2'b00;
localparam    data=2'b01;
localparam    trailer=2'b10;
localparam    idle=2'b11;
wor dataTypeTmrErrorC;
wire [1:0] dataTypeVotedC;
wor dataRecordTmrErrorC;
wire [39:0] dataRecordVotedC;
wor hitCountNextTmrErrorC;
wire [7:0] hitCountNextVotedC;
wor frameTrailerTmrErrorC;
wire [39:0] frameTrailerVotedC;
wor streamBufAlmostFullTmrErrorC;
wire streamBufAlmostFullVotedC;
wor hitTmrErrorC;
wire hitVotedC;
wor eventStartTmrErrorC;
wire eventStartVotedC;
wor nextCRCTmrErrorC;
wire [7:0] nextCRCVotedC;
wor dataRecordTmrErrorB;
wire [39:0] dataRecordVotedB;
wor dataTypeTmrErrorB;
wire [1:0] dataTypeVotedB;
wor hitCountNextTmrErrorB;
wire [7:0] hitCountNextVotedB;
wor frameTrailerTmrErrorB;
wire [39:0] frameTrailerVotedB;
wor streamBufAlmostFullTmrErrorB;
wire streamBufAlmostFullVotedB;
wor hitTmrErrorB;
wire hitVotedB;
wor eventStartTmrErrorB;
wire eventStartVotedB;
wor nextCRCTmrErrorB;
wire [7:0] nextCRCVotedB;
wor hitCountNextTmrErrorA;
wire [7:0] hitCountNextVotedA;
wor dataTypeTmrErrorA;
wire [1:0] dataTypeVotedA;
wor dataRecordTmrErrorA;
wire [39:0] dataRecordVotedA;
wor frameTrailerTmrErrorA;
wire [39:0] frameTrailerVotedA;
wor streamBufAlmostFullTmrErrorA;
wire streamBufAlmostFullVotedA;
wor eventStartTmrErrorA;
wire eventStartVotedA;
wor hitTmrErrorA;
wire hitVotedA;
wor nextCRCTmrErrorA;
wire [7:0] nextCRCVotedA;
reg  [11:0] BCIDRegA;
reg  [11:0] BCIDRegB;
reg  [11:0] BCIDRegC;
reg  [7:0] L1CounterRegA;
reg  [7:0] L1CounterRegB;
reg  [7:0] L1CounterRegC;
reg  [39:0] dataRecordA;
reg  [39:0] dataRecordB;
reg  [39:0] dataRecordC;
reg  SEUErrorA;
reg  SEUErrorB;
reg  SEUErrorC;
reg  [1:0] L1StatusA;
reg  [1:0] L1StatusB;
reg  [1:0] L1StatusC;
reg  [1:0] dataTypeA;
reg  [1:0] dataTypeB;
reg  [1:0] dataTypeC;
reg  [7:0] hitCountA;
reg  [7:0] hitCountB;
reg  [7:0] hitCountC;
wire [7:0] hitCountNextA =  hitCountA+1;
wire [7:0] hitCountNextB =  hitCountB+1;
wire [7:0] hitCountNextC =  hitCountC+1;

always @( posedge clkA )
     begin
          if (~resetA)
               begin
                    dataTypeA <= idle;
                    dataRecordA <= {40{1'b0}};
                    BCIDRegA <= 12'd0;
                    L1CounterRegA <= 8'd0;
                    L1StatusA <= 2'd0;
                    SEUErrorA <= 1'b0;
                    hitCountA <= 8'h00;
               end
          else
               if (!streamBufAlmostFullVotedA)
                    begin
                         BCIDRegA <= BCIDA;
                         L1CounterRegA <= L1CounterA;
                         dataRecordA <= {1'b1,EAA,pixelIDA,TDCDataA};
                         L1StatusA <= L1BufFullA ? 2'b11 : (L1BufOverflowA ? 2'b10 : (L1BufHalfFullA ? 2'b01 : 2'b00));
                         if (eventStartVotedA)
                              begin
                                   dataTypeA <= header;
                                   SEUErrorA <= 1'b0;
                                   hitCountA <= 8'h00;
                              end
                         else
                              if (hitVotedA)
                                   begin
                                        dataTypeA <= data;
                                        SEUErrorA <= SEUErrorA|EAA[0] |EAA[1] ;
                                        hitCountA <= hitCountNextVotedA;
                                   end
                              else
                                   if (hitVotedA==1'b0&&(dataTypeVotedA==data||dataTypeVotedA==header))
                                        begin
                                             dataTypeA <= trailer;
                                        end
                                   else
                                        begin
                                             dataTypeA <= idle;
                                        end
                    end
     end

always @( posedge clkB )
     begin
          if (~resetB)
               begin
                    dataTypeB <= idle;
                    dataRecordB <= {40{1'b0}};
                    BCIDRegB <= 12'd0;
                    L1CounterRegB <= 8'd0;
                    L1StatusB <= 2'd0;
                    SEUErrorB <= 1'b0;
                    hitCountB <= 8'h00;
               end
          else
               if (!streamBufAlmostFullVotedB)
                    begin
                         BCIDRegB <= BCIDB;
                         L1CounterRegB <= L1CounterB;
                         dataRecordB <= {1'b1,EAB,pixelIDB,TDCDataB};
                         L1StatusB <= L1BufFullB ? 2'b11 : (L1BufOverflowB ? 2'b10 : (L1BufHalfFullB ? 2'b01 : 2'b00));
                         if (eventStartVotedB)
                              begin
                                   dataTypeB <= header;
                                   SEUErrorB <= 1'b0;
                                   hitCountB <= 8'h00;
                              end
                         else
                              if (hitVotedB)
                                   begin
                                        dataTypeB <= data;
                                        SEUErrorB <= SEUErrorB|EAB[0] |EAB[1] ;
                                        hitCountB <= hitCountNextVotedB;
                                   end
                              else
                                   if (hitVotedB==1'b0&&(dataTypeVotedB==data||dataTypeVotedB==header))
                                        begin
                                             dataTypeB <= trailer;
                                        end
                                   else
                                        begin
                                             dataTypeB <= idle;
                                        end
                    end
     end

always @( posedge clkC )
     begin
          if (~resetC)
               begin
                    dataTypeC <= idle;
                    dataRecordC <= {40{1'b0}};
                    BCIDRegC <= 12'd0;
                    L1CounterRegC <= 8'd0;
                    L1StatusC <= 2'd0;
                    SEUErrorC <= 1'b0;
                    hitCountC <= 8'h00;
               end
          else
               if (!streamBufAlmostFullVotedC)
                    begin
                         BCIDRegC <= BCIDC;
                         L1CounterRegC <= L1CounterC;
                         dataRecordC <= {1'b1,EAC,pixelIDC,TDCDataC};
                         L1StatusC <= L1BufFullC ? 2'b11 : (L1BufOverflowC ? 2'b10 : (L1BufHalfFullC ? 2'b01 : 2'b00));
                         if (eventStartVotedC)
                              begin
                                   dataTypeC <= header;
                                   SEUErrorC <= 1'b0;
                                   hitCountC <= 8'h00;
                              end
                         else
                              if (hitVotedC)
                                   begin
                                        dataTypeC <= data;
                                        SEUErrorC <= SEUErrorC|EAC[0] |EAC[1] ;
                                        hitCountC <= hitCountNextVotedC;
                                   end
                              else
                                   if (hitVotedC==1'b0&&(dataTypeVotedC==data||dataTypeVotedC==header))
                                        begin
                                             dataTypeC <= trailer;
                                        end
                                   else
                                        begin
                                             dataTypeC <= idle;
                                        end
                    end
     end
wire [39:0] frameHeaderA;
wire [39:0] frameHeaderB;
wire [39:0] frameHeaderC;
wire [39:0] frameTrailerA;
wire [39:0] frameTrailerB;
wire [39:0] frameTrailerC;
reg  [7:0] CRCA;
reg  [7:0] CRCB;
reg  [7:0] CRCC;
wire [7:0] nextCRCA;
wire [7:0] nextCRCB;
wire [7:0] nextCRCC;
wire [7:0] finalCRCA;
wire [7:0] finalCRCB;
wire [7:0] finalCRCC;
assign frameHeaderA =  {16'h3C5C,2'b00,L1CounterRegA,typeA,BCIDA};
assign frameHeaderB =  {16'h3C5C,2'b00,L1CounterRegB,typeB,BCIDB};
assign frameHeaderC =  {16'h3C5C,2'b00,L1CounterRegC,typeC,BCIDC};
assign frameTrailerA =  {1'b0,chipIDA,L1StatusA,SEUErrorA,3'b000,hitCountA,finalCRCA};
assign frameTrailerB =  {1'b0,chipIDB,L1StatusB,SEUErrorB,3'b000,hitCountB,finalCRCB};
assign frameTrailerC =  {1'b0,chipIDC,L1StatusC,SEUErrorC,3'b000,hitCountC,finalCRCC};

always @( posedge clkA )
     begin
          if (~resetA)
               begin
                    dataFrameA <= {16'h3C5C,2'b10,22'h2AAAAA};
                    CRCA <= 8'h00;
               end
          else
               if (!streamBufAlmostFullVotedA)
                    begin
                         if (dataTypeVotedA==header)
                              begin
                                   dataFrameA <= frameHeaderA;
                                   CRCA <= nextCRCVotedA;
                              end
                         else
                              if (dataTypeVotedA==data)
                                   begin
                                        dataFrameA <= dataRecordVotedA;
                                        CRCA <= nextCRCVotedA;
                                   end
                              else
                                   if (dataTypeVotedA==trailer)
                                        begin
                                             CRCA <= 8'h00;
                                             dataFrameA <= frameTrailerVotedA;
                                        end
                                   else
                                        begin
                                             dataFrameA <= {16'h3C5C,2'b10,22'h2AAAAA};
                                        end
                    end
     end

always @( posedge clkB )
     begin
          if (~resetB)
               begin
                    dataFrameB <= {16'h3C5C,2'b10,22'h2AAAAA};
                    CRCB <= 8'h00;
               end
          else
               if (!streamBufAlmostFullVotedB)
                    begin
                         if (dataTypeVotedB==header)
                              begin
                                   dataFrameB <= frameHeaderB;
                                   CRCB <= nextCRCVotedB;
                              end
                         else
                              if (dataTypeVotedB==data)
                                   begin
                                        dataFrameB <= dataRecordVotedB;
                                        CRCB <= nextCRCVotedB;
                                   end
                              else
                                   if (dataTypeVotedB==trailer)
                                        begin
                                             CRCB <= 8'h00;
                                             dataFrameB <= frameTrailerVotedB;
                                        end
                                   else
                                        begin
                                             dataFrameB <= {16'h3C5C,2'b10,22'h2AAAAA};
                                        end
                    end
     end

always @( posedge clkC )
     begin
          if (~resetC)
               begin
                    dataFrameC <= {16'h3C5C,2'b10,22'h2AAAAA};
                    CRCC <= 8'h00;
               end
          else
               if (!streamBufAlmostFullVotedC)
                    begin
                         if (dataTypeVotedC==header)
                              begin
                                   dataFrameC <= frameHeaderC;
                                   CRCC <= nextCRCVotedC;
                              end
                         else
                              if (dataTypeVotedC==data)
                                   begin
                                        dataFrameC <= dataRecordVotedC;
                                        CRCC <= nextCRCVotedC;
                                   end
                              else
                                   if (dataTypeVotedC==trailer)
                                        begin
                                             CRCC <= 8'h00;
                                             dataFrameC <= frameTrailerVotedC;
                                        end
                                   else
                                        begin
                                             dataFrameC <= {16'h3C5C,2'b10,22'h2AAAAA};
                                        end
                    end
     end
wire enableCRC32A;
wire enableCRC32B;
wire enableCRC32C;
wire enableCRC40A;
wire enableCRC40B;
wire enableCRC40C;
assign enableCRC40A =  (dataTypeVotedA!=idle)&&(dataTypeVotedA!=trailer);
assign enableCRC40B =  (dataTypeVotedB!=idle)&&(dataTypeVotedB!=trailer);
assign enableCRC40C =  (dataTypeVotedC!=idle)&&(dataTypeVotedC!=trailer);
assign enableCRC32A =  (dataTypeVotedA==trailer);
assign enableCRC32B =  (dataTypeVotedB==trailer);
assign enableCRC32C =  (dataTypeVotedC==trailer);
wire [39:0] crcDataA;
wire [39:0] crcDataB;
wire [39:0] crcDataC;
assign crcDataA =  (dataTypeA==header) ? frameHeaderA : (dataTypeA==trailer ? frameTrailerA : dataRecordA);
assign crcDataB =  (dataTypeB==header) ? frameHeaderB : (dataTypeB==trailer ? frameTrailerB : dataRecordB);
assign crcDataC =  (dataTypeC==header) ? frameHeaderC : (dataTypeC==trailer ? frameTrailerC : dataRecordC);
wire disCRC32A =  ~enableCRC32A;
wire disCRC32B =  ~enableCRC32B;
wire disCRC32C =  ~enableCRC32C;
wire disCRC40A =  ~enableCRC40A;
wire disCRC40B =  ~enableCRC40B;
wire disCRC40C =  ~enableCRC40C;

CRC8TMR #(.WORDWIDTH(40)) CRCInst40 (
          .cinA(CRCA),
          .cinB(CRCB),
          .cinC(CRCC),
          .disA(disCRC40A),
          .disB(disCRC40B),
          .disC(disCRC40C),
          .dinA(crcDataA),
          .dinB(crcDataB),
          .dinC(crcDataC),
          .doutA(nextCRCA),
          .doutB(nextCRCB),
          .doutC(nextCRCC)
          );

CRC8TMR #(.WORDWIDTH(32)) CRCInst32 (
          .cinA(CRCA),
          .cinB(CRCB),
          .cinC(CRCC),
          .disA(disCRC32A),
          .disB(disCRC32B),
          .disC(disCRC32C),
          .dinA(crcDataA[39:8] ),
          .dinB(crcDataB[39:8] ),
          .dinC(crcDataC[39:8] ),
          .doutA(finalCRCA),
          .doutB(finalCRCB),
          .doutC(finalCRCC)
          );

majorityVoter #(.WIDTH(8)) nextCRCVoterA (
          .inA(nextCRCA),
          .inB(nextCRCB),
          .inC(nextCRCC),
          .out(nextCRCVotedA),
          .tmrErr(nextCRCTmrErrorA)
          );

majorityVoter hitVoterA (
          .inA(hitA),
          .inB(hitB),
          .inC(hitC),
          .out(hitVotedA),
          .tmrErr(hitTmrErrorA)
          );

majorityVoter eventStartVoterA (
          .inA(eventStartA),
          .inB(eventStartB),
          .inC(eventStartC),
          .out(eventStartVotedA),
          .tmrErr(eventStartTmrErrorA)
          );

majorityVoter streamBufAlmostFullVoterA (
          .inA(streamBufAlmostFullA),
          .inB(streamBufAlmostFullB),
          .inC(streamBufAlmostFullC),
          .out(streamBufAlmostFullVotedA),
          .tmrErr(streamBufAlmostFullTmrErrorA)
          );

majorityVoter #(.WIDTH(40)) frameTrailerVoterA (
          .inA(frameTrailerA),
          .inB(frameTrailerB),
          .inC(frameTrailerC),
          .out(frameTrailerVotedA),
          .tmrErr(frameTrailerTmrErrorA)
          );

majorityVoter #(.WIDTH(40)) dataRecordVoterA (
          .inA(dataRecordA),
          .inB(dataRecordB),
          .inC(dataRecordC),
          .out(dataRecordVotedA),
          .tmrErr(dataRecordTmrErrorA)
          );

majorityVoter #(.WIDTH(2)) dataTypeVoterA (
          .inA(dataTypeA),
          .inB(dataTypeB),
          .inC(dataTypeC),
          .out(dataTypeVotedA),
          .tmrErr(dataTypeTmrErrorA)
          );

majorityVoter #(.WIDTH(8)) hitCountNextVoterA (
          .inA(hitCountNextA),
          .inB(hitCountNextB),
          .inC(hitCountNextC),
          .out(hitCountNextVotedA),
          .tmrErr(hitCountNextTmrErrorA)
          );

majorityVoter #(.WIDTH(8)) nextCRCVoterB (
          .inA(nextCRCA),
          .inB(nextCRCB),
          .inC(nextCRCC),
          .out(nextCRCVotedB),
          .tmrErr(nextCRCTmrErrorB)
          );

majorityVoter eventStartVoterB (
          .inA(eventStartA),
          .inB(eventStartB),
          .inC(eventStartC),
          .out(eventStartVotedB),
          .tmrErr(eventStartTmrErrorB)
          );

majorityVoter hitVoterB (
          .inA(hitA),
          .inB(hitB),
          .inC(hitC),
          .out(hitVotedB),
          .tmrErr(hitTmrErrorB)
          );

majorityVoter streamBufAlmostFullVoterB (
          .inA(streamBufAlmostFullA),
          .inB(streamBufAlmostFullB),
          .inC(streamBufAlmostFullC),
          .out(streamBufAlmostFullVotedB),
          .tmrErr(streamBufAlmostFullTmrErrorB)
          );

majorityVoter #(.WIDTH(40)) frameTrailerVoterB (
          .inA(frameTrailerA),
          .inB(frameTrailerB),
          .inC(frameTrailerC),
          .out(frameTrailerVotedB),
          .tmrErr(frameTrailerTmrErrorB)
          );

majorityVoter #(.WIDTH(8)) hitCountNextVoterB (
          .inA(hitCountNextA),
          .inB(hitCountNextB),
          .inC(hitCountNextC),
          .out(hitCountNextVotedB),
          .tmrErr(hitCountNextTmrErrorB)
          );

majorityVoter #(.WIDTH(2)) dataTypeVoterB (
          .inA(dataTypeA),
          .inB(dataTypeB),
          .inC(dataTypeC),
          .out(dataTypeVotedB),
          .tmrErr(dataTypeTmrErrorB)
          );

majorityVoter #(.WIDTH(40)) dataRecordVoterB (
          .inA(dataRecordA),
          .inB(dataRecordB),
          .inC(dataRecordC),
          .out(dataRecordVotedB),
          .tmrErr(dataRecordTmrErrorB)
          );

majorityVoter #(.WIDTH(8)) nextCRCVoterC (
          .inA(nextCRCA),
          .inB(nextCRCB),
          .inC(nextCRCC),
          .out(nextCRCVotedC),
          .tmrErr(nextCRCTmrErrorC)
          );

majorityVoter eventStartVoterC (
          .inA(eventStartA),
          .inB(eventStartB),
          .inC(eventStartC),
          .out(eventStartVotedC),
          .tmrErr(eventStartTmrErrorC)
          );

majorityVoter hitVoterC (
          .inA(hitA),
          .inB(hitB),
          .inC(hitC),
          .out(hitVotedC),
          .tmrErr(hitTmrErrorC)
          );

majorityVoter streamBufAlmostFullVoterC (
          .inA(streamBufAlmostFullA),
          .inB(streamBufAlmostFullB),
          .inC(streamBufAlmostFullC),
          .out(streamBufAlmostFullVotedC),
          .tmrErr(streamBufAlmostFullTmrErrorC)
          );

majorityVoter #(.WIDTH(40)) frameTrailerVoterC (
          .inA(frameTrailerA),
          .inB(frameTrailerB),
          .inC(frameTrailerC),
          .out(frameTrailerVotedC),
          .tmrErr(frameTrailerTmrErrorC)
          );

majorityVoter #(.WIDTH(8)) hitCountNextVoterC (
          .inA(hitCountNextA),
          .inB(hitCountNextB),
          .inC(hitCountNextC),
          .out(hitCountNextVotedC),
          .tmrErr(hitCountNextTmrErrorC)
          );

majorityVoter #(.WIDTH(40)) dataRecordVoterC (
          .inA(dataRecordA),
          .inB(dataRecordB),
          .inC(dataRecordC),
          .out(dataRecordVotedC),
          .tmrErr(dataRecordTmrErrorC)
          );

majorityVoter #(.WIDTH(2)) dataTypeVoterC (
          .inA(dataTypeA),
          .inB(dataTypeB),
          .inC(dataTypeC),
          .out(dataTypeVotedC),
          .tmrErr(dataTypeTmrErrorC)
          );
endmodule

