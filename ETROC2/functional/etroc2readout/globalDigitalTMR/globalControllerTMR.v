/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalControllerTMR.v                                                                *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 19/06/2022 00:09:47                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout/tmpTMR *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg ../globalController.v *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: ../globalController.v                                                                  *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-06-18 23:47:40.032413                                         *
 *           File Size         : 15273                                                              *
 *           MD5 hash          : a447b405e1d459fbd9a5de4993e67f2c                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 1ps

module globalControllerTMR(
  input  clk40RefA,
  input  clk40RefB,
  input  clk40RefC,
  input  PORA,
  input  PORB,
  input  PORC,
  input  softBootA,
  input  softBootB,
  input  softBootC,
  input  disPowerSequenceA,
  input  disPowerSequenceB,
  input  disPowerSequenceC,
  input [9:0] decodedFastcommandA,
  input [9:0] decodedFastcommandB,
  input [9:0] decodedFastcommandC,
  input  pllCalibrationDoneA,
  input  pllCalibrationDoneB,
  input  pllCalibrationDoneC,
  input  pllLockedA,
  input  pllLockedB,
  input  pllLockedC,
  input  fastcommandAlignedA,
  input  fastcommandAlignedB,
  input  fastcommandAlignedC,
  input  invalidFastcommandA,
  input  invalidFastcommandB,
  input  invalidFastcommandC,
  input  fcSelfAlignA,
  input  fcSelfAlignB,
  input  fcSelfAlignC,
  output reg  fcL1AA,
  output reg  fcL1AB,
  output reg  fcL1AC,
  output reg  fcL1ARstA,
  output reg  fcL1ARstB,
  output reg  fcL1ARstC,
  output reg  fcBCRA,
  output reg  fcBCRB,
  output reg  fcBCRC,
  output reg  fcWSStartA,
  output reg  fcWSStartB,
  output reg  fcWSStartC,
  output reg  fcWSStopA,
  output reg  fcWSStopB,
  output reg  fcWSStopC,
  output reg  fcChargeInjCmdA,
  output reg  fcChargeInjCmdB,
  output reg  fcChargeInjCmdC,
  output reg [3:0] stateA,
  output reg [3:0] stateB,
  output reg [3:0] stateC,
  output reg [11:0] pllUnlockCountA,
  output reg [11:0] pllUnlockCountB,
  output reg [11:0] pllUnlockCountC,
  output reg [11:0] invalidFCCountA,
  output reg [11:0] invalidFCCountB,
  output reg [11:0] invalidFCCountC,
  input  asyLinkResetA,
  input  asyLinkResetB,
  input  asyLinkResetC,
  output reg  synLinkResetA,
  output reg  synLinkResetB,
  output reg  synLinkResetC,
  input  asyPLLResetA,
  input  asyPLLResetB,
  input  asyPLLResetC,
  output reg  synPLLResetA,
  output reg  synPLLResetB,
  output reg  synPLLResetC,
  input  asyAlignFastcommandA,
  input  asyAlignFastcommandB,
  input  asyAlignFastcommandC,
  output reg  synAlignFastcommandA,
  output reg  synAlignFastcommandB,
  output reg  synAlignFastcommandC,
  input  asyStartCalibrationA,
  input  asyStartCalibrationB,
  input  asyStartCalibrationC,
  output reg  synStartCalibrationA,
  output reg  synStartCalibrationB,
  output reg  synStartCalibrationC,
  input  asyResetFastcommandA,
  input  asyResetFastcommandB,
  input  asyResetFastcommandC,
  output reg  synResetFastcommandA,
  output reg  synResetFastcommandB,
  output reg  synResetFastcommandC,
  input  asyResetLockDetectA,
  input  asyResetLockDetectB,
  input  asyResetLockDetectC,
  output reg  synResetLockdetectA,
  output reg  synResetLockdetectB,
  output reg  synResetLockdetectC,
  input  asyResetGlobalReadoutA,
  input  asyResetGlobalReadoutB,
  input  asyResetGlobalReadoutC,
  output reg  synResetGlobalReadoutA,
  output reg  synResetGlobalReadoutB,
  output reg  synResetGlobalReadoutC,
  input  asyResetChargeInjA,
  input  asyResetChargeInjB,
  input  asyResetChargeInjC,
  output reg  synResetChargeInjA,
  output reg  synResetChargeInjB,
  output reg  synResetChargeInjC
);
localparam    smINIT0=4'd0;
localparam    smINIT1=4'd1;
localparam    smRESETPLL0=4'd2;
localparam    smRESETPLL1=4'd3;
localparam    smPLLCAL0=4'd4;
localparam    smPLLCAL1=4'd5;
localparam    smPLLCAL2=4'd6;
localparam    smLOCKDETECT=4'd7;
localparam    smRESETFC0=4'd8;
localparam    smRESETFC1=4'd9;
localparam    smINITFC=4'd10;
localparam    smDONE=4'd11;
wor stateTmrErrorC;
wire [3:0] stateVotedC;
wor bootupTmrErrorC;
wire bootupVotedC;
wor nextUnlockCountTmrErrorC;
wire [11:0] nextUnlockCountVotedC;
wor invalidFastcommandTmrErrorC;
wire invalidFastcommandVotedC;
wor nextInvalidFCCountTmrErrorC;
wire [11:0] nextInvalidFCCountVotedC;
wor nextStateTmrErrorC;
wire [3:0] nextStateVotedC;
wor stateTmrErrorB;
wire [3:0] stateVotedB;
wor bootupTmrErrorB;
wire bootupVotedB;
wor nextUnlockCountTmrErrorB;
wire [11:0] nextUnlockCountVotedB;
wor invalidFastcommandTmrErrorB;
wire invalidFastcommandVotedB;
wor nextInvalidFCCountTmrErrorB;
wire [11:0] nextInvalidFCCountVotedB;
wor nextStateTmrErrorB;
wire [3:0] nextStateVotedB;
wor stateTmrErrorA;
wire [3:0] stateVotedA;
wor bootupTmrErrorA;
wire bootupVotedA;
wor nextUnlockCountTmrErrorA;
wire [11:0] nextUnlockCountVotedA;
wor invalidFastcommandTmrErrorA;
wire invalidFastcommandVotedA;
wor nextStateTmrErrorA;
wire [3:0] nextStateVotedA;
wor nextInvalidFCCountTmrErrorA;
wire [11:0] nextInvalidFCCountVotedA;
reg  [3:0] nextStateA;
reg  [3:0] nextStateB;
reg  [3:0] nextStateC;
wire bootA =  PORA|softBootA;
wire bootB =  PORB|softBootB;
wire bootC =  PORC|softBootC;
reg  [2:0] bootRegA;
reg  [2:0] bootRegB;
reg  [2:0] bootRegC;
reg  [2:0] pllLocked_regA;
reg  [2:0] pllLocked_regB;
reg  [2:0] pllLocked_regC;

always @( negedge clk40RefA )
  begin
    bootRegA <= {bootRegA[1:0] ,bootA};
    pllLocked_regA <= {pllLocked_regA[1:0] ,pllLockedA};
  end

always @( negedge clk40RefB )
  begin
    bootRegB <= {bootRegB[1:0] ,bootB};
    pllLocked_regB <= {pllLocked_regB[1:0] ,pllLockedB};
  end

always @( negedge clk40RefC )
  begin
    bootRegC <= {bootRegC[1:0] ,bootC};
    pllLocked_regC <= {pllLocked_regC[1:0] ,pllLockedC};
  end
wire pllLocked_fallingEdgeA =  pllLocked_regA[2] &~pllLocked_regA[1] ;
wire pllLocked_fallingEdgeB =  pllLocked_regB[2] &~pllLocked_regB[1] ;
wire pllLocked_fallingEdgeC =  pllLocked_regC[2] &~pllLocked_regC[1] ;
reg  [1:0] asyAlignFastcommandRegA;
reg  [1:0] asyAlignFastcommandRegB;
reg  [1:0] asyAlignFastcommandRegC;
reg  [1:0] asyLinkResetRegA;
reg  [1:0] asyLinkResetRegB;
reg  [1:0] asyLinkResetRegC;
reg  [1:0] asyStartCalibrationRegA;
reg  [1:0] asyStartCalibrationRegB;
reg  [1:0] asyStartCalibrationRegC;
reg  [1:0] asyResetFastcommandRegA;
reg  [1:0] asyResetFastcommandRegB;
reg  [1:0] asyResetFastcommandRegC;
reg  [1:0] asyResetLockDetectRegA;
reg  [1:0] asyResetLockDetectRegB;
reg  [1:0] asyResetLockDetectRegC;
reg  [1:0] asyResetGlobalReadoutRegA;
reg  [1:0] asyResetGlobalReadoutRegB;
reg  [1:0] asyResetGlobalReadoutRegC;
reg  [1:0] asyResetChargeInjRegA;
reg  [1:0] asyResetChargeInjRegB;
reg  [1:0] asyResetChargeInjRegC;
reg  [1:0] asyPLLResetRegA;
reg  [1:0] asyPLLResetRegB;
reg  [1:0] asyPLLResetRegC;
reg  [11:0] nextUnlockCountA;
reg  [11:0] nextUnlockCountB;
reg  [11:0] nextUnlockCountC;
reg  [11:0] nextInvalidFCCountA;
reg  [11:0] nextInvalidFCCountB;
reg  [11:0] nextInvalidFCCountC;

always @*
  begin
    case (stateVotedA)
      smINIT0 : 
        begin
          synPLLResetA <= 1'b1;
          synStartCalibrationA <= 1'b0;
          synResetLockdetectA <= 1'b0;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b0;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= 12'd0;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : smINIT1;
        end
      smINIT1 : 
        begin
          synPLLResetA <= 1'b1;
          synStartCalibrationA <= 1'b0;
          synResetLockdetectA <= 1'b0;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b0;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= 12'd0;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : smRESETPLL0;
        end
      smRESETPLL0 : 
        begin
          synPLLResetA <= 1'b0;
          synStartCalibrationA <= 1'b0;
          synResetLockdetectA <= 1'b0;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b0;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= 12'd0;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : smRESETPLL1;
        end
      smRESETPLL1 : 
        begin
          synPLLResetA <= 1'b0;
          synStartCalibrationA <= 1'b0;
          synResetLockdetectA <= 1'b0;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b0;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= 12'd0;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : smPLLCAL0;
        end
      smPLLCAL0 : 
        begin
          synPLLResetA <= 1'b0;
          synStartCalibrationA <= 1'b1;
          synResetLockdetectA <= 1'b0;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b0;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= 12'd0;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : smPLLCAL1;
        end
      smPLLCAL1 : 
        begin
          synPLLResetA <= 1'b0;
          synStartCalibrationA <= 1'b1;
          synResetLockdetectA <= 1'b0;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b0;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= 12'd0;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : smPLLCAL2;
        end
      smPLLCAL2 : 
        begin
          synPLLResetA <= 1'b0;
          synStartCalibrationA <= 1'b1;
          synResetLockdetectA <= 1'b0;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b0;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= 12'd0;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : (pllCalibrationDoneA ? smLOCKDETECT : smPLLCAL2);
        end
      smLOCKDETECT : 
        begin
          synPLLResetA <= 1'b0;
          synStartCalibrationA <= 1'b1;
          synResetLockdetectA <= 1'b1;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b0;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= 12'd0;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : (pllLockedA ? smRESETFC0 : smLOCKDETECT);
        end
      smRESETFC0 : 
        begin
          synPLLResetA <= 1'b0;
          synStartCalibrationA <= 1'b1;
          synResetLockdetectA <= 1'b1;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b1;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= pllLocked_fallingEdgeA ? pllUnlockCountA+1 : pllUnlockCountA;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : smRESETFC1;
        end
      smRESETFC1 : 
        begin
          synPLLResetA <= 1'b0;
          synStartCalibrationA <= 1'b1;
          synResetLockdetectA <= 1'b1;
          synAlignFastcommandA <= 1'b0;
          synResetFastcommandA <= 1'b1;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b1;
          nextUnlockCountA <= pllLocked_fallingEdgeA ? pllUnlockCountA+1 : pllUnlockCountA;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= disPowerSequenceA ? smDONE : smINITFC;
        end
      smINITFC : 
        begin
          synPLLResetA <= 1'b0;
          synStartCalibrationA <= 1'b1;
          synResetLockdetectA <= 1'b1;
          synAlignFastcommandA <= fcSelfAlignA ? 1'b1 : 1'b0;
          synResetFastcommandA <= 1'b1;
          synResetGlobalReadoutA <= 1'b0;
          synResetChargeInjA <= 1'b0;
          nextUnlockCountA <= pllLocked_fallingEdgeA ? pllUnlockCountA+1 : pllUnlockCountA;
          nextInvalidFCCountA <= 12'd0;
          nextStateA <= (disPowerSequenceA|~fcSelfAlignA) ? smDONE : (fastcommandAlignedA ? smDONE : smINITFC);
        end
      smDONE : 
        begin
          synPLLResetA <= ~asyPLLResetRegA[1] ;
          synStartCalibrationA <= asyStartCalibrationRegA[1] ;
          synResetLockdetectA <= asyResetLockDetectRegA[1] ;
          synAlignFastcommandA <= asyAlignFastcommandRegA[1] ;
          synResetFastcommandA <= asyResetFastcommandRegA[1] ;
          synResetGlobalReadoutA <= asyResetGlobalReadoutRegA[1] ;
          synResetChargeInjA <= asyResetChargeInjRegA[1] ;
          nextUnlockCountA <= pllLocked_fallingEdgeA ? pllUnlockCountA+1 : pllUnlockCountA;
          nextInvalidFCCountA <= invalidFastcommandVotedA ? invalidFCCountA+1 : invalidFCCountA;
          nextStateA <= smDONE;
        end
      default : 
        begin
          synPLLResetA <= ~asyPLLResetRegA[1] ;
          synStartCalibrationA <= asyStartCalibrationRegA[1] ;
          synResetLockdetectA <= asyResetLockDetectRegA[1] ;
          synAlignFastcommandA <= asyAlignFastcommandRegA[1] ;
          synResetFastcommandA <= asyResetFastcommandRegA[1] ;
          synResetGlobalReadoutA <= asyResetGlobalReadoutRegA[1] ;
          synResetChargeInjA <= asyResetChargeInjRegA[1] ;
          nextUnlockCountA <= pllLocked_fallingEdgeA ? pllUnlockCountA+1 : pllUnlockCountA;
          nextInvalidFCCountA <= invalidFastcommandVotedA ? invalidFCCountA+1 : invalidFCCountA;
          nextStateA <= smDONE;
        end
    endcase
  end

always @*
  begin
    case (stateVotedB)
      smINIT0 : 
        begin
          synPLLResetB <= 1'b1;
          synStartCalibrationB <= 1'b0;
          synResetLockdetectB <= 1'b0;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b0;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= 12'd0;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : smINIT1;
        end
      smINIT1 : 
        begin
          synPLLResetB <= 1'b1;
          synStartCalibrationB <= 1'b0;
          synResetLockdetectB <= 1'b0;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b0;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= 12'd0;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : smRESETPLL0;
        end
      smRESETPLL0 : 
        begin
          synPLLResetB <= 1'b0;
          synStartCalibrationB <= 1'b0;
          synResetLockdetectB <= 1'b0;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b0;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= 12'd0;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : smRESETPLL1;
        end
      smRESETPLL1 : 
        begin
          synPLLResetB <= 1'b0;
          synStartCalibrationB <= 1'b0;
          synResetLockdetectB <= 1'b0;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b0;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= 12'd0;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : smPLLCAL0;
        end
      smPLLCAL0 : 
        begin
          synPLLResetB <= 1'b0;
          synStartCalibrationB <= 1'b1;
          synResetLockdetectB <= 1'b0;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b0;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= 12'd0;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : smPLLCAL1;
        end
      smPLLCAL1 : 
        begin
          synPLLResetB <= 1'b0;
          synStartCalibrationB <= 1'b1;
          synResetLockdetectB <= 1'b0;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b0;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= 12'd0;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : smPLLCAL2;
        end
      smPLLCAL2 : 
        begin
          synPLLResetB <= 1'b0;
          synStartCalibrationB <= 1'b1;
          synResetLockdetectB <= 1'b0;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b0;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= 12'd0;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : (pllCalibrationDoneB ? smLOCKDETECT : smPLLCAL2);
        end
      smLOCKDETECT : 
        begin
          synPLLResetB <= 1'b0;
          synStartCalibrationB <= 1'b1;
          synResetLockdetectB <= 1'b1;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b0;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= 12'd0;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : (pllLockedB ? smRESETFC0 : smLOCKDETECT);
        end
      smRESETFC0 : 
        begin
          synPLLResetB <= 1'b0;
          synStartCalibrationB <= 1'b1;
          synResetLockdetectB <= 1'b1;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b1;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= pllLocked_fallingEdgeB ? pllUnlockCountB+1 : pllUnlockCountB;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : smRESETFC1;
        end
      smRESETFC1 : 
        begin
          synPLLResetB <= 1'b0;
          synStartCalibrationB <= 1'b1;
          synResetLockdetectB <= 1'b1;
          synAlignFastcommandB <= 1'b0;
          synResetFastcommandB <= 1'b1;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b1;
          nextUnlockCountB <= pllLocked_fallingEdgeB ? pllUnlockCountB+1 : pllUnlockCountB;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= disPowerSequenceB ? smDONE : smINITFC;
        end
      smINITFC : 
        begin
          synPLLResetB <= 1'b0;
          synStartCalibrationB <= 1'b1;
          synResetLockdetectB <= 1'b1;
          synAlignFastcommandB <= fcSelfAlignB ? 1'b1 : 1'b0;
          synResetFastcommandB <= 1'b1;
          synResetGlobalReadoutB <= 1'b0;
          synResetChargeInjB <= 1'b0;
          nextUnlockCountB <= pllLocked_fallingEdgeB ? pllUnlockCountB+1 : pllUnlockCountB;
          nextInvalidFCCountB <= 12'd0;
          nextStateB <= (disPowerSequenceB|~fcSelfAlignB) ? smDONE : (fastcommandAlignedB ? smDONE : smINITFC);
        end
      smDONE : 
        begin
          synPLLResetB <= ~asyPLLResetRegB[1] ;
          synStartCalibrationB <= asyStartCalibrationRegB[1] ;
          synResetLockdetectB <= asyResetLockDetectRegB[1] ;
          synAlignFastcommandB <= asyAlignFastcommandRegB[1] ;
          synResetFastcommandB <= asyResetFastcommandRegB[1] ;
          synResetGlobalReadoutB <= asyResetGlobalReadoutRegB[1] ;
          synResetChargeInjB <= asyResetChargeInjRegB[1] ;
          nextUnlockCountB <= pllLocked_fallingEdgeB ? pllUnlockCountB+1 : pllUnlockCountB;
          nextInvalidFCCountB <= invalidFastcommandVotedB ? invalidFCCountB+1 : invalidFCCountB;
          nextStateB <= smDONE;
        end
      default : 
        begin
          synPLLResetB <= ~asyPLLResetRegB[1] ;
          synStartCalibrationB <= asyStartCalibrationRegB[1] ;
          synResetLockdetectB <= asyResetLockDetectRegB[1] ;
          synAlignFastcommandB <= asyAlignFastcommandRegB[1] ;
          synResetFastcommandB <= asyResetFastcommandRegB[1] ;
          synResetGlobalReadoutB <= asyResetGlobalReadoutRegB[1] ;
          synResetChargeInjB <= asyResetChargeInjRegB[1] ;
          nextUnlockCountB <= pllLocked_fallingEdgeB ? pllUnlockCountB+1 : pllUnlockCountB;
          nextInvalidFCCountB <= invalidFastcommandVotedB ? invalidFCCountB+1 : invalidFCCountB;
          nextStateB <= smDONE;
        end
    endcase
  end

always @*
  begin
    case (stateVotedC)
      smINIT0 : 
        begin
          synPLLResetC <= 1'b1;
          synStartCalibrationC <= 1'b0;
          synResetLockdetectC <= 1'b0;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b0;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= 12'd0;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : smINIT1;
        end
      smINIT1 : 
        begin
          synPLLResetC <= 1'b1;
          synStartCalibrationC <= 1'b0;
          synResetLockdetectC <= 1'b0;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b0;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= 12'd0;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : smRESETPLL0;
        end
      smRESETPLL0 : 
        begin
          synPLLResetC <= 1'b0;
          synStartCalibrationC <= 1'b0;
          synResetLockdetectC <= 1'b0;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b0;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= 12'd0;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : smRESETPLL1;
        end
      smRESETPLL1 : 
        begin
          synPLLResetC <= 1'b0;
          synStartCalibrationC <= 1'b0;
          synResetLockdetectC <= 1'b0;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b0;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= 12'd0;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : smPLLCAL0;
        end
      smPLLCAL0 : 
        begin
          synPLLResetC <= 1'b0;
          synStartCalibrationC <= 1'b1;
          synResetLockdetectC <= 1'b0;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b0;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= 12'd0;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : smPLLCAL1;
        end
      smPLLCAL1 : 
        begin
          synPLLResetC <= 1'b0;
          synStartCalibrationC <= 1'b1;
          synResetLockdetectC <= 1'b0;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b0;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= 12'd0;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : smPLLCAL2;
        end
      smPLLCAL2 : 
        begin
          synPLLResetC <= 1'b0;
          synStartCalibrationC <= 1'b1;
          synResetLockdetectC <= 1'b0;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b0;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= 12'd0;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : (pllCalibrationDoneC ? smLOCKDETECT : smPLLCAL2);
        end
      smLOCKDETECT : 
        begin
          synPLLResetC <= 1'b0;
          synStartCalibrationC <= 1'b1;
          synResetLockdetectC <= 1'b1;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b0;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= 12'd0;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : (pllLockedC ? smRESETFC0 : smLOCKDETECT);
        end
      smRESETFC0 : 
        begin
          synPLLResetC <= 1'b0;
          synStartCalibrationC <= 1'b1;
          synResetLockdetectC <= 1'b1;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b1;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= pllLocked_fallingEdgeC ? pllUnlockCountC+1 : pllUnlockCountC;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : smRESETFC1;
        end
      smRESETFC1 : 
        begin
          synPLLResetC <= 1'b0;
          synStartCalibrationC <= 1'b1;
          synResetLockdetectC <= 1'b1;
          synAlignFastcommandC <= 1'b0;
          synResetFastcommandC <= 1'b1;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b1;
          nextUnlockCountC <= pllLocked_fallingEdgeC ? pllUnlockCountC+1 : pllUnlockCountC;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= disPowerSequenceC ? smDONE : smINITFC;
        end
      smINITFC : 
        begin
          synPLLResetC <= 1'b0;
          synStartCalibrationC <= 1'b1;
          synResetLockdetectC <= 1'b1;
          synAlignFastcommandC <= fcSelfAlignC ? 1'b1 : 1'b0;
          synResetFastcommandC <= 1'b1;
          synResetGlobalReadoutC <= 1'b0;
          synResetChargeInjC <= 1'b0;
          nextUnlockCountC <= pllLocked_fallingEdgeC ? pllUnlockCountC+1 : pllUnlockCountC;
          nextInvalidFCCountC <= 12'd0;
          nextStateC <= (disPowerSequenceC|~fcSelfAlignC) ? smDONE : (fastcommandAlignedC ? smDONE : smINITFC);
        end
      smDONE : 
        begin
          synPLLResetC <= ~asyPLLResetRegC[1] ;
          synStartCalibrationC <= asyStartCalibrationRegC[1] ;
          synResetLockdetectC <= asyResetLockDetectRegC[1] ;
          synAlignFastcommandC <= asyAlignFastcommandRegC[1] ;
          synResetFastcommandC <= asyResetFastcommandRegC[1] ;
          synResetGlobalReadoutC <= asyResetGlobalReadoutRegC[1] ;
          synResetChargeInjC <= asyResetChargeInjRegC[1] ;
          nextUnlockCountC <= pllLocked_fallingEdgeC ? pllUnlockCountC+1 : pllUnlockCountC;
          nextInvalidFCCountC <= invalidFastcommandVotedC ? invalidFCCountC+1 : invalidFCCountC;
          nextStateC <= smDONE;
        end
      default : 
        begin
          synPLLResetC <= ~asyPLLResetRegC[1] ;
          synStartCalibrationC <= asyStartCalibrationRegC[1] ;
          synResetLockdetectC <= asyResetLockDetectRegC[1] ;
          synAlignFastcommandC <= asyAlignFastcommandRegC[1] ;
          synResetFastcommandC <= asyResetFastcommandRegC[1] ;
          synResetGlobalReadoutC <= asyResetGlobalReadoutRegC[1] ;
          synResetChargeInjC <= asyResetChargeInjRegC[1] ;
          nextUnlockCountC <= pllLocked_fallingEdgeC ? pllUnlockCountC+1 : pllUnlockCountC;
          nextInvalidFCCountC <= invalidFastcommandVotedC ? invalidFCCountC+1 : invalidFCCountC;
          nextStateC <= smDONE;
        end
    endcase
  end
wire bootupA =  bootRegA[2] ;
wire bootupB =  bootRegB[2] ;
wire bootupC =  bootRegC[2] ;

always @( negedge clk40RefA )
  begin
    if (bootupVotedA)
      begin
        stateA <= smINIT0;
        pllUnlockCountA <= 12'd0;
        invalidFCCountA <= 12'd0;
      end
    else
      begin
        stateA <= nextStateVotedA;
        asyPLLResetRegA <= {asyPLLResetRegA[0] ,asyPLLResetA};
        asyLinkResetRegA <= {asyLinkResetRegA[0] ,asyLinkResetA};
        asyAlignFastcommandRegA <= {asyAlignFastcommandRegA[0] ,asyAlignFastcommandA};
        asyStartCalibrationRegA <= {asyStartCalibrationRegA[0] ,asyStartCalibrationA};
        asyResetFastcommandRegA <= {asyResetFastcommandRegA[0] ,asyResetFastcommandA};
        asyResetLockDetectRegA <= {asyResetLockDetectRegA[0] ,asyResetLockDetectA};
        asyResetGlobalReadoutRegA <= {asyResetGlobalReadoutRegA[0] ,asyResetGlobalReadoutA};
        asyResetChargeInjRegA <= {asyResetChargeInjRegA[0] ,asyResetChargeInjA};
        pllUnlockCountA <= nextUnlockCountVotedA;
        invalidFCCountA <= nextInvalidFCCountVotedA;
      end
  end

always @( negedge clk40RefB )
  begin
    if (bootupVotedB)
      begin
        stateB <= smINIT0;
        pllUnlockCountB <= 12'd0;
        invalidFCCountB <= 12'd0;
      end
    else
      begin
        stateB <= nextStateVotedB;
        asyPLLResetRegB <= {asyPLLResetRegB[0] ,asyPLLResetB};
        asyLinkResetRegB <= {asyLinkResetRegB[0] ,asyLinkResetB};
        asyAlignFastcommandRegB <= {asyAlignFastcommandRegB[0] ,asyAlignFastcommandB};
        asyStartCalibrationRegB <= {asyStartCalibrationRegB[0] ,asyStartCalibrationB};
        asyResetFastcommandRegB <= {asyResetFastcommandRegB[0] ,asyResetFastcommandB};
        asyResetLockDetectRegB <= {asyResetLockDetectRegB[0] ,asyResetLockDetectB};
        asyResetGlobalReadoutRegB <= {asyResetGlobalReadoutRegB[0] ,asyResetGlobalReadoutB};
        asyResetChargeInjRegB <= {asyResetChargeInjRegB[0] ,asyResetChargeInjB};
        pllUnlockCountB <= nextUnlockCountVotedB;
        invalidFCCountB <= nextInvalidFCCountVotedB;
      end
  end

always @( negedge clk40RefC )
  begin
    if (bootupVotedC)
      begin
        stateC <= smINIT0;
        pllUnlockCountC <= 12'd0;
        invalidFCCountC <= 12'd0;
      end
    else
      begin
        stateC <= nextStateVotedC;
        asyPLLResetRegC <= {asyPLLResetRegC[0] ,asyPLLResetC};
        asyLinkResetRegC <= {asyLinkResetRegC[0] ,asyLinkResetC};
        asyAlignFastcommandRegC <= {asyAlignFastcommandRegC[0] ,asyAlignFastcommandC};
        asyStartCalibrationRegC <= {asyStartCalibrationRegC[0] ,asyStartCalibrationC};
        asyResetFastcommandRegC <= {asyResetFastcommandRegC[0] ,asyResetFastcommandC};
        asyResetLockDetectRegC <= {asyResetLockDetectRegC[0] ,asyResetLockDetectC};
        asyResetGlobalReadoutRegC <= {asyResetGlobalReadoutRegC[0] ,asyResetGlobalReadoutC};
        asyResetChargeInjRegC <= {asyResetChargeInjRegC[0] ,asyResetChargeInjC};
        pllUnlockCountC <= nextUnlockCountVotedC;
        invalidFCCountC <= nextInvalidFCCountVotedC;
      end
  end

always @( posedge clk40RefA )
  begin
    fcBCRA <= decodedFastcommandA[2] |decodedFastcommandA[7] ;
    fcL1ARstA <= decodedFastcommandA[4] ;
    fcL1AA <= decodedFastcommandA[6] |decodedFastcommandA[7] ;
    fcChargeInjCmdA <= decodedFastcommandA[5] ;
    fcWSStartA <= decodedFastcommandA[8] ;
    fcWSStopA <= decodedFastcommandA[9] ;
    synLinkResetA <= decodedFastcommandA[1] |asyLinkResetRegA[1] ;
  end

always @( posedge clk40RefB )
  begin
    fcBCRB <= decodedFastcommandB[2] |decodedFastcommandB[7] ;
    fcL1ARstB <= decodedFastcommandB[4] ;
    fcL1AB <= decodedFastcommandB[6] |decodedFastcommandB[7] ;
    fcChargeInjCmdB <= decodedFastcommandB[5] ;
    fcWSStartB <= decodedFastcommandB[8] ;
    fcWSStopB <= decodedFastcommandB[9] ;
    synLinkResetB <= decodedFastcommandB[1] |asyLinkResetRegB[1] ;
  end

always @( posedge clk40RefC )
  begin
    fcBCRC <= decodedFastcommandC[2] |decodedFastcommandC[7] ;
    fcL1ARstC <= decodedFastcommandC[4] ;
    fcL1AC <= decodedFastcommandC[6] |decodedFastcommandC[7] ;
    fcChargeInjCmdC <= decodedFastcommandC[5] ;
    fcWSStartC <= decodedFastcommandC[8] ;
    fcWSStopC <= decodedFastcommandC[9] ;
    synLinkResetC <= decodedFastcommandC[1] |asyLinkResetRegC[1] ;
  end

majorityVoter #(.WIDTH(12)) nextInvalidFCCountVoterA (
    .inA(nextInvalidFCCountA),
    .inB(nextInvalidFCCountB),
    .inC(nextInvalidFCCountC),
    .out(nextInvalidFCCountVotedA),
    .tmrErr(nextInvalidFCCountTmrErrorA)
    );

majorityVoter #(.WIDTH(4)) nextStateVoterA (
    .inA(nextStateA),
    .inB(nextStateB),
    .inC(nextStateC),
    .out(nextStateVotedA),
    .tmrErr(nextStateTmrErrorA)
    );

majorityVoter invalidFastcommandVoterA (
    .inA(invalidFastcommandA),
    .inB(invalidFastcommandB),
    .inC(invalidFastcommandC),
    .out(invalidFastcommandVotedA),
    .tmrErr(invalidFastcommandTmrErrorA)
    );

majorityVoter #(.WIDTH(12)) nextUnlockCountVoterA (
    .inA(nextUnlockCountA),
    .inB(nextUnlockCountB),
    .inC(nextUnlockCountC),
    .out(nextUnlockCountVotedA),
    .tmrErr(nextUnlockCountTmrErrorA)
    );

majorityVoter bootupVoterA (
    .inA(bootupA),
    .inB(bootupB),
    .inC(bootupC),
    .out(bootupVotedA),
    .tmrErr(bootupTmrErrorA)
    );

majorityVoter #(.WIDTH(4)) stateVoterA (
    .inA(stateA),
    .inB(stateB),
    .inC(stateC),
    .out(stateVotedA),
    .tmrErr(stateTmrErrorA)
    );

majorityVoter #(.WIDTH(4)) nextStateVoterB (
    .inA(nextStateA),
    .inB(nextStateB),
    .inC(nextStateC),
    .out(nextStateVotedB),
    .tmrErr(nextStateTmrErrorB)
    );

majorityVoter #(.WIDTH(12)) nextInvalidFCCountVoterB (
    .inA(nextInvalidFCCountA),
    .inB(nextInvalidFCCountB),
    .inC(nextInvalidFCCountC),
    .out(nextInvalidFCCountVotedB),
    .tmrErr(nextInvalidFCCountTmrErrorB)
    );

majorityVoter invalidFastcommandVoterB (
    .inA(invalidFastcommandA),
    .inB(invalidFastcommandB),
    .inC(invalidFastcommandC),
    .out(invalidFastcommandVotedB),
    .tmrErr(invalidFastcommandTmrErrorB)
    );

majorityVoter #(.WIDTH(12)) nextUnlockCountVoterB (
    .inA(nextUnlockCountA),
    .inB(nextUnlockCountB),
    .inC(nextUnlockCountC),
    .out(nextUnlockCountVotedB),
    .tmrErr(nextUnlockCountTmrErrorB)
    );

majorityVoter bootupVoterB (
    .inA(bootupA),
    .inB(bootupB),
    .inC(bootupC),
    .out(bootupVotedB),
    .tmrErr(bootupTmrErrorB)
    );

majorityVoter #(.WIDTH(4)) stateVoterB (
    .inA(stateA),
    .inB(stateB),
    .inC(stateC),
    .out(stateVotedB),
    .tmrErr(stateTmrErrorB)
    );

majorityVoter #(.WIDTH(4)) nextStateVoterC (
    .inA(nextStateA),
    .inB(nextStateB),
    .inC(nextStateC),
    .out(nextStateVotedC),
    .tmrErr(nextStateTmrErrorC)
    );

majorityVoter #(.WIDTH(12)) nextInvalidFCCountVoterC (
    .inA(nextInvalidFCCountA),
    .inB(nextInvalidFCCountB),
    .inC(nextInvalidFCCountC),
    .out(nextInvalidFCCountVotedC),
    .tmrErr(nextInvalidFCCountTmrErrorC)
    );

majorityVoter invalidFastcommandVoterC (
    .inA(invalidFastcommandA),
    .inB(invalidFastcommandB),
    .inC(invalidFastcommandC),
    .out(invalidFastcommandVotedC),
    .tmrErr(invalidFastcommandTmrErrorC)
    );

majorityVoter #(.WIDTH(12)) nextUnlockCountVoterC (
    .inA(nextUnlockCountA),
    .inB(nextUnlockCountB),
    .inC(nextUnlockCountC),
    .out(nextUnlockCountVotedC),
    .tmrErr(nextUnlockCountTmrErrorC)
    );

majorityVoter bootupVoterC (
    .inA(bootupA),
    .inB(bootupB),
    .inC(bootupC),
    .out(bootupVotedC),
    .tmrErr(bootupTmrErrorC)
    );

majorityVoter #(.WIDTH(4)) stateVoterC (
    .inA(stateA),
    .inB(stateB),
    .inC(stateC),
    .out(stateVotedC),
    .tmrErr(stateTmrErrorC)
    );
endmodule

