/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/globalDigitalTMR.v                                                  *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:07                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: globalDigital.v                                                                        *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-28 17:22:22.288635                                         *
 *           File Size         : 16917                                                              *
 *           MD5 hash          : 18650be206790f83d3051e7a11171281                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 10ps
`include  "commonDefinition.v"
module globalDigitalTMR #(
  parameter L1ADDRWIDTH=7,
  parameter BCSTWIDTH=27
)(
     input  clk40A,
     input  clk40B,
     input  clk40C,
     input  clk1280A,
     input  clk1280B,
     input  clk1280C,
     input  clkRefA,
     input  clkRefB,
     input  clkRefC,
     input  PORA,
     input  PORB,
     input  PORC,
     input  softBootA,
     input  softBootB,
     input  softBootC,
     input  disPowerSequenceA,
     input  disPowerSequenceB,
     input  disPowerSequenceC,
     input  pllCalibrationDoneA,
     input  pllCalibrationDoneB,
     input  pllCalibrationDoneC,
     input  asyLinkResetA,
     input  asyLinkResetB,
     input  asyLinkResetC,
     input  asyPLLResetA,
     input  asyPLLResetB,
     input  asyPLLResetC,
     input  asyAlignFastcommandA,
     input  asyAlignFastcommandB,
     input  asyAlignFastcommandC,
     input  asyResetFastcommandA,
     input  asyResetFastcommandB,
     input  asyResetFastcommandC,
     input  asyStartCalibrationA,
     input  asyStartCalibrationB,
     input  asyStartCalibrationC,
     input  asyResetLockDetectA,
     input  asyResetLockDetectB,
     input  asyResetLockDetectC,
     input  asyResetGlobalReadoutA,
     input  asyResetGlobalReadoutB,
     input  asyResetGlobalReadoutC,
     input  asyResetChargeInjA,
     input  asyResetChargeInjB,
     input  asyResetChargeInjC,
     output  pllResetA,
     output  pllResetB,
     output  pllResetC,
     output  startPLLCalibrationA,
     output  startPLLCalibrationB,
     output  startPLLCalibrationC,
     output [3:0] controllerStateA,
     output [3:0] controllerStateB,
     output [3:0] controllerStateC,
     output [11:0] pllUnlockCountA,
     output [11:0] pllUnlockCountB,
     output [11:0] pllUnlockCountC,
     output [11:0] invalidFCCountA,
     output [11:0] invalidFCCountB,
     output [11:0] invalidFCCountC,
     input  PFDInstLock,
     input [3:0] lfLockThrCounterA,
     input [3:0] lfLockThrCounterB,
     input [3:0] lfLockThrCounterC,
     input [3:0] lfReLockThrCounterA,
     input [3:0] lfReLockThrCounterB,
     input [3:0] lfReLockThrCounterC,
     input [3:0] lfUnLockThrCounterA,
     input [3:0] lfUnLockThrCounterB,
     input [3:0] lfUnLockThrCounterC,
     output  readoutClock,
     input [16:0] chipIdA,
     input [16:0] chipIdB,
     input [16:0] chipIdC,
     input [4:0] readoutClockDelayPixelA,
     input [4:0] readoutClockDelayPixelB,
     input [4:0] readoutClockDelayPixelC,
     input [4:0] readoutClockWidthPixelA,
     input [4:0] readoutClockWidthPixelB,
     input [4:0] readoutClockWidthPixelC,
     input [4:0] readoutClockDelayGlobalA,
     input [4:0] readoutClockDelayGlobalB,
     input [4:0] readoutClockDelayGlobalC,
     input [4:0] readoutClockWidthGlobalA,
     input [4:0] readoutClockWidthGlobalB,
     input [4:0] readoutClockWidthGlobalC,
     input [1:0] serRateRightA,
     input [1:0] serRateRightB,
     input [1:0] serRateRightC,
     input [1:0] serRateLeftA,
     input [1:0] serRateLeftB,
     input [1:0] serRateLeftC,
     input  linkResetTestPatternA,
     input  linkResetTestPatternB,
     input  linkResetTestPatternC,
     input [31:0] linkResetFixedPatternA,
     input [31:0] linkResetFixedPatternB,
     input [31:0] linkResetFixedPatternC,
     input [11:0] emptySlotBCIDA,
     input [11:0] emptySlotBCIDB,
     input [11:0] emptySlotBCIDC,
     input [2:0] triggerGranularityA,
     input [2:0] triggerGranularityB,
     input [2:0] triggerGranularityC,
     input  disScramblerA,
     input  disScramblerB,
     input  disScramblerC,
     input  mergeTriggerDataA,
     input  mergeTriggerDataB,
     input  mergeTriggerDataC,
     input  singlePortA,
     input  singlePortB,
     input  singlePortC,
     input [1:0] onChipL1AConfA,
     input [1:0] onChipL1AConfB,
     input [1:0] onChipL1AConfC,
     input [11:0] BCIDoffsetA,
     input [11:0] BCIDoffsetB,
     input [11:0] BCIDoffsetC,
     input  fcSelfAlignA,
     input  fcSelfAlignB,
     input  fcSelfAlignC,
     input  fcClkDelayEnA,
     input  fcClkDelayEnB,
     input  fcClkDelayEnC,
     input  fcDataDelayEnA,
     input  fcDataDelayEnB,
     input  fcDataDelayEnC,
     output  fcBitAlignErrorA,
     output  fcBitAlignErrorB,
     output  fcBitAlignErrorC,
     output [3:0] fcBitAlignStatusA,
     output [3:0] fcBitAlignStatusB,
     output [3:0] fcBitAlignStatusC,
     input  fcData,
     output [3:0] fcAlignFinalStateA,
     output [3:0] fcAlignFinalStateB,
     output [3:0] fcAlignFinalStateC,
     output  chargeInjection,
     input [4:0] chargeInjectionDelayA,
     input [4:0] chargeInjectionDelayB,
     input [4:0] chargeInjectionDelayC,
     output  wsStart,
     output  wsStop,
     input [735:0] colDataChain,
     input [15:0] colHitChain,
     input [63:0] trigHitsColumn,
     output [15:0] colReadChain,
     output [BCSTWIDTH*16-1:0] colBCSTChain,
     output  soutRight,
     output  soutLeft
);
wire dnUnreadHitToRightGlobalC;
wire dnUnreadHitToRightGlobalB;
wire dnUnreadHitToRightGlobalA;
wire [15:0] trigHitsToLeftGlobalC;
wire [15:0] trigHitsToLeftGlobalB;
wire [15:0] trigHitsToLeftGlobalA;
wire [15:0] trigHitsToRightGlobalC;
wire [15:0] trigHitsToRightGlobalB;
wire [15:0] trigHitsToRightGlobalA;
wire dnUnreadHitToLeftGlobalC;
wire dnUnreadHitToLeftGlobalB;
wire dnUnreadHitToLeftGlobalA;
wire [45:0] dnDataToLeftGlobalC;
wire [45:0] dnDataToLeftGlobalB;
wire [45:0] dnDataToLeftGlobalA;
wire fcDataC;
wire fcDataB;
wire fcDataA;
wire PFDInstLockC;
wire PFDInstLockB;
wire PFDInstLockA;
wire [45:0] dnDataToRightGlobalC;
wire [45:0] dnDataToRightGlobalB;
wire [45:0] dnDataToRightGlobalA;
wor dnBCSTFromLeftGlobalTmrError;
wire [BCSTWIDTH-1:0] dnBCSTFromLeftGlobalB;
wire [BCSTWIDTH-1:0] dnBCSTFromLeftGlobalC;
wire [BCSTWIDTH-1:0] dnBCSTFromLeftGlobalA;
wor dnBCSTFromRightGlobalTmrError;
wire [BCSTWIDTH-1:0] dnBCSTFromRightGlobalB;
wire [BCSTWIDTH-1:0] dnBCSTFromRightGlobalC;
wire [BCSTWIDTH-1:0] dnBCSTFromRightGlobalA;
wor dnReadFromLeftGlobalTmrError;
wire dnReadFromLeftGlobalB;
wire dnReadFromLeftGlobalC;
wire dnReadFromLeftGlobalA;
wor wsStopTmrError;
wire wsStopB;
wire wsStopC;
wire wsStopA;
wor wsStartTmrError;
wire wsStartB;
wire wsStartC;
wire wsStartA;
wor dnReadFromRightGlobalTmrError;
wire dnReadFromRightGlobalB;
wire dnReadFromRightGlobalC;
wire dnReadFromRightGlobalA;
wor chargeInjectionTmrError;
wire chargeInjectionB;
wire chargeInjectionC;
wire chargeInjectionA;
wor readoutClockTmrError;
wire readoutClockB;
wire readoutClockC;
wire readoutClockA;
wire [9:0] decodedFastcommandA;
wire [9:0] decodedFastcommandB;
wire [9:0] decodedFastcommandC;
wire fastcommandAlignedA;
wire fastcommandAlignedB;
wire fastcommandAlignedC;
wire invalidFastcommandA;
wire invalidFastcommandB;
wire invalidFastcommandC;
wire fcL1AA;
wire fcL1AB;
wire fcL1AC;
wire fcL1ARstA;
wire fcL1ARstB;
wire fcL1ARstC;
wire fcBCRA;
wire fcBCRB;
wire fcBCRC;
wire fcChargeInjCmdA;
wire fcChargeInjCmdB;
wire fcChargeInjCmdC;
wire synLinkResetA;
wire synLinkResetB;
wire synLinkResetC;
wire synAlignFastcommandA;
wire synAlignFastcommandB;
wire synAlignFastcommandC;
wire synResetFastcommandA;
wire synResetFastcommandB;
wire synResetFastcommandC;
wire synResetLockdetectA;
wire synResetLockdetectB;
wire synResetLockdetectC;
wire synResetGlobalReadoutA;
wire synResetGlobalReadoutB;
wire synResetGlobalReadoutC;
wire synResetChargeInjA;
wire synResetChargeInjB;
wire synResetChargeInjC;
wire pllLockedA;
wire pllLockedB;
wire pllLockedC;

globalControllerTMR globalControllerInst (
          .clk40RefA(clkRefA),
          .clk40RefB(clkRefB),
          .clk40RefC(clkRefC),
          .PORA(PORA),
          .PORB(PORB),
          .PORC(PORC),
          .softBootA(softBootA),
          .softBootB(softBootB),
          .softBootC(softBootC),
          .disPowerSequenceA(disPowerSequenceA),
          .disPowerSequenceB(disPowerSequenceB),
          .disPowerSequenceC(disPowerSequenceC),
          .decodedFastcommandA(decodedFastcommandA),
          .decodedFastcommandB(decodedFastcommandB),
          .decodedFastcommandC(decodedFastcommandC),
          .pllCalibrationDoneA(pllCalibrationDoneA),
          .pllCalibrationDoneB(pllCalibrationDoneB),
          .pllCalibrationDoneC(pllCalibrationDoneC),
          .pllLockedA(pllLockedA),
          .pllLockedB(pllLockedB),
          .pllLockedC(pllLockedC),
          .fastcommandAlignedA(fastcommandAlignedA),
          .fastcommandAlignedB(fastcommandAlignedB),
          .fastcommandAlignedC(fastcommandAlignedC),
          .invalidFastcommandA(invalidFastcommandA),
          .invalidFastcommandB(invalidFastcommandB),
          .invalidFastcommandC(invalidFastcommandC),
          .fcL1AA(fcL1AA),
          .fcL1AB(fcL1AB),
          .fcL1AC(fcL1AC),
          .fcSelfAlignA(fcSelfAlignA),
          .fcSelfAlignB(fcSelfAlignB),
          .fcSelfAlignC(fcSelfAlignC),          
          .fcL1ARstA(fcL1ARstA),
          .fcL1ARstB(fcL1ARstB),
          .fcL1ARstC(fcL1ARstC),
          .fcBCRA(fcBCRA),
          .fcBCRB(fcBCRB),
          .fcBCRC(fcBCRC),
          .fcWSStartA(wsStartA),
          .fcWSStartB(wsStartB),
          .fcWSStartC(wsStartC),
          .fcWSStopA(wsStopA),
          .fcWSStopB(wsStopB),
          .fcWSStopC(wsStopC),
          .fcChargeInjCmdA(fcChargeInjCmdA),
          .fcChargeInjCmdB(fcChargeInjCmdB),
          .fcChargeInjCmdC(fcChargeInjCmdC),
          .stateA(controllerStateA),
          .stateB(controllerStateB),
          .stateC(controllerStateC),
          .pllUnlockCountA(pllUnlockCountA),
          .pllUnlockCountB(pllUnlockCountB),
          .pllUnlockCountC(pllUnlockCountC),
          .invalidFCCountA(invalidFCCountA),
          .invalidFCCountB(invalidFCCountB),
          .invalidFCCountC(invalidFCCountC),
          .asyLinkResetA(asyLinkResetA),
          .asyLinkResetB(asyLinkResetB),
          .asyLinkResetC(asyLinkResetC),
          .synLinkResetA(synLinkResetA),
          .synLinkResetB(synLinkResetB),
          .synLinkResetC(synLinkResetC),
          .asyPLLResetA(asyPLLResetA),
          .asyPLLResetB(asyPLLResetB),
          .asyPLLResetC(asyPLLResetC),
          .synPLLResetA(pllResetA),
          .synPLLResetB(pllResetB),
          .synPLLResetC(pllResetC),
          .asyAlignFastcommandA(asyAlignFastcommandA),
          .asyAlignFastcommandB(asyAlignFastcommandB),
          .asyAlignFastcommandC(asyAlignFastcommandC),
          .synAlignFastcommandA(synAlignFastcommandA),
          .synAlignFastcommandB(synAlignFastcommandB),
          .synAlignFastcommandC(synAlignFastcommandC),
          .asyStartCalibrationA(asyStartCalibrationA),
          .asyStartCalibrationB(asyStartCalibrationB),
          .asyStartCalibrationC(asyStartCalibrationC),
          .synStartCalibrationA(startPLLCalibrationA),
          .synStartCalibrationB(startPLLCalibrationB),
          .synStartCalibrationC(startPLLCalibrationC),
          .asyResetFastcommandA(asyResetFastcommandA),
          .asyResetFastcommandB(asyResetFastcommandB),
          .asyResetFastcommandC(asyResetFastcommandC),
          .synResetFastcommandA(synResetFastcommandA),
          .synResetFastcommandB(synResetFastcommandB),
          .synResetFastcommandC(synResetFastcommandC),
          .asyResetLockDetectA(asyResetLockDetectA),
          .asyResetLockDetectB(asyResetLockDetectB),
          .asyResetLockDetectC(asyResetLockDetectC),
          .synResetLockdetectA(synResetLockdetectA),
          .synResetLockdetectB(synResetLockdetectB),
          .synResetLockdetectC(synResetLockdetectC),
          .asyResetGlobalReadoutA(asyResetGlobalReadoutA),
          .asyResetGlobalReadoutB(asyResetGlobalReadoutB),
          .asyResetGlobalReadoutC(asyResetGlobalReadoutC),
          .synResetGlobalReadoutA(synResetGlobalReadoutA),
          .synResetGlobalReadoutB(synResetGlobalReadoutB),
          .synResetGlobalReadoutC(synResetGlobalReadoutC),
          .asyResetChargeInjA(asyResetChargeInjA),
          .asyResetChargeInjB(asyResetChargeInjB),
          .asyResetChargeInjC(asyResetChargeInjC),
          .synResetChargeInjA(synResetChargeInjA),
          .synResetChargeInjB(synResetChargeInjB),
          .synResetChargeInjC(synResetChargeInjC)
          );
wire [1:0] lockStateA;
wire [1:0] lockStateB;
wire [1:0] lockStateC;
wire instantLockA;
wire instantLockB;
wire instantLockC;
wire [7:0] lossOfLockCountA;
wire [7:0] lossOfLockCountB;
wire [7:0] lossOfLockCountC;

ljCDRlockFilterDetectorTMR ljCDRlockFilterDetectorInst (
          .smClockA(clk40A),
          .smClockB(clk40B),
          .smClockC(clk40C),
          .resetA(~synResetLockdetectA),
          .resetB(~synResetLockdetectB),
          .resetC(~synResetLockdetectC),
          .selectFD_PFDA(1'b1),
          .selectFD_PFDB(1'b1),
          .selectFD_PFDC(1'b1),
          .PFDInstLockA(PFDInstLockA),
          .PFDInstLockB(PFDInstLockB),
          .PFDInstLockC(PFDInstLockC),
          .FDInstLockA(1'b1),
          .FDInstLockB(1'b1),
          .FDInstLockC(1'b1),
          .lfLockThrCounterA(lfLockThrCounterA),
          .lfLockThrCounterB(lfLockThrCounterB),
          .lfLockThrCounterC(lfLockThrCounterC),
          .lfReLockThrCounterA(lfReLockThrCounterA),
          .lfReLockThrCounterB(lfReLockThrCounterB),
          .lfReLockThrCounterC(lfReLockThrCounterC),
          .lfUnLockThrCounterA(lfUnLockThrCounterA),
          .lfUnLockThrCounterB(lfUnLockThrCounterB),
          .lfUnLockThrCounterC(lfUnLockThrCounterC),
          .stateA(lockStateA),
          .stateB(lockStateB),
          .stateC(lockStateC),
          .instantLockA(instantLockA),
          .instantLockB(instantLockB),
          .instantLockC(instantLockC),
          .lockedA(pllLockedA),
          .lockedB(pllLockedB),
          .lockedC(pllLockedC),
          .lossOfLockCountA(lossOfLockCountA),
          .lossOfLockCountB(lossOfLockCountB),
          .lossOfLockCountC(lossOfLockCountC)
          );
wire readoutClockGlobalA;
wire readoutClockGlobalB;
wire readoutClockGlobalC;

digitalPhaseshifterTMR dgpInst (
          .clk40A(clk40A),
          .clk40B(clk40B),
          .clk40C(clk40C),
          .clk1280A(clk1280A),
          .clk1280B(clk1280B),
          .clk1280C(clk1280C),
          .clockDelay1A(readoutClockDelayPixelA),
          .clockDelay1B(readoutClockDelayPixelB),
          .clockDelay1C(readoutClockDelayPixelC),
          .pulseWidth1A(readoutClockWidthPixelA),
          .pulseWidth1B(readoutClockWidthPixelB),
          .pulseWidth1C(readoutClockWidthPixelC),
          .clockDelay2A(readoutClockDelayGlobalA),
          .clockDelay2B(readoutClockDelayGlobalB),
          .clockDelay2C(readoutClockDelayGlobalC),
          .pulseWidth2A(readoutClockWidthGlobalA),
          .pulseWidth2B(readoutClockWidthGlobalB),
          .pulseWidth2C(readoutClockWidthGlobalC),
          .clkout1A(readoutClockA),
          .clkout1B(readoutClockB),
          .clkout1C(readoutClockC),
          .clkout2A(readoutClockGlobalA),
          .clkout2B(readoutClockGlobalB),
          .clkout2C(readoutClockGlobalC)
          );

fastCommandDecoderTopTMR fastCommandDecoderTop_inst (
          .clk40A(clk40A),
          .clk40B(clk40B),
          .clk40C(clk40C),
          .clk1280A(clk1280A),
          .clk1280B(clk1280B),
          .clk1280C(clk1280C),
          .resetA(synResetFastcommandA),
          .resetB(synResetFastcommandB),
          .resetC(synResetFastcommandC),
          .fccAlignA(synAlignFastcommandA),
          .fccAlignB(synAlignFastcommandB),
          .fccAlignC(synAlignFastcommandC),
          .fcA(fcDataA),
          .fcB(fcDataB),
          .fcC(fcDataC),
          .selfAlignEnA(fcSelfAlignA),
          .selfAlignEnB(fcSelfAlignB),
          .selfAlignEnC(fcSelfAlignC),
          .clkDelayEnA(fcClkDelayEnA),
          .clkDelayEnB(fcClkDelayEnB),
          .clkDelayEnC(fcClkDelayEnC),
          .fcDelayEnA(fcDataDelayEnA),
          .fcDelayEnB(fcDataDelayEnB),
          .fcDelayEnC(fcDataDelayEnC),
          .state_bitAlignA(fcAlignFinalStateA),
          .state_bitAlignB(fcAlignFinalStateB),
          .state_bitAlignC(fcAlignFinalStateC),
          .bitErrorA(fcBitAlignErrorA),
          .bitErrorB(fcBitAlignErrorB),
          .bitErrorC(fcBitAlignErrorC),
          .edA(fcBitAlignStatusA),
          .edB(fcBitAlignStatusB),
          .edC(fcBitAlignStatusC),
          .invalidCmdA(invalidFastcommandA),
          .invalidCmdB(invalidFastcommandB),
          .invalidCmdC(invalidFastcommandC),
          .alignedA(fastcommandAlignedA),
          .alignedB(fastcommandAlignedB),
          .alignedC(fastcommandAlignedC),
          .fcdA(decodedFastcommandA),
          .fcdB(decodedFastcommandB),
          .fcdC(decodedFastcommandC)
          );

chargeInjectionPulseGenTMR cpgInst (
          .clk40A(clk40A),
          .clk40B(clk40B),
          .clk40C(clk40C),
          .clk1280A(clk1280A),
          .clk1280B(clk1280B),
          .clk1280C(clk1280C),
          .resetA(synResetChargeInjA),
          .resetB(synResetChargeInjB),
          .resetC(synResetChargeInjC),
          .delayA(chargeInjectionDelayA),
          .delayB(chargeInjectionDelayB),
          .delayC(chargeInjectionDelayC),
          .chargeInjectionCmdA(fcChargeInjCmdA),
          .chargeInjectionCmdB(fcChargeInjCmdB),
          .chargeInjectionCmdC(fcChargeInjCmdC),
          .pulseA(chargeInjectionA),
          .pulseB(chargeInjectionB),
          .pulseC(chargeInjectionC)
          );
wire [45:0] dnDataRight;
wire dnUnreadHitRight;
wire dnReadRight;
wire [BCSTWIDTH-1:0] dnBCSTRight;
wire [45:0] dnDataLeft;
wire dnUnreadHitLeft;
wire dnReadLeft;
wire [BCSTWIDTH-1:0] dnBCSTLeft;
wire [15:0] trigHits;

columnConnecterTMR #(.BCSTWIDTH(BCSTWIDTH)) columnConnecterInst (
          .colDataChain(colDataChain),
          .colHitChain(colHitChain),
          .trigHitsColumn(trigHitsColumn),
          .colReadChain(colReadChain),
          .colBCSTChain(colBCSTChain),
          .trigHits(trigHits),
          .dnDataRight(dnDataRight),
          .dnUnreadHitRight(dnUnreadHitRight),
          .dnReadRight(dnReadRight),
          .dnBCSTRight(dnBCSTRight),
          .dnDataLeft(dnDataLeft),
          .dnUnreadHitLeft(dnUnreadHitLeft),
          .dnReadLeft(dnReadLeft),
          .dnBCSTLeft(dnBCSTLeft)
          );
wire [45:0] dnDataToLeftGlobal;
wire dnUnreadHitToLeftGlobal;
wire dnReadFromLeftGlobal;
wire [BCSTWIDTH-1:0] dnBCSTFromLeftGlobal;
wire [15:0] trigHitsToLeftGlobal;
wire [45:0] dnDataToRightGlobal;
wire dnUnreadHitToRightGlobal;
wire dnReadFromRightGlobal;
wire [BCSTWIDTH-1:0] dnBCSTFromRightGlobal;
wire [15:0] trigHitsToRightGlobal;
wire [4:0] trigDataSizeLeftA;
wire [4:0] trigDataSizeLeftB;
wire [4:0] trigDataSizeLeftC;
wire [4:0] trigDataSizeRightA;
wire [4:0] trigDataSizeRightB;
wire [4:0] trigDataSizeRightC;
wire [7:0] leftTrigHits =  trigHits[15:8] ;
wire [7:0] rightTrigHits =  trigHits[7:0] ;

dataSourceSwitcherTMR #(.BCSTWIDTH(BCSTWIDTH)) dataSourceSwitcherInst (
          .dataFromLeftPixel(dnDataLeft),
          .unreadHitFromLeftPixel(dnUnreadHitLeft),
          .readToLeftPixel(dnReadLeft),
          .BCSTToLeftPixel(dnBCSTLeft),
          .trigHitsFromLeftPixel(leftTrigHits),
          .dataFromRightPixel(dnDataRight),
          .unreadHitFromRightPixel(dnUnreadHitRight),
          .readToRightPixel(dnReadRight),
          .BCSTToRightPixel(dnBCSTRight),
          .trigHitsFromRightPixel(rightTrigHits),
          .dnDataToLeftGlobal(dnDataToLeftGlobal),
          .dnUnreadHitToLeftGlobal(dnUnreadHitToLeftGlobal),
          .dnReadFromLeftGlobal(dnReadFromLeftGlobal),
          .dnBCSTFromLeftGlobal(dnBCSTFromLeftGlobal),
          .trigDataSizeLeftA(trigDataSizeLeftA),
          .trigDataSizeLeftB(trigDataSizeLeftB),
          .trigDataSizeLeftC(trigDataSizeLeftC),
          .trigHitsToLeftGlobal(trigHitsToLeftGlobal),
          .dnDataToRightGlobal(dnDataToRightGlobal),
          .dnUnreadHitToRightGlobal(dnUnreadHitToRightGlobal),
          .dnReadFromRightGlobal(dnReadFromRightGlobal),
          .dnBCSTFromRightGlobal(dnBCSTFromRightGlobal),
          .trigDataSizeRightA(trigDataSizeRightA),
          .trigDataSizeRightB(trigDataSizeRightB),
          .trigDataSizeRightC(trigDataSizeRightC),
          .trigHitsToRightGlobal(trigHitsToRightGlobal),
          .triggerGranularityA(triggerGranularityA),
          .triggerGranularityB(triggerGranularityB),
          .triggerGranularityC(triggerGranularityC),
          .mergeTrigDataA(mergeTriggerDataA),
          .mergeTrigDataB(mergeTriggerDataB),
          .mergeTrigDataC(mergeTriggerDataC),
          .singlePortA(singlePortA),
          .singlePortB(singlePortB),
          .singlePortC(singlePortC)
          );
wire [31:0] dout32RightA;
wire [31:0] dout32RightB;
wire [31:0] dout32RightC;

globalReadoutTMR #(.L1ADDRWIDTH(L1ADDRWIDTH), .BCSTWIDTH(BCSTWIDTH)) rightGlobalReadout (
          .clkA(readoutClockGlobalA),
          .clkB(readoutClockGlobalB),
          .clkC(readoutClockGlobalC),
          .clk1280A(clk1280A),
          .clk1280B(clk1280B),
          .clk1280C(clk1280C),
          .serRateA(serRateRightA),
          .serRateB(serRateRightB),
          .serRateC(serRateRightC),
          .chipIdA(chipIdA),
          .chipIdB(chipIdB),
          .chipIdC(chipIdC),
          .disA(1'b0),
          .disB(1'b0),
          .disC(1'b0),
          .emptySlotBCIDA(emptySlotBCIDA),
          .emptySlotBCIDB(emptySlotBCIDB),
          .emptySlotBCIDC(emptySlotBCIDC),
          .L1A_RstA(fcL1ARstA),
          .L1A_RstB(fcL1ARstB),
          .L1A_RstC(fcL1ARstC),
          .trigHitsA(trigHitsToRightGlobalA),
          .trigHitsB(trigHitsToRightGlobalB),
          .trigHitsC(trigHitsToRightGlobalC),
          .trigDataSizeA(trigDataSizeRightA),
          .trigDataSizeB(trigDataSizeRightB),
          .trigDataSizeC(trigDataSizeRightC),
          .resetA(synResetGlobalReadoutA),
          .resetB(synResetGlobalReadoutB),
          .resetC(synResetGlobalReadoutC),
          .onChipL1AConfA(onChipL1AConfA),
          .onChipL1AConfB(onChipL1AConfB),
          .onChipL1AConfC(onChipL1AConfC),
          .disSCRA(disScramblerA),
          .disSCRB(disScramblerB),
          .disSCRC(disScramblerC),
          .BCIDoffsetA(BCIDoffsetA),
          .BCIDoffsetB(BCIDoffsetB),
          .BCIDoffsetC(BCIDoffsetC),
          .BCIDRstA(~fcBCRA),
          .BCIDRstB(~fcBCRB),
          .BCIDRstC(~fcBCRC),
          .inL1AA(fcL1AA),
          .inL1AB(fcL1AB),
          .inL1AC(fcL1AC),
          .dnDataA(dnDataToRightGlobalA),
          .dnDataB(dnDataToRightGlobalB),
          .dnDataC(dnDataToRightGlobalC),
          .dnUnreadHitA(dnUnreadHitToRightGlobalA),
          .dnUnreadHitB(dnUnreadHitToRightGlobalB),
          .dnUnreadHitC(dnUnreadHitToRightGlobalC),
          .dnReadA(dnReadFromRightGlobalA),
          .dnReadB(dnReadFromRightGlobalB),
          .dnReadC(dnReadFromRightGlobalC),
          .dnBCSTA(dnBCSTFromRightGlobalA),
          .dnBCSTB(dnBCSTFromRightGlobalB),
          .dnBCSTC(dnBCSTFromRightGlobalC),
          .dout32A(dout32RightA),
          .dout32B(dout32RightB),
          .dout32C(dout32RightC)
          );

serializerTMR serInstRight (
          .link_reset_refA(synLinkResetA),
          .link_reset_refB(synLinkResetB),
          .link_reset_refC(synLinkResetC),
          .link_reset_testPatternSelA(linkResetTestPatternA),
          .link_reset_testPatternSelB(linkResetTestPatternB),
          .link_reset_testPatternSelC(linkResetTestPatternC),
          .link_reset_fixedTestPatternA(linkResetFixedPatternA),
          .link_reset_fixedTestPatternB(linkResetFixedPatternB),
          .link_reset_fixedTestPatternC(linkResetFixedPatternC),
          .disA(1'b0),
          .disB(1'b0),
          .disC(1'b0),
          .clk1280A(clk1280A),
          .clk1280B(clk1280B),
          .clk1280C(clk1280C),
          .rateA(serRateRightA),
          .rateB(serRateRightB),
          .rateC(serRateRightC),
          .clk40synA(clk40A),
          .clk40synB(clk40B),
          .clk40synC(clk40C),
          .dinA(dout32RightA),
          .dinB(dout32RightB),
          .dinC(dout32RightC),
          .sout(soutRight)
          );
wire [31:0] dout32LeftA;
wire [31:0] dout32LeftB;
wire [31:0] dout32LeftC;

globalReadoutTMR #(.L1ADDRWIDTH(L1ADDRWIDTH), .BCSTWIDTH(BCSTWIDTH)) leftGlobalReadout (
          .clkA(readoutClockGlobalA),
          .clkB(readoutClockGlobalB),
          .clkC(readoutClockGlobalC),
          .clk1280A(clk1280A),
          .clk1280B(clk1280B),
          .clk1280C(clk1280C),
          .serRateA(serRateLeftA),
          .serRateB(serRateLeftB),
          .serRateC(serRateLeftC),
          .chipIdA(chipIdA),
          .chipIdB(chipIdB),
          .chipIdC(chipIdC),
          .disA(singlePortA),
          .disB(singlePortB),
          .disC(singlePortC),
          .emptySlotBCIDA(emptySlotBCIDA),
          .emptySlotBCIDB(emptySlotBCIDB),
          .emptySlotBCIDC(emptySlotBCIDC),
          .L1A_RstA(fcL1ARstA),
          .L1A_RstB(fcL1ARstB),
          .L1A_RstC(fcL1ARstC),
          .trigHitsA(trigHitsToLeftGlobalA),
          .trigHitsB(trigHitsToLeftGlobalB),
          .trigHitsC(trigHitsToLeftGlobalC),
          .trigDataSizeA(trigDataSizeLeftA),
          .trigDataSizeB(trigDataSizeLeftB),
          .trigDataSizeC(trigDataSizeLeftC),
          .resetA(synResetGlobalReadoutA),
          .resetB(synResetGlobalReadoutB),
          .resetC(synResetGlobalReadoutC),
          .onChipL1AConfA(onChipL1AConfA),
          .onChipL1AConfB(onChipL1AConfB),
          .onChipL1AConfC(onChipL1AConfC),
          .disSCRA(disScramblerA),
          .disSCRB(disScramblerB),
          .disSCRC(disScramblerC),
          .BCIDoffsetA(BCIDoffsetA),
          .BCIDoffsetB(BCIDoffsetB),
          .BCIDoffsetC(BCIDoffsetC),
          .BCIDRstA(~fcBCRA),
          .BCIDRstB(~fcBCRB),
          .BCIDRstC(~fcBCRC),
          .inL1AA(fcL1AA),
          .inL1AB(fcL1AB),
          .inL1AC(fcL1AC),
          .dnDataA(dnDataToLeftGlobalA),
          .dnDataB(dnDataToLeftGlobalB),
          .dnDataC(dnDataToLeftGlobalC),
          .dnUnreadHitA(dnUnreadHitToLeftGlobalA),
          .dnUnreadHitB(dnUnreadHitToLeftGlobalB),
          .dnUnreadHitC(dnUnreadHitToLeftGlobalC),
          .dnReadA(dnReadFromLeftGlobalA),
          .dnReadB(dnReadFromLeftGlobalB),
          .dnReadC(dnReadFromLeftGlobalC),
          .dnBCSTA(dnBCSTFromLeftGlobalA),
          .dnBCSTB(dnBCSTFromLeftGlobalB),
          .dnBCSTC(dnBCSTFromLeftGlobalC),
          .dout32A(dout32LeftA),
          .dout32B(dout32LeftB),
          .dout32C(dout32LeftC)
          );

serializerTMR serInstLeft (
          .link_reset_refA(synLinkResetA),
          .link_reset_refB(synLinkResetB),
          .link_reset_refC(synLinkResetC),
          .link_reset_testPatternSelA(linkResetTestPatternA),
          .link_reset_testPatternSelB(linkResetTestPatternB),
          .link_reset_testPatternSelC(linkResetTestPatternC),
          .link_reset_fixedTestPatternA(linkResetFixedPatternA),
          .link_reset_fixedTestPatternB(linkResetFixedPatternB),
          .link_reset_fixedTestPatternC(linkResetFixedPatternC),
          .disA(singlePortA),
          .disB(singlePortB),
          .disC(singlePortC),
          .clk1280A(clk1280A),
          .clk1280B(clk1280B),
          .clk1280C(clk1280C),
          .rateA(serRateLeftA),
          .rateB(serRateLeftB),
          .rateC(serRateLeftC),
          .clk40synA(clk40A),
          .clk40synB(clk40B),
          .clk40synC(clk40C),
          .dinA(dout32LeftA),
          .dinB(dout32LeftB),
          .dinC(dout32LeftC),
          .sout(soutLeft)
          );

majorityVoter readoutClockVoter (
          .inA(readoutClockA),
          .inB(readoutClockB),
          .inC(readoutClockC),
          .out(readoutClock),
          .tmrErr(readoutClockTmrError)
          );

majorityVoter chargeInjectionVoter (
          .inA(chargeInjectionA),
          .inB(chargeInjectionB),
          .inC(chargeInjectionC),
          .out(chargeInjection),
          .tmrErr(chargeInjectionTmrError)
          );

majorityVoter dnReadFromRightGlobalVoter (
          .inA(dnReadFromRightGlobalA),
          .inB(dnReadFromRightGlobalB),
          .inC(dnReadFromRightGlobalC),
          .out(dnReadFromRightGlobal),
          .tmrErr(dnReadFromRightGlobalTmrError)
          );

majorityVoter wsStartVoter (
          .inA(wsStartA),
          .inB(wsStartB),
          .inC(wsStartC),
          .out(wsStart),
          .tmrErr(wsStartTmrError)
          );

majorityVoter wsStopVoter (
          .inA(wsStopA),
          .inB(wsStopB),
          .inC(wsStopC),
          .out(wsStop),
          .tmrErr(wsStopTmrError)
          );

majorityVoter dnReadFromLeftGlobalVoter (
          .inA(dnReadFromLeftGlobalA),
          .inB(dnReadFromLeftGlobalB),
          .inC(dnReadFromLeftGlobalC),
          .out(dnReadFromLeftGlobal),
          .tmrErr(dnReadFromLeftGlobalTmrError)
          );

majorityVoter #(.WIDTH(((BCSTWIDTH-1)>(0)) ? ((BCSTWIDTH-1)-(0)+1) : ((0)-(BCSTWIDTH-1)+1))) dnBCSTFromRightGlobalVoter (
          .inA(dnBCSTFromRightGlobalA),
          .inB(dnBCSTFromRightGlobalB),
          .inC(dnBCSTFromRightGlobalC),
          .out(dnBCSTFromRightGlobal),
          .tmrErr(dnBCSTFromRightGlobalTmrError)
          );

majorityVoter #(.WIDTH(((BCSTWIDTH-1)>(0)) ? ((BCSTWIDTH-1)-(0)+1) : ((0)-(BCSTWIDTH-1)+1))) dnBCSTFromLeftGlobalVoter (
          .inA(dnBCSTFromLeftGlobalA),
          .inB(dnBCSTFromLeftGlobalB),
          .inC(dnBCSTFromLeftGlobalC),
          .out(dnBCSTFromLeftGlobal),
          .tmrErr(dnBCSTFromLeftGlobalTmrError)
          );

fanout #(.WIDTH(46)) dnDataToRightGlobalFanout (
          .in(dnDataToRightGlobal),
          .outA(dnDataToRightGlobalA),
          .outB(dnDataToRightGlobalB),
          .outC(dnDataToRightGlobalC)
          );

fanout PFDInstLockFanout (
          .in(PFDInstLock),
          .outA(PFDInstLockA),
          .outB(PFDInstLockB),
          .outC(PFDInstLockC)
          );

fanout fcDataFanout (
          .in(fcData),
          .outA(fcDataA),
          .outB(fcDataB),
          .outC(fcDataC)
          );

fanout #(.WIDTH(46)) dnDataToLeftGlobalFanout (
          .in(dnDataToLeftGlobal),
          .outA(dnDataToLeftGlobalA),
          .outB(dnDataToLeftGlobalB),
          .outC(dnDataToLeftGlobalC)
          );

fanout dnUnreadHitToLeftGlobalFanout (
          .in(dnUnreadHitToLeftGlobal),
          .outA(dnUnreadHitToLeftGlobalA),
          .outB(dnUnreadHitToLeftGlobalB),
          .outC(dnUnreadHitToLeftGlobalC)
          );

fanout #(.WIDTH(16)) trigHitsToRightGlobalFanout (
          .in(trigHitsToRightGlobal),
          .outA(trigHitsToRightGlobalA),
          .outB(trigHitsToRightGlobalB),
          .outC(trigHitsToRightGlobalC)
          );

fanout #(.WIDTH(16)) trigHitsToLeftGlobalFanout (
          .in(trigHitsToLeftGlobal),
          .outA(trigHitsToLeftGlobalA),
          .outB(trigHitsToLeftGlobalB),
          .outC(trigHitsToLeftGlobalC)
          );

fanout dnUnreadHitToRightGlobalFanout (
          .in(dnUnreadHitToRightGlobal),
          .outA(dnUnreadHitToRightGlobalA),
          .outB(dnUnreadHitToRightGlobalB),
          .outC(dnUnreadHitToRightGlobalC)
          );
endmodule



// /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/tmrg/tmrg/tmrg/../common/voter.v
module majorityVoter (inA, inB, inC, out, tmrErr);
  parameter WIDTH = 1;
  input   [(WIDTH-1):0]   inA, inB, inC;
  output  [(WIDTH-1):0]   out;
  output                  tmrErr;
  reg                     tmrErr;
  assign out = (inA&inB) | (inA&inC) | (inB&inC);
  always @(inA or inB or inC)
  begin
    if (inA!=inB || inA!=inC || inB!=inC)
      tmrErr = 1;
    else
      tmrErr = 0;
  end
endmodule


// /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/tmrg/tmrg/tmrg/../common/fanout.v
module fanout (in, outA, outB, outC);
  parameter WIDTH = 1;
  input   [(WIDTH-1):0]   in;
  output  [(WIDTH-1):0]   outA,outB,outC;
  assign outA=in;
  assign outB=in;
  assign outC=in;
endmodule
