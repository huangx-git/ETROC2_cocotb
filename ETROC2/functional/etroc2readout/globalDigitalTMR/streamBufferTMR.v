/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./globalDigitalTMR/streamBufferTMR.v                                                   *
 *                                                                                                  *
 * user    : dtgong                                                                                 *
 * host    : sphy7asic01.smu.edu                                                                    *
 * date    : 03/04/2022 15:30:10                                                                    *
 *                                                                                                  *
 * workdir : /users/dtgong/workarea/tsmc65/ETLROC/digital/ETROC2Readout/gitlab/etroc2readout        *
 * cmd     : ../../tmrg/tmrg/bin/tmrg -c tmrgGlobal.cnf                                             *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: streamBuffer.v                                                                         *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-03-15 14:02:02.676898                                         *
 *           File Size         : 14384                                                              *
 *           MD5 hash          : c47e4fedbe212c8658b7901f3ed66e18                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps
`include  "commonDefinition.v"
module streamBufferTMR #(
  parameter FIFODEPTH=4
)(
     input  clkA,
     input  clkB,
     input  clkC,
     input  resetA,
     input  resetB,
     input  resetC,
     input [1:0] rateA,
     input [1:0] rateB,
     input [1:0] rateC,
     input [4:0] triggerDataSizeA,
     input [4:0] triggerDataSizeB,
     input [4:0] triggerDataSizeC,
     input [31:0] triggerDataA,
     input [31:0] triggerDataB,
     input [31:0] triggerDataC,
     input [39:0] dataFrameA,
     input [39:0] dataFrameB,
     input [39:0] dataFrameC,
     input [11:0] RT_BCIDA,
     input [11:0] RT_BCIDB,
     input [11:0] RT_BCIDC,
     input [1:0] DBSA,
     input [1:0] DBSB,
     input [1:0] DBSC,
     input [7:0] RT_L1CounterA,
     input [7:0] RT_L1CounterB,
     input [7:0] RT_L1CounterC,
     output  almostFullA,
     output  almostFullB,
     output  almostFullC,
     output reg [31:0] doutA,
     output reg [31:0] doutB,
     output reg [31:0] doutC
);
localparam    filler={16'h3C5C,2'b10};
localparam    lowLevel=2'd2;
localparam    highLevel=2'd2;
wor startTmrErrorC;
wire startVotedC;
wor almostEmptyTmrErrorC;
wire almostEmptyVotedC;
wor loadDataTmrErrorC;
wire loadDataVotedC;
wor nextRdAddrTmrErrorC;
wire [6:0] nextRdAddrVotedC;
wor nextWrAddrTmrErrorC;
wire [6:0] nextWrAddrVotedC;
wor startTmrErrorB;
wire startVotedB;
wor almostEmptyTmrErrorB;
wire almostEmptyVotedB;
wor loadDataTmrErrorB;
wire loadDataVotedB;
wor nextWrAddrTmrErrorB;
wire [6:0] nextWrAddrVotedB;
wor nextRdAddrTmrErrorB;
wire [6:0] nextRdAddrVotedB;
wor almostEmptyTmrErrorA;
wire almostEmptyVotedA;
wor startTmrErrorA;
wire startVotedA;
wor nextRdAddrTmrErrorA;
wire [6:0] nextRdAddrVotedA;
wor nextWrAddrTmrErrorA;
wire [6:0] nextWrAddrVotedA;
wor loadDataTmrErrorA;
wire loadDataVotedA;
wire almostEmptyA;
wire almostEmptyB;
wire almostEmptyC;
wire isAFillerA;
wire isAFillerB;
wire isAFillerC;
assign isAFillerA =  dataFrameA[39:22] ==filler;
assign isAFillerB =  dataFrameB[39:22] ==filler;
assign isAFillerC =  dataFrameC[39:22] ==filler;
reg  wrenA;
reg  wrenB;
reg  wrenC;
wire [39:0] rt_dataFrameA;
wire [39:0] rt_dataFrameB;
wire [39:0] rt_dataFrameC;
assign rt_dataFrameA =  isAFillerA ? {dataFrameA[39:22] ,RT_L1CounterA,DBSA,RT_BCIDA} : dataFrameA;
assign rt_dataFrameB =  isAFillerB ? {dataFrameB[39:22] ,RT_L1CounterB,DBSB,RT_BCIDB} : dataFrameB;
assign rt_dataFrameC =  isAFillerC ? {dataFrameC[39:22] ,RT_L1CounterC,DBSC,RT_BCIDC} : dataFrameC;
reg  rdenA;
reg  rdenB;
reg  rdenC;
wire [39:0] QAA;
wire [39:0] QAB;
wire [39:0] QAC;
wire [FIFODEPTH-1:0] wrAddrA;
wire [FIFODEPTH-1:0] wrAddrB;
wire [FIFODEPTH-1:0] wrAddrC;
wire [FIFODEPTH-1:0] rdAddrA;
wire [FIFODEPTH-1:0] rdAddrB;
wire [FIFODEPTH-1:0] rdAddrC;
reg  [FIFODEPTH-1:0] wrAddrRegA;
reg  [FIFODEPTH-1:0] wrAddrRegB;
reg  [FIFODEPTH-1:0] wrAddrRegC;
reg  [39:0] scrDataRegA;
reg  [39:0] scrDataRegB;
reg  [39:0] scrDataRegC;

always @( negedge clkA )
     begin
          wrAddrRegA <= wrAddrA;
          wrenA <= almostFullA ? 1'b0 : (almostEmptyA ? 1'b1 : ~ isAFillerA );
          scrDataRegA <= rt_dataFrameA;
     end

always @( negedge clkB )
     begin
          wrAddrRegB <= wrAddrB;
          wrenB <= almostFullB ? 1'b0 : (almostEmptyB ? 1'b1 : ~ isAFillerB );
          scrDataRegB <= rt_dataFrameB;
     end

always @( negedge clkC )
     begin
          wrAddrRegC <= wrAddrC;
          wrenC <= almostFullC ? 1'b0 : (almostEmptyC ? 1'b1 : ~ isAFillerC );
          scrDataRegC <= rt_dataFrameC;
     end

streambuf_mem_rtl_topTMR dataBuffer (
          .QAA(QAA),
          .QAB(QAB),
          .QAC(QAC),
          .E1AA(),
          .E1AB(),
          .E1AC(),
          .CLKAA(~clkA),
          .CLKAB(~clkB),
          .CLKAC(~clkC),
          .CENAA(~rdenA),
          .CENAB(~rdenB),
          .CENAC(~rdenC),
          .AAA(rdAddrA),
          .AAB(rdAddrB),
          .AAC(rdAddrC),
          .CLKBA(clkA),
          .CLKBB(clkB),
          .CLKBC(clkC),
          .CENBA(~wrenA),
          .CENBB(~wrenB),
          .CENBC(~wrenC),
          .ABA(wrAddrRegA),
          .ABB(wrAddrRegB),
          .ABC(wrAddrRegC),
          .DBA(scrDataRegA),
          .DBB(scrDataRegB),
          .DBC(scrDataRegC),
          .EMAAA(3'b010),
          .EMAAB(3'b010),
          .EMAAC(3'b010),
          .EMABA(3'b010),
          .EMABB(3'b010),
          .EMABC(3'b010),
          .RET1NA(1'b1),
          .RET1NB(1'b1),
          .RET1NC(1'b1),
          .COLLDISNA(1'b1),
          .COLLDISNB(1'b1),
          .COLLDISNC(1'b1)
          );
reg  [127:0] rdBufferA;
reg  [127:0] rdBufferB;
reg  [127:0] rdBufferC;
reg  startA;
reg  startB;
reg  startC;
reg  [31:0] outDataA;
reg  [31:0] outDataB;
reg  [31:0] outDataC;
wire [6:0] serializerBitsA =  (rateA==2'b00) ? 7'd8 : (rateA==2'b01 ? 7'd16 : 7'd32);
wire [6:0] serializerBitsB =  (rateB==2'b00) ? 7'd8 : (rateB==2'b01 ? 7'd16 : 7'd32);
wire [6:0] serializerBitsC =  (rateC==2'b00) ? 7'd8 : (rateC==2'b01 ? 7'd16 : 7'd32);
wire [6:0] readOutSizeA =  serializerBitsA-{2'H0,triggerDataSizeA};
wire [6:0] readOutSizeB =  serializerBitsB-{2'H0,triggerDataSizeB};
wire [6:0] readOutSizeC =  serializerBitsC-{2'H0,triggerDataSizeC};
reg  [6:0] cb_wrAddrA;
reg  [6:0] cb_wrAddrB;
reg  [6:0] cb_wrAddrC;
reg  [6:0] cb_rdAddrA;
reg  [6:0] cb_rdAddrB;
reg  [6:0] cb_rdAddrC;
wire [6:0] cb_wordCountA =  cb_wrAddrA-cb_rdAddrA;
wire [6:0] cb_wordCountB =  cb_wrAddrB-cb_rdAddrB;
wire [6:0] cb_wordCountC =  cb_wrAddrC-cb_rdAddrC;
wire loadDataA =  cb_wordCountA<readOutSizeA*2;
wire loadDataB =  cb_wordCountB<readOutSizeB*2;
wire loadDataC =  cb_wordCountC<readOutSizeC*2;
wire [6:0] nextWrAddrA =  loadDataA ? cb_wrAddrA+7'd40 : cb_wrAddrA;
wire [6:0] nextWrAddrB =  loadDataB ? cb_wrAddrB+7'd40 : cb_wrAddrB;
wire [6:0] nextWrAddrC =  loadDataC ? cb_wrAddrC+7'd40 : cb_wrAddrC;
wire [6:0] nextRdAddrA =  cb_rdAddrA+readOutSizeA;
wire [6:0] nextRdAddrB =  cb_rdAddrB+readOutSizeB;
wire [6:0] nextRdAddrC =  cb_rdAddrC+readOutSizeC;

always @( posedge clkA )
     begin
          if (!resetA)
               begin
                    startA <= 1'b0;
               end
          else
               begin
                    if (!almostEmptyVotedA)
                         begin
                              startA <= 1'b1;
                              cb_wrAddrA <= 7'd40;
                              cb_rdAddrA <= 7'd0;
                         end
                    if (startVotedA==1'b1)
                         begin
                              cb_wrAddrA <= nextWrAddrVotedA;
                              cb_rdAddrA <= nextRdAddrVotedA;
                         end
               end
     end

always @( posedge clkB )
     begin
          if (!resetB)
               begin
                    startB <= 1'b0;
               end
          else
               begin
                    if (!almostEmptyVotedB)
                         begin
                              startB <= 1'b1;
                              cb_wrAddrB <= 7'd40;
                              cb_rdAddrB <= 7'd0;
                         end
                    if (startVotedB==1'b1)
                         begin
                              cb_wrAddrB <= nextWrAddrVotedB;
                              cb_rdAddrB <= nextRdAddrVotedB;
                         end
               end
     end

always @( posedge clkC )
     begin
          if (!resetC)
               begin
                    startC <= 1'b0;
               end
          else
               begin
                    if (!almostEmptyVotedC)
                         begin
                              startC <= 1'b1;
                              cb_wrAddrC <= 7'd40;
                              cb_rdAddrC <= 7'd0;
                         end
                    if (startVotedC==1'b1)
                         begin
                              cb_wrAddrC <= nextWrAddrVotedC;
                              cb_rdAddrC <= nextRdAddrVotedC;
                         end
               end
     end

always @( posedge clkA )
     begin
          if (~resetA)
               begin
                    rdenA <= 1'b0;
               end
          else
               if (startVotedA==1'b1)
                    begin
                         if (loadDataVotedA==1'b1)
                              begin
                                   rdenA <= 1'b1;
                                   rdBufferA[cb_wrAddrA+7'd0]  <= QAA[0] ;
                                   rdBufferA[cb_wrAddrA+7'd1]  <= QAA[1] ;
                                   rdBufferA[cb_wrAddrA+7'd2]  <= QAA[2] ;
                                   rdBufferA[cb_wrAddrA+7'd3]  <= QAA[3] ;
                                   rdBufferA[cb_wrAddrA+7'd4]  <= QAA[4] ;
                                   rdBufferA[cb_wrAddrA+7'd5]  <= QAA[5] ;
                                   rdBufferA[cb_wrAddrA+7'd6]  <= QAA[6] ;
                                   rdBufferA[cb_wrAddrA+7'd7]  <= QAA[7] ;
                                   rdBufferA[cb_wrAddrA+7'd8]  <= QAA[8] ;
                                   rdBufferA[cb_wrAddrA+7'd9]  <= QAA[9] ;
                                   rdBufferA[cb_wrAddrA+7'd10]  <= QAA[10] ;
                                   rdBufferA[cb_wrAddrA+7'd11]  <= QAA[11] ;
                                   rdBufferA[cb_wrAddrA+7'd12]  <= QAA[12] ;
                                   rdBufferA[cb_wrAddrA+7'd13]  <= QAA[13] ;
                                   rdBufferA[cb_wrAddrA+7'd14]  <= QAA[14] ;
                                   rdBufferA[cb_wrAddrA+7'd15]  <= QAA[15] ;
                                   rdBufferA[cb_wrAddrA+7'd16]  <= QAA[16] ;
                                   rdBufferA[cb_wrAddrA+7'd17]  <= QAA[17] ;
                                   rdBufferA[cb_wrAddrA+7'd18]  <= QAA[18] ;
                                   rdBufferA[cb_wrAddrA+7'd19]  <= QAA[19] ;
                                   rdBufferA[cb_wrAddrA+7'd20]  <= QAA[20] ;
                                   rdBufferA[cb_wrAddrA+7'd21]  <= QAA[21] ;
                                   rdBufferA[cb_wrAddrA+7'd22]  <= QAA[22] ;
                                   rdBufferA[cb_wrAddrA+7'd23]  <= QAA[23] ;
                                   rdBufferA[cb_wrAddrA+7'd24]  <= QAA[24] ;
                                   rdBufferA[cb_wrAddrA+7'd25]  <= QAA[25] ;
                                   rdBufferA[cb_wrAddrA+7'd26]  <= QAA[26] ;
                                   rdBufferA[cb_wrAddrA+7'd27]  <= QAA[27] ;
                                   rdBufferA[cb_wrAddrA+7'd28]  <= QAA[28] ;
                                   rdBufferA[cb_wrAddrA+7'd29]  <= QAA[29] ;
                                   rdBufferA[cb_wrAddrA+7'd30]  <= QAA[30] ;
                                   rdBufferA[cb_wrAddrA+7'd31]  <= QAA[31] ;
                                   rdBufferA[cb_wrAddrA+7'd32]  <= QAA[32] ;
                                   rdBufferA[cb_wrAddrA+7'd33]  <= QAA[33] ;
                                   rdBufferA[cb_wrAddrA+7'd34]  <= QAA[34] ;
                                   rdBufferA[cb_wrAddrA+7'd35]  <= QAA[35] ;
                                   rdBufferA[cb_wrAddrA+7'd36]  <= QAA[36] ;
                                   rdBufferA[cb_wrAddrA+7'd37]  <= QAA[37] ;
                                   rdBufferA[cb_wrAddrA+7'd38]  <= QAA[38] ;
                                   rdBufferA[cb_wrAddrA+7'd39]  <= QAA[39] ;
                              end
                         else
                              begin
                                   rdenA <= 1'b0;
                              end
                         outDataA[0]  <= rdBufferA[cb_rdAddrA] ;
                         outDataA[1]  <= rdBufferA[cb_rdAddrA+7'd1] ;
                         outDataA[2]  <= rdBufferA[cb_rdAddrA+7'd2] ;
                         outDataA[3]  <= rdBufferA[cb_rdAddrA+7'd3] ;
                         outDataA[4]  <= rdBufferA[cb_rdAddrA+7'd4] ;
                         outDataA[5]  <= rdBufferA[cb_rdAddrA+7'd5] ;
                         outDataA[6]  <= rdBufferA[cb_rdAddrA+7'd6] ;
                         outDataA[7]  <= rdBufferA[cb_rdAddrA+7'd7] ;
                         outDataA[8]  <= rdBufferA[cb_rdAddrA+7'd8] ;
                         outDataA[9]  <= rdBufferA[cb_rdAddrA+7'd9] ;
                         outDataA[10]  <= rdBufferA[cb_rdAddrA+7'd10] ;
                         outDataA[11]  <= rdBufferA[cb_rdAddrA+7'd11] ;
                         outDataA[12]  <= rdBufferA[cb_rdAddrA+7'd12] ;
                         outDataA[13]  <= rdBufferA[cb_rdAddrA+7'd13] ;
                         outDataA[14]  <= rdBufferA[cb_rdAddrA+7'd14] ;
                         outDataA[15]  <= rdBufferA[cb_rdAddrA+7'd15] ;
                         outDataA[16]  <= rdBufferA[cb_rdAddrA+7'd16] ;
                         outDataA[17]  <= rdBufferA[cb_rdAddrA+7'd17] ;
                         outDataA[18]  <= rdBufferA[cb_rdAddrA+7'd18] ;
                         outDataA[19]  <= rdBufferA[cb_rdAddrA+7'd19] ;
                         outDataA[20]  <= rdBufferA[cb_rdAddrA+7'd20] ;
                         outDataA[21]  <= rdBufferA[cb_rdAddrA+7'd21] ;
                         outDataA[22]  <= rdBufferA[cb_rdAddrA+7'd22] ;
                         outDataA[23]  <= rdBufferA[cb_rdAddrA+7'd23] ;
                         outDataA[24]  <= rdBufferA[cb_rdAddrA+7'd24] ;
                         outDataA[25]  <= rdBufferA[cb_rdAddrA+7'd25] ;
                         outDataA[26]  <= rdBufferA[cb_rdAddrA+7'd26] ;
                         outDataA[27]  <= rdBufferA[cb_rdAddrA+7'd27] ;
                         outDataA[28]  <= rdBufferA[cb_rdAddrA+7'd28] ;
                         outDataA[29]  <= rdBufferA[cb_rdAddrA+7'd29] ;
                         outDataA[30]  <= rdBufferA[cb_rdAddrA+7'd30] ;
                         outDataA[31]  <= rdBufferA[cb_rdAddrA+7'd31] ;
                    end
     end

always @( posedge clkB )
     begin
          if (~resetB)
               begin
                    rdenB <= 1'b0;
               end
          else
               if (startVotedB==1'b1)
                    begin
                         if (loadDataVotedB==1'b1)
                              begin
                                   rdenB <= 1'b1;
                                   rdBufferB[cb_wrAddrB+7'd0]  <= QAB[0] ;
                                   rdBufferB[cb_wrAddrB+7'd1]  <= QAB[1] ;
                                   rdBufferB[cb_wrAddrB+7'd2]  <= QAB[2] ;
                                   rdBufferB[cb_wrAddrB+7'd3]  <= QAB[3] ;
                                   rdBufferB[cb_wrAddrB+7'd4]  <= QAB[4] ;
                                   rdBufferB[cb_wrAddrB+7'd5]  <= QAB[5] ;
                                   rdBufferB[cb_wrAddrB+7'd6]  <= QAB[6] ;
                                   rdBufferB[cb_wrAddrB+7'd7]  <= QAB[7] ;
                                   rdBufferB[cb_wrAddrB+7'd8]  <= QAB[8] ;
                                   rdBufferB[cb_wrAddrB+7'd9]  <= QAB[9] ;
                                   rdBufferB[cb_wrAddrB+7'd10]  <= QAB[10] ;
                                   rdBufferB[cb_wrAddrB+7'd11]  <= QAB[11] ;
                                   rdBufferB[cb_wrAddrB+7'd12]  <= QAB[12] ;
                                   rdBufferB[cb_wrAddrB+7'd13]  <= QAB[13] ;
                                   rdBufferB[cb_wrAddrB+7'd14]  <= QAB[14] ;
                                   rdBufferB[cb_wrAddrB+7'd15]  <= QAB[15] ;
                                   rdBufferB[cb_wrAddrB+7'd16]  <= QAB[16] ;
                                   rdBufferB[cb_wrAddrB+7'd17]  <= QAB[17] ;
                                   rdBufferB[cb_wrAddrB+7'd18]  <= QAB[18] ;
                                   rdBufferB[cb_wrAddrB+7'd19]  <= QAB[19] ;
                                   rdBufferB[cb_wrAddrB+7'd20]  <= QAB[20] ;
                                   rdBufferB[cb_wrAddrB+7'd21]  <= QAB[21] ;
                                   rdBufferB[cb_wrAddrB+7'd22]  <= QAB[22] ;
                                   rdBufferB[cb_wrAddrB+7'd23]  <= QAB[23] ;
                                   rdBufferB[cb_wrAddrB+7'd24]  <= QAB[24] ;
                                   rdBufferB[cb_wrAddrB+7'd25]  <= QAB[25] ;
                                   rdBufferB[cb_wrAddrB+7'd26]  <= QAB[26] ;
                                   rdBufferB[cb_wrAddrB+7'd27]  <= QAB[27] ;
                                   rdBufferB[cb_wrAddrB+7'd28]  <= QAB[28] ;
                                   rdBufferB[cb_wrAddrB+7'd29]  <= QAB[29] ;
                                   rdBufferB[cb_wrAddrB+7'd30]  <= QAB[30] ;
                                   rdBufferB[cb_wrAddrB+7'd31]  <= QAB[31] ;
                                   rdBufferB[cb_wrAddrB+7'd32]  <= QAB[32] ;
                                   rdBufferB[cb_wrAddrB+7'd33]  <= QAB[33] ;
                                   rdBufferB[cb_wrAddrB+7'd34]  <= QAB[34] ;
                                   rdBufferB[cb_wrAddrB+7'd35]  <= QAB[35] ;
                                   rdBufferB[cb_wrAddrB+7'd36]  <= QAB[36] ;
                                   rdBufferB[cb_wrAddrB+7'd37]  <= QAB[37] ;
                                   rdBufferB[cb_wrAddrB+7'd38]  <= QAB[38] ;
                                   rdBufferB[cb_wrAddrB+7'd39]  <= QAB[39] ;
                              end
                         else
                              begin
                                   rdenB <= 1'b0;
                              end
                         outDataB[0]  <= rdBufferB[cb_rdAddrB] ;
                         outDataB[1]  <= rdBufferB[cb_rdAddrB+7'd1] ;
                         outDataB[2]  <= rdBufferB[cb_rdAddrB+7'd2] ;
                         outDataB[3]  <= rdBufferB[cb_rdAddrB+7'd3] ;
                         outDataB[4]  <= rdBufferB[cb_rdAddrB+7'd4] ;
                         outDataB[5]  <= rdBufferB[cb_rdAddrB+7'd5] ;
                         outDataB[6]  <= rdBufferB[cb_rdAddrB+7'd6] ;
                         outDataB[7]  <= rdBufferB[cb_rdAddrB+7'd7] ;
                         outDataB[8]  <= rdBufferB[cb_rdAddrB+7'd8] ;
                         outDataB[9]  <= rdBufferB[cb_rdAddrB+7'd9] ;
                         outDataB[10]  <= rdBufferB[cb_rdAddrB+7'd10] ;
                         outDataB[11]  <= rdBufferB[cb_rdAddrB+7'd11] ;
                         outDataB[12]  <= rdBufferB[cb_rdAddrB+7'd12] ;
                         outDataB[13]  <= rdBufferB[cb_rdAddrB+7'd13] ;
                         outDataB[14]  <= rdBufferB[cb_rdAddrB+7'd14] ;
                         outDataB[15]  <= rdBufferB[cb_rdAddrB+7'd15] ;
                         outDataB[16]  <= rdBufferB[cb_rdAddrB+7'd16] ;
                         outDataB[17]  <= rdBufferB[cb_rdAddrB+7'd17] ;
                         outDataB[18]  <= rdBufferB[cb_rdAddrB+7'd18] ;
                         outDataB[19]  <= rdBufferB[cb_rdAddrB+7'd19] ;
                         outDataB[20]  <= rdBufferB[cb_rdAddrB+7'd20] ;
                         outDataB[21]  <= rdBufferB[cb_rdAddrB+7'd21] ;
                         outDataB[22]  <= rdBufferB[cb_rdAddrB+7'd22] ;
                         outDataB[23]  <= rdBufferB[cb_rdAddrB+7'd23] ;
                         outDataB[24]  <= rdBufferB[cb_rdAddrB+7'd24] ;
                         outDataB[25]  <= rdBufferB[cb_rdAddrB+7'd25] ;
                         outDataB[26]  <= rdBufferB[cb_rdAddrB+7'd26] ;
                         outDataB[27]  <= rdBufferB[cb_rdAddrB+7'd27] ;
                         outDataB[28]  <= rdBufferB[cb_rdAddrB+7'd28] ;
                         outDataB[29]  <= rdBufferB[cb_rdAddrB+7'd29] ;
                         outDataB[30]  <= rdBufferB[cb_rdAddrB+7'd30] ;
                         outDataB[31]  <= rdBufferB[cb_rdAddrB+7'd31] ;
                    end
     end

always @( posedge clkC )
     begin
          if (~resetC)
               begin
                    rdenC <= 1'b0;
               end
          else
               if (startVotedC==1'b1)
                    begin
                         if (loadDataVotedC==1'b1)
                              begin
                                   rdenC <= 1'b1;
                                   rdBufferC[cb_wrAddrC+7'd0]  <= QAC[0] ;
                                   rdBufferC[cb_wrAddrC+7'd1]  <= QAC[1] ;
                                   rdBufferC[cb_wrAddrC+7'd2]  <= QAC[2] ;
                                   rdBufferC[cb_wrAddrC+7'd3]  <= QAC[3] ;
                                   rdBufferC[cb_wrAddrC+7'd4]  <= QAC[4] ;
                                   rdBufferC[cb_wrAddrC+7'd5]  <= QAC[5] ;
                                   rdBufferC[cb_wrAddrC+7'd6]  <= QAC[6] ;
                                   rdBufferC[cb_wrAddrC+7'd7]  <= QAC[7] ;
                                   rdBufferC[cb_wrAddrC+7'd8]  <= QAC[8] ;
                                   rdBufferC[cb_wrAddrC+7'd9]  <= QAC[9] ;
                                   rdBufferC[cb_wrAddrC+7'd10]  <= QAC[10] ;
                                   rdBufferC[cb_wrAddrC+7'd11]  <= QAC[11] ;
                                   rdBufferC[cb_wrAddrC+7'd12]  <= QAC[12] ;
                                   rdBufferC[cb_wrAddrC+7'd13]  <= QAC[13] ;
                                   rdBufferC[cb_wrAddrC+7'd14]  <= QAC[14] ;
                                   rdBufferC[cb_wrAddrC+7'd15]  <= QAC[15] ;
                                   rdBufferC[cb_wrAddrC+7'd16]  <= QAC[16] ;
                                   rdBufferC[cb_wrAddrC+7'd17]  <= QAC[17] ;
                                   rdBufferC[cb_wrAddrC+7'd18]  <= QAC[18] ;
                                   rdBufferC[cb_wrAddrC+7'd19]  <= QAC[19] ;
                                   rdBufferC[cb_wrAddrC+7'd20]  <= QAC[20] ;
                                   rdBufferC[cb_wrAddrC+7'd21]  <= QAC[21] ;
                                   rdBufferC[cb_wrAddrC+7'd22]  <= QAC[22] ;
                                   rdBufferC[cb_wrAddrC+7'd23]  <= QAC[23] ;
                                   rdBufferC[cb_wrAddrC+7'd24]  <= QAC[24] ;
                                   rdBufferC[cb_wrAddrC+7'd25]  <= QAC[25] ;
                                   rdBufferC[cb_wrAddrC+7'd26]  <= QAC[26] ;
                                   rdBufferC[cb_wrAddrC+7'd27]  <= QAC[27] ;
                                   rdBufferC[cb_wrAddrC+7'd28]  <= QAC[28] ;
                                   rdBufferC[cb_wrAddrC+7'd29]  <= QAC[29] ;
                                   rdBufferC[cb_wrAddrC+7'd30]  <= QAC[30] ;
                                   rdBufferC[cb_wrAddrC+7'd31]  <= QAC[31] ;
                                   rdBufferC[cb_wrAddrC+7'd32]  <= QAC[32] ;
                                   rdBufferC[cb_wrAddrC+7'd33]  <= QAC[33] ;
                                   rdBufferC[cb_wrAddrC+7'd34]  <= QAC[34] ;
                                   rdBufferC[cb_wrAddrC+7'd35]  <= QAC[35] ;
                                   rdBufferC[cb_wrAddrC+7'd36]  <= QAC[36] ;
                                   rdBufferC[cb_wrAddrC+7'd37]  <= QAC[37] ;
                                   rdBufferC[cb_wrAddrC+7'd38]  <= QAC[38] ;
                                   rdBufferC[cb_wrAddrC+7'd39]  <= QAC[39] ;
                              end
                         else
                              begin
                                   rdenC <= 1'b0;
                              end
                         outDataC[0]  <= rdBufferC[cb_rdAddrC] ;
                         outDataC[1]  <= rdBufferC[cb_rdAddrC+7'd1] ;
                         outDataC[2]  <= rdBufferC[cb_rdAddrC+7'd2] ;
                         outDataC[3]  <= rdBufferC[cb_rdAddrC+7'd3] ;
                         outDataC[4]  <= rdBufferC[cb_rdAddrC+7'd4] ;
                         outDataC[5]  <= rdBufferC[cb_rdAddrC+7'd5] ;
                         outDataC[6]  <= rdBufferC[cb_rdAddrC+7'd6] ;
                         outDataC[7]  <= rdBufferC[cb_rdAddrC+7'd7] ;
                         outDataC[8]  <= rdBufferC[cb_rdAddrC+7'd8] ;
                         outDataC[9]  <= rdBufferC[cb_rdAddrC+7'd9] ;
                         outDataC[10]  <= rdBufferC[cb_rdAddrC+7'd10] ;
                         outDataC[11]  <= rdBufferC[cb_rdAddrC+7'd11] ;
                         outDataC[12]  <= rdBufferC[cb_rdAddrC+7'd12] ;
                         outDataC[13]  <= rdBufferC[cb_rdAddrC+7'd13] ;
                         outDataC[14]  <= rdBufferC[cb_rdAddrC+7'd14] ;
                         outDataC[15]  <= rdBufferC[cb_rdAddrC+7'd15] ;
                         outDataC[16]  <= rdBufferC[cb_rdAddrC+7'd16] ;
                         outDataC[17]  <= rdBufferC[cb_rdAddrC+7'd17] ;
                         outDataC[18]  <= rdBufferC[cb_rdAddrC+7'd18] ;
                         outDataC[19]  <= rdBufferC[cb_rdAddrC+7'd19] ;
                         outDataC[20]  <= rdBufferC[cb_rdAddrC+7'd20] ;
                         outDataC[21]  <= rdBufferC[cb_rdAddrC+7'd21] ;
                         outDataC[22]  <= rdBufferC[cb_rdAddrC+7'd22] ;
                         outDataC[23]  <= rdBufferC[cb_rdAddrC+7'd23] ;
                         outDataC[24]  <= rdBufferC[cb_rdAddrC+7'd24] ;
                         outDataC[25]  <= rdBufferC[cb_rdAddrC+7'd25] ;
                         outDataC[26]  <= rdBufferC[cb_rdAddrC+7'd26] ;
                         outDataC[27]  <= rdBufferC[cb_rdAddrC+7'd27] ;
                         outDataC[28]  <= rdBufferC[cb_rdAddrC+7'd28] ;
                         outDataC[29]  <= rdBufferC[cb_rdAddrC+7'd29] ;
                         outDataC[30]  <= rdBufferC[cb_rdAddrC+7'd30] ;
                         outDataC[31]  <= rdBufferC[cb_rdAddrC+7'd31] ;
                    end
     end

always @( negedge clkA )
     begin
          if (resetA)
               begin
                    if (rateA==2'b00)
                         begin
                              doutA[0]  <= triggerDataSizeA>5'd7 ? triggerDataA[triggerDataSizeA-5'd8]  : outDataA[0] ;
                              doutA[1]  <= triggerDataSizeA>5'd6 ? triggerDataA[triggerDataSizeA-5'd7]  : outDataA[1] ;
                              doutA[2]  <= triggerDataSizeA>5'd5 ? triggerDataA[triggerDataSizeA-5'd6]  : outDataA[2] ;
                              doutA[3]  <= triggerDataSizeA>5'd4 ? triggerDataA[triggerDataSizeA-5'd5]  : outDataA[3] ;
                              doutA[4]  <= triggerDataSizeA>5'd3 ? triggerDataA[triggerDataSizeA-5'd4]  : outDataA[4] ;
                              doutA[5]  <= triggerDataSizeA>5'd2 ? triggerDataA[triggerDataSizeA-5'd3]  : outDataA[5] ;
                              doutA[6]  <= triggerDataSizeA>5'd1 ? triggerDataA[triggerDataSizeA-5'd2]  : outDataA[6] ;
                              doutA[7]  <= triggerDataSizeA>5'd0 ? triggerDataA[triggerDataSizeA-5'd1]  : outDataA[7] ;
                         end
                    else
                         if (rateA==2'b01)
                              begin
                                   doutA[0]  <= triggerDataSizeA>5'd15 ? triggerDataA[triggerDataSizeA-5'd16]  : outDataA[0] ;
                                   doutA[1]  <= triggerDataSizeA>5'd14 ? triggerDataA[triggerDataSizeA-5'd15]  : outDataA[1] ;
                                   doutA[2]  <= triggerDataSizeA>5'd13 ? triggerDataA[triggerDataSizeA-5'd14]  : outDataA[2] ;
                                   doutA[3]  <= triggerDataSizeA>5'd12 ? triggerDataA[triggerDataSizeA-5'd13]  : outDataA[3] ;
                                   doutA[4]  <= triggerDataSizeA>5'd11 ? triggerDataA[triggerDataSizeA-5'd12]  : outDataA[4] ;
                                   doutA[5]  <= triggerDataSizeA>5'd10 ? triggerDataA[triggerDataSizeA-5'd11]  : outDataA[5] ;
                                   doutA[6]  <= triggerDataSizeA>5'd9 ? triggerDataA[triggerDataSizeA-5'd10]  : outDataA[6] ;
                                   doutA[7]  <= triggerDataSizeA>5'd8 ? triggerDataA[triggerDataSizeA-5'd9]  : outDataA[7] ;
                                   doutA[8]  <= triggerDataSizeA>5'd7 ? triggerDataA[triggerDataSizeA-5'd8]  : outDataA[8] ;
                                   doutA[9]  <= triggerDataSizeA>5'd6 ? triggerDataA[triggerDataSizeA-5'd7]  : outDataA[9] ;
                                   doutA[10]  <= triggerDataSizeA>5'd5 ? triggerDataA[triggerDataSizeA-5'd6]  : outDataA[10] ;
                                   doutA[11]  <= triggerDataSizeA>5'd4 ? triggerDataA[triggerDataSizeA-5'd5]  : outDataA[11] ;
                                   doutA[12]  <= triggerDataSizeA>5'd3 ? triggerDataA[triggerDataSizeA-5'd4]  : outDataA[12] ;
                                   doutA[13]  <= triggerDataSizeA>5'd2 ? triggerDataA[triggerDataSizeA-5'd3]  : outDataA[13] ;
                                   doutA[14]  <= triggerDataSizeA>5'd1 ? triggerDataA[triggerDataSizeA-5'd2]  : outDataA[14] ;
                                   doutA[15]  <= triggerDataSizeA>5'd0 ? triggerDataA[triggerDataSizeA-5'd1]  : outDataA[15] ;
                              end
                         else
                              begin
                                   doutA[15:0]  <= outDataA[15:0] ;
                                   doutA[16]  <= triggerDataSizeA>5'd15 ? triggerDataA[triggerDataSizeA-5'd16]  : outDataA[16] ;
                                   doutA[17]  <= triggerDataSizeA>5'd14 ? triggerDataA[triggerDataSizeA-5'd15]  : outDataA[17] ;
                                   doutA[18]  <= triggerDataSizeA>5'd13 ? triggerDataA[triggerDataSizeA-5'd14]  : outDataA[18] ;
                                   doutA[19]  <= triggerDataSizeA>5'd12 ? triggerDataA[triggerDataSizeA-5'd13]  : outDataA[19] ;
                                   doutA[20]  <= triggerDataSizeA>5'd11 ? triggerDataA[triggerDataSizeA-5'd12]  : outDataA[20] ;
                                   doutA[21]  <= triggerDataSizeA>5'd10 ? triggerDataA[triggerDataSizeA-5'd11]  : outDataA[21] ;
                                   doutA[22]  <= triggerDataSizeA>5'd9 ? triggerDataA[triggerDataSizeA-5'd10]  : outDataA[22] ;
                                   doutA[23]  <= triggerDataSizeA>5'd8 ? triggerDataA[triggerDataSizeA-5'd9]  : outDataA[23] ;
                                   doutA[24]  <= triggerDataSizeA>5'd7 ? triggerDataA[triggerDataSizeA-5'd8]  : outDataA[24] ;
                                   doutA[25]  <= triggerDataSizeA>5'd6 ? triggerDataA[triggerDataSizeA-5'd7]  : outDataA[25] ;
                                   doutA[26]  <= triggerDataSizeA>5'd5 ? triggerDataA[triggerDataSizeA-5'd6]  : outDataA[26] ;
                                   doutA[27]  <= triggerDataSizeA>5'd4 ? triggerDataA[triggerDataSizeA-5'd5]  : outDataA[27] ;
                                   doutA[28]  <= triggerDataSizeA>5'd3 ? triggerDataA[triggerDataSizeA-5'd4]  : outDataA[28] ;
                                   doutA[29]  <= triggerDataSizeA>5'd2 ? triggerDataA[triggerDataSizeA-5'd3]  : outDataA[29] ;
                                   doutA[30]  <= triggerDataSizeA>5'd1 ? triggerDataA[triggerDataSizeA-5'd2]  : outDataA[30] ;
                                   doutA[31]  <= triggerDataSizeA>5'd0 ? triggerDataA[triggerDataSizeA-5'd1]  : outDataA[31] ;
                              end
               end
     end

always @( negedge clkB )
     begin
          if (resetB)
               begin
                    if (rateB==2'b00)
                         begin
                              doutB[0]  <= triggerDataSizeB>5'd7 ? triggerDataB[triggerDataSizeB-5'd8]  : outDataB[0] ;
                              doutB[1]  <= triggerDataSizeB>5'd6 ? triggerDataB[triggerDataSizeB-5'd7]  : outDataB[1] ;
                              doutB[2]  <= triggerDataSizeB>5'd5 ? triggerDataB[triggerDataSizeB-5'd6]  : outDataB[2] ;
                              doutB[3]  <= triggerDataSizeB>5'd4 ? triggerDataB[triggerDataSizeB-5'd5]  : outDataB[3] ;
                              doutB[4]  <= triggerDataSizeB>5'd3 ? triggerDataB[triggerDataSizeB-5'd4]  : outDataB[4] ;
                              doutB[5]  <= triggerDataSizeB>5'd2 ? triggerDataB[triggerDataSizeB-5'd3]  : outDataB[5] ;
                              doutB[6]  <= triggerDataSizeB>5'd1 ? triggerDataB[triggerDataSizeB-5'd2]  : outDataB[6] ;
                              doutB[7]  <= triggerDataSizeB>5'd0 ? triggerDataB[triggerDataSizeB-5'd1]  : outDataB[7] ;
                         end
                    else
                         if (rateB==2'b01)
                              begin
                                   doutB[0]  <= triggerDataSizeB>5'd15 ? triggerDataB[triggerDataSizeB-5'd16]  : outDataB[0] ;
                                   doutB[1]  <= triggerDataSizeB>5'd14 ? triggerDataB[triggerDataSizeB-5'd15]  : outDataB[1] ;
                                   doutB[2]  <= triggerDataSizeB>5'd13 ? triggerDataB[triggerDataSizeB-5'd14]  : outDataB[2] ;
                                   doutB[3]  <= triggerDataSizeB>5'd12 ? triggerDataB[triggerDataSizeB-5'd13]  : outDataB[3] ;
                                   doutB[4]  <= triggerDataSizeB>5'd11 ? triggerDataB[triggerDataSizeB-5'd12]  : outDataB[4] ;
                                   doutB[5]  <= triggerDataSizeB>5'd10 ? triggerDataB[triggerDataSizeB-5'd11]  : outDataB[5] ;
                                   doutB[6]  <= triggerDataSizeB>5'd9 ? triggerDataB[triggerDataSizeB-5'd10]  : outDataB[6] ;
                                   doutB[7]  <= triggerDataSizeB>5'd8 ? triggerDataB[triggerDataSizeB-5'd9]  : outDataB[7] ;
                                   doutB[8]  <= triggerDataSizeB>5'd7 ? triggerDataB[triggerDataSizeB-5'd8]  : outDataB[8] ;
                                   doutB[9]  <= triggerDataSizeB>5'd6 ? triggerDataB[triggerDataSizeB-5'd7]  : outDataB[9] ;
                                   doutB[10]  <= triggerDataSizeB>5'd5 ? triggerDataB[triggerDataSizeB-5'd6]  : outDataB[10] ;
                                   doutB[11]  <= triggerDataSizeB>5'd4 ? triggerDataB[triggerDataSizeB-5'd5]  : outDataB[11] ;
                                   doutB[12]  <= triggerDataSizeB>5'd3 ? triggerDataB[triggerDataSizeB-5'd4]  : outDataB[12] ;
                                   doutB[13]  <= triggerDataSizeB>5'd2 ? triggerDataB[triggerDataSizeB-5'd3]  : outDataB[13] ;
                                   doutB[14]  <= triggerDataSizeB>5'd1 ? triggerDataB[triggerDataSizeB-5'd2]  : outDataB[14] ;
                                   doutB[15]  <= triggerDataSizeB>5'd0 ? triggerDataB[triggerDataSizeB-5'd1]  : outDataB[15] ;
                              end
                         else
                              begin
                                   doutB[15:0]  <= outDataB[15:0] ;
                                   doutB[16]  <= triggerDataSizeB>5'd15 ? triggerDataB[triggerDataSizeB-5'd16]  : outDataB[16] ;
                                   doutB[17]  <= triggerDataSizeB>5'd14 ? triggerDataB[triggerDataSizeB-5'd15]  : outDataB[17] ;
                                   doutB[18]  <= triggerDataSizeB>5'd13 ? triggerDataB[triggerDataSizeB-5'd14]  : outDataB[18] ;
                                   doutB[19]  <= triggerDataSizeB>5'd12 ? triggerDataB[triggerDataSizeB-5'd13]  : outDataB[19] ;
                                   doutB[20]  <= triggerDataSizeB>5'd11 ? triggerDataB[triggerDataSizeB-5'd12]  : outDataB[20] ;
                                   doutB[21]  <= triggerDataSizeB>5'd10 ? triggerDataB[triggerDataSizeB-5'd11]  : outDataB[21] ;
                                   doutB[22]  <= triggerDataSizeB>5'd9 ? triggerDataB[triggerDataSizeB-5'd10]  : outDataB[22] ;
                                   doutB[23]  <= triggerDataSizeB>5'd8 ? triggerDataB[triggerDataSizeB-5'd9]  : outDataB[23] ;
                                   doutB[24]  <= triggerDataSizeB>5'd7 ? triggerDataB[triggerDataSizeB-5'd8]  : outDataB[24] ;
                                   doutB[25]  <= triggerDataSizeB>5'd6 ? triggerDataB[triggerDataSizeB-5'd7]  : outDataB[25] ;
                                   doutB[26]  <= triggerDataSizeB>5'd5 ? triggerDataB[triggerDataSizeB-5'd6]  : outDataB[26] ;
                                   doutB[27]  <= triggerDataSizeB>5'd4 ? triggerDataB[triggerDataSizeB-5'd5]  : outDataB[27] ;
                                   doutB[28]  <= triggerDataSizeB>5'd3 ? triggerDataB[triggerDataSizeB-5'd4]  : outDataB[28] ;
                                   doutB[29]  <= triggerDataSizeB>5'd2 ? triggerDataB[triggerDataSizeB-5'd3]  : outDataB[29] ;
                                   doutB[30]  <= triggerDataSizeB>5'd1 ? triggerDataB[triggerDataSizeB-5'd2]  : outDataB[30] ;
                                   doutB[31]  <= triggerDataSizeB>5'd0 ? triggerDataB[triggerDataSizeB-5'd1]  : outDataB[31] ;
                              end
               end
     end

always @( negedge clkC )
     begin
          if (resetC)
               begin
                    if (rateC==2'b00)
                         begin
                              doutC[0]  <= triggerDataSizeC>5'd7 ? triggerDataC[triggerDataSizeC-5'd8]  : outDataC[0] ;
                              doutC[1]  <= triggerDataSizeC>5'd6 ? triggerDataC[triggerDataSizeC-5'd7]  : outDataC[1] ;
                              doutC[2]  <= triggerDataSizeC>5'd5 ? triggerDataC[triggerDataSizeC-5'd6]  : outDataC[2] ;
                              doutC[3]  <= triggerDataSizeC>5'd4 ? triggerDataC[triggerDataSizeC-5'd5]  : outDataC[3] ;
                              doutC[4]  <= triggerDataSizeC>5'd3 ? triggerDataC[triggerDataSizeC-5'd4]  : outDataC[4] ;
                              doutC[5]  <= triggerDataSizeC>5'd2 ? triggerDataC[triggerDataSizeC-5'd3]  : outDataC[5] ;
                              doutC[6]  <= triggerDataSizeC>5'd1 ? triggerDataC[triggerDataSizeC-5'd2]  : outDataC[6] ;
                              doutC[7]  <= triggerDataSizeC>5'd0 ? triggerDataC[triggerDataSizeC-5'd1]  : outDataC[7] ;
                         end
                    else
                         if (rateC==2'b01)
                              begin
                                   doutC[0]  <= triggerDataSizeC>5'd15 ? triggerDataC[triggerDataSizeC-5'd16]  : outDataC[0] ;
                                   doutC[1]  <= triggerDataSizeC>5'd14 ? triggerDataC[triggerDataSizeC-5'd15]  : outDataC[1] ;
                                   doutC[2]  <= triggerDataSizeC>5'd13 ? triggerDataC[triggerDataSizeC-5'd14]  : outDataC[2] ;
                                   doutC[3]  <= triggerDataSizeC>5'd12 ? triggerDataC[triggerDataSizeC-5'd13]  : outDataC[3] ;
                                   doutC[4]  <= triggerDataSizeC>5'd11 ? triggerDataC[triggerDataSizeC-5'd12]  : outDataC[4] ;
                                   doutC[5]  <= triggerDataSizeC>5'd10 ? triggerDataC[triggerDataSizeC-5'd11]  : outDataC[5] ;
                                   doutC[6]  <= triggerDataSizeC>5'd9 ? triggerDataC[triggerDataSizeC-5'd10]  : outDataC[6] ;
                                   doutC[7]  <= triggerDataSizeC>5'd8 ? triggerDataC[triggerDataSizeC-5'd9]  : outDataC[7] ;
                                   doutC[8]  <= triggerDataSizeC>5'd7 ? triggerDataC[triggerDataSizeC-5'd8]  : outDataC[8] ;
                                   doutC[9]  <= triggerDataSizeC>5'd6 ? triggerDataC[triggerDataSizeC-5'd7]  : outDataC[9] ;
                                   doutC[10]  <= triggerDataSizeC>5'd5 ? triggerDataC[triggerDataSizeC-5'd6]  : outDataC[10] ;
                                   doutC[11]  <= triggerDataSizeC>5'd4 ? triggerDataC[triggerDataSizeC-5'd5]  : outDataC[11] ;
                                   doutC[12]  <= triggerDataSizeC>5'd3 ? triggerDataC[triggerDataSizeC-5'd4]  : outDataC[12] ;
                                   doutC[13]  <= triggerDataSizeC>5'd2 ? triggerDataC[triggerDataSizeC-5'd3]  : outDataC[13] ;
                                   doutC[14]  <= triggerDataSizeC>5'd1 ? triggerDataC[triggerDataSizeC-5'd2]  : outDataC[14] ;
                                   doutC[15]  <= triggerDataSizeC>5'd0 ? triggerDataC[triggerDataSizeC-5'd1]  : outDataC[15] ;
                              end
                         else
                              begin
                                   doutC[15:0]  <= outDataC[15:0] ;
                                   doutC[16]  <= triggerDataSizeC>5'd15 ? triggerDataC[triggerDataSizeC-5'd16]  : outDataC[16] ;
                                   doutC[17]  <= triggerDataSizeC>5'd14 ? triggerDataC[triggerDataSizeC-5'd15]  : outDataC[17] ;
                                   doutC[18]  <= triggerDataSizeC>5'd13 ? triggerDataC[triggerDataSizeC-5'd14]  : outDataC[18] ;
                                   doutC[19]  <= triggerDataSizeC>5'd12 ? triggerDataC[triggerDataSizeC-5'd13]  : outDataC[19] ;
                                   doutC[20]  <= triggerDataSizeC>5'd11 ? triggerDataC[triggerDataSizeC-5'd12]  : outDataC[20] ;
                                   doutC[21]  <= triggerDataSizeC>5'd10 ? triggerDataC[triggerDataSizeC-5'd11]  : outDataC[21] ;
                                   doutC[22]  <= triggerDataSizeC>5'd9 ? triggerDataC[triggerDataSizeC-5'd10]  : outDataC[22] ;
                                   doutC[23]  <= triggerDataSizeC>5'd8 ? triggerDataC[triggerDataSizeC-5'd9]  : outDataC[23] ;
                                   doutC[24]  <= triggerDataSizeC>5'd7 ? triggerDataC[triggerDataSizeC-5'd8]  : outDataC[24] ;
                                   doutC[25]  <= triggerDataSizeC>5'd6 ? triggerDataC[triggerDataSizeC-5'd7]  : outDataC[25] ;
                                   doutC[26]  <= triggerDataSizeC>5'd5 ? triggerDataC[triggerDataSizeC-5'd6]  : outDataC[26] ;
                                   doutC[27]  <= triggerDataSizeC>5'd4 ? triggerDataC[triggerDataSizeC-5'd5]  : outDataC[27] ;
                                   doutC[28]  <= triggerDataSizeC>5'd3 ? triggerDataC[triggerDataSizeC-5'd4]  : outDataC[28] ;
                                   doutC[29]  <= triggerDataSizeC>5'd2 ? triggerDataC[triggerDataSizeC-5'd3]  : outDataC[29] ;
                                   doutC[30]  <= triggerDataSizeC>5'd1 ? triggerDataC[triggerDataSizeC-5'd2]  : outDataC[30] ;
                                   doutC[31]  <= triggerDataSizeC>5'd0 ? triggerDataC[triggerDataSizeC-5'd1]  : outDataC[31] ;
                              end
               end
     end
wire [FIFODEPTH-1:0] wordCountA;
wire [FIFODEPTH-1:0] wordCountB;
wire [FIFODEPTH-1:0] wordCountC;
wire fullA;
wire fullB;
wire fullC;
wire emptyA;
wire emptyB;
wire emptyC;
assign almostFullA =  wordCountA>highLevel;
assign almostFullB =  wordCountB>highLevel;
assign almostFullC =  wordCountC>highLevel;
assign almostEmptyA =  wordCountA<lowLevel;
assign almostEmptyB =  wordCountB<lowLevel;
assign almostEmptyC =  wordCountC<lowLevel;

FIFOWRCtrlerTMR #(.WIDTH(FIFODEPTH), .clockEdge(1)) dataBufCtrl (
          .clkA(clkA),
          .clkB(clkB),
          .clkC(clkC),
          .resetA(resetA),
          .resetB(resetB),
          .resetC(resetC),
          .wrenA(wrenA),
          .wrenB(wrenB),
          .wrenC(wrenC),
          .rdenA(rdenA),
          .rdenB(rdenB),
          .rdenC(rdenC),
          .enWordCountA(1'b1),
          .enWordCountB(1'b1),
          .enWordCountC(1'b1),
          .emptyA(emptyA),
          .emptyB(emptyB),
          .emptyC(emptyC),
          .fullA(fullA),
          .fullB(fullB),
          .fullC(fullC),
          .wrAddrA(wrAddrA),
          .wrAddrB(wrAddrB),
          .wrAddrC(wrAddrC),
          .rdAddrA(rdAddrA),
          .rdAddrB(rdAddrB),
          .rdAddrC(rdAddrC),
          .wordCountA(wordCountA[FIFODEPTH-1:0] ),
          .wordCountB(wordCountB[FIFODEPTH-1:0] ),
          .wordCountC(wordCountC[FIFODEPTH-1:0] )
          );

majorityVoter loadDataVoterA (
          .inA(loadDataA),
          .inB(loadDataB),
          .inC(loadDataC),
          .out(loadDataVotedA),
          .tmrErr(loadDataTmrErrorA)
          );

majorityVoter #(.WIDTH(7)) nextWrAddrVoterA (
          .inA(nextWrAddrA),
          .inB(nextWrAddrB),
          .inC(nextWrAddrC),
          .out(nextWrAddrVotedA),
          .tmrErr(nextWrAddrTmrErrorA)
          );

majorityVoter #(.WIDTH(7)) nextRdAddrVoterA (
          .inA(nextRdAddrA),
          .inB(nextRdAddrB),
          .inC(nextRdAddrC),
          .out(nextRdAddrVotedA),
          .tmrErr(nextRdAddrTmrErrorA)
          );

majorityVoter startVoterA (
          .inA(startA),
          .inB(startB),
          .inC(startC),
          .out(startVotedA),
          .tmrErr(startTmrErrorA)
          );

majorityVoter almostEmptyVoterA (
          .inA(almostEmptyA),
          .inB(almostEmptyB),
          .inC(almostEmptyC),
          .out(almostEmptyVotedA),
          .tmrErr(almostEmptyTmrErrorA)
          );

majorityVoter #(.WIDTH(7)) nextRdAddrVoterB (
          .inA(nextRdAddrA),
          .inB(nextRdAddrB),
          .inC(nextRdAddrC),
          .out(nextRdAddrVotedB),
          .tmrErr(nextRdAddrTmrErrorB)
          );

majorityVoter #(.WIDTH(7)) nextWrAddrVoterB (
          .inA(nextWrAddrA),
          .inB(nextWrAddrB),
          .inC(nextWrAddrC),
          .out(nextWrAddrVotedB),
          .tmrErr(nextWrAddrTmrErrorB)
          );

majorityVoter loadDataVoterB (
          .inA(loadDataA),
          .inB(loadDataB),
          .inC(loadDataC),
          .out(loadDataVotedB),
          .tmrErr(loadDataTmrErrorB)
          );

majorityVoter almostEmptyVoterB (
          .inA(almostEmptyA),
          .inB(almostEmptyB),
          .inC(almostEmptyC),
          .out(almostEmptyVotedB),
          .tmrErr(almostEmptyTmrErrorB)
          );

majorityVoter startVoterB (
          .inA(startA),
          .inB(startB),
          .inC(startC),
          .out(startVotedB),
          .tmrErr(startTmrErrorB)
          );

majorityVoter #(.WIDTH(7)) nextWrAddrVoterC (
          .inA(nextWrAddrA),
          .inB(nextWrAddrB),
          .inC(nextWrAddrC),
          .out(nextWrAddrVotedC),
          .tmrErr(nextWrAddrTmrErrorC)
          );

majorityVoter #(.WIDTH(7)) nextRdAddrVoterC (
          .inA(nextRdAddrA),
          .inB(nextRdAddrB),
          .inC(nextRdAddrC),
          .out(nextRdAddrVotedC),
          .tmrErr(nextRdAddrTmrErrorC)
          );

majorityVoter loadDataVoterC (
          .inA(loadDataA),
          .inB(loadDataB),
          .inC(loadDataC),
          .out(loadDataVotedC),
          .tmrErr(loadDataTmrErrorC)
          );

majorityVoter almostEmptyVoterC (
          .inA(almostEmptyA),
          .inB(almostEmptyB),
          .inC(almostEmptyC),
          .out(almostEmptyVotedC),
          .tmrErr(almostEmptyTmrErrorC)
          );

majorityVoter startVoterC (
          .inA(startA),
          .inB(startB),
          .inC(startC),
          .out(startVotedC),
          .tmrErr(startTmrErrorC)
          );
endmodule

