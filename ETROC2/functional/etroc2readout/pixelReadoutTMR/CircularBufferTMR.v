/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR2/CircularBufferTMR.v                                                        *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 13/05/2021 11:57:13                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel2.cnf       *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: CircularBuffer.v                                                                       *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-05-13 01:05:05.789325                                         *
 *           File Size         : 3867                                                               *
 *           MD5 hash          : c537f16bb596bc64a1d8f1a2a3094606                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

`include  "commonDefinition.v"

module circularBufferTMR(
     input  clk,
     input  dis,
     input [8:0] wrAddr,
     input [28:0] din,
     input  inHit,
     input  L1APre,
     input  L1A,
     input  L1ADelay,
     input [8:0] latencyL1A,
     output [35:0] dout,
     output  hit,
     output  E1A,
     output  E2A
);
reg  rdenData;
wire outHit;

always @( posedge clk )
     begin
          if (!dis)
               rdenData <= L1ADelay&outHit;
     end
wire gatedWrClk;
wire gatedRdClk;

gateClockCellTMR gateWrInst (
          .clk(clk),
          .gate(inHit&~dis),
          .enableGate(1'b1),
          .gatedClk(gatedWrClk)
          );

gateClockCellTMR gateRdInst (
          .clk(~clk),
          .gate(rdenData&~dis),
          .enableGate(1'b1),
          .gatedClk(gatedRdClk)
          );
reg  [8:0] latchedwrAddr1;

always @( posedge clk )
     begin
          if (~dis&L1ADelay&outHit)
               latchedwrAddr1 <= wrAddr;
     end
wire [8:0] rdAddrData =  latchedwrAddr1-latencyL1A;

wire [8:0] gatedWrAddr;
wire delayInHit;
assign #0.05  delayInHit = inHit;
assign gatedWrAddr = {9{delayInHit}} & wrAddr;

cb_data_mem_rtl_topTMR dataMem (
          .QA(dout),
          .CLKA(gatedRdClk),
          .CENA(~rdenData),
          .AA(rdAddrData),
          .CLKB(gatedWrClk),
          .CENB(~inHit),
          .AB(gatedWrAddr),
          .DB(din),
          .EMAA(3'b010),
          .EMAB(3'b010),
          .RET1N(1'b1),
          .COLLDISN(1'b1)
          );
reg  [8:0] latchedwrAddr2;

always @( posedge clk )
     begin
          if (~dis&L1APre)
               latchedwrAddr2 <= wrAddr;
     end
wire [8:0] rdAddrHit =  latchedwrAddr2-(latencyL1A-9'd1);
wire rdenHit =  L1A;
wire hitE1A;

hitSRAMCircularBufferTMR hitMem (
          .clk(clk),
          .dis(dis),
          .hit(inHit),
          .rden(rdenHit),
          .E1A(hitE1A),
          .E2A(),
          .rdAddr(rdAddrHit),
          .wrAddr(wrAddr),
          .outHit(outHit)
          );
reg  outHitReg;
reg  E1AReg;

always @( negedge clk )
     begin
          if (~dis)
               begin
                    outHitReg <= outHit;
                    E1AReg <= hitE1A;
               end
     end
assign hit =  outHitReg;
assign E1A =  E1AReg;
assign E2A =  1'b0;
endmodule

