/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR2/L1EventBufferTMR.v                                                         *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 13/05/2021 11:57:13                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel2.cnf       *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: L1EventBuffer.v                                                                        *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-05-13 01:20:09.355373                                         *
 *           File Size         : 4431                                                               *
 *           MD5 hash          : 69464898fb7f9b1a1a34a6e9498dd2ff                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

`include  "commonDefinition.v"

module L1EventBufferTMR #(
  parameter ADDRWIDTH=7
)(
     input  clk,
     input  reset,
     input  dis,
     input [35:0] din,
     input  inHit,
     input [ADDRWIDTH-1:0] wrAddr,
     input [ADDRWIDTH-1:0] rdAddr,
     input  preLoad,
     input  E1A,
     input  E2A,
     input  wren,
     input  read,
     input  load,
     output  unreadHit,
     output  outE1A,
     output  outE2A,
     output [35:0] dout
);
wire gatedRdClk;
wire gatedWrClk;
wire outHit;
wire hitE1A;
wire hitE2A;
wire loadHit;
assign loadHit =  preLoad;
reg  wrenHit;
wire wrenData;
reg  inHit1D;

always @( posedge clk )
     begin
          if (~dis)
               begin
                    wrenHit <= wren;
                    inHit1D <= inHit;
               end
     end
assign wrenData =  inHit1D&wrenHit;

hitSRAML1BufferTMR #(.ADDRWIDTH(ADDRWIDTH)) hitBuffer (
          .clk(clk),
          .dis(dis),
          .hit(inHit1D),
          .rden(loadHit),
          .E1A(hitE1A),
          .E2A(hitE2A),
          .wren(wrenHit),
          .rdAddr(rdAddr),
          .wrAddr(wrAddr),
          .outHit(outHit)
          );
reg  outHitReg;
reg  hitE1AReg;
reg  hitE2AReg;

always @( posedge clk )
     begin
          if (!reset)
               begin
                    hitE1AReg <= 1'b0;
                    hitE2AReg <= 1'b0;
               end
          else
               if (~dis)
                    begin
                         hitE1AReg <= hitE1A;
                         hitE2AReg <= hitE2A;
                    end
     end

always @( posedge clk )
     begin
          if (!reset)
               begin
                    outHitReg <= 1'b0;
               end
          else
               if (~dis)
                    begin
                         if (load==1'b1)
                              begin
                                   outHitReg <= outHit;
                              end
                         else if(read == 1'b1)
                              begin
                                   outHitReg <= 1'b0;
                              end
                    end
               else
                    begin
                         outHitReg <= 1'b0;                   
                    end
     end
assign unreadHit =  outHitReg&~dis;
wire loadData;
assign loadData =  outHit&load;

gateClockCellTMR gateWrInst (
          .clk(~clk),
          .gate(wrenData&~dis),
          .enableGate(1'b1),
          .gatedClk(gatedWrClk)
          );

gateClockCellTMR gateRdInst (
          .clk(clk),
          .gate(loadData&~dis),
          .enableGate(1'b1),
          .gatedClk(gatedRdClk)
          );
wire [ADDRWIDTH-1:0] wrAddrData;
wire [ADDRWIDTH-1:0] rdAddrData;
assign rdAddrData =  {ADDRWIDTH{loadData}}&rdAddr;
assign wrAddrData =  {ADDRWIDTH{wrenData}}&wrAddr;
wire dataE1A;
wire dataE2A;
reg [37:0] wrData;
wire [37:0] rdData;
//assign wrData =  {din,E2A,E1A};

always @(posedge clk)
begin
     if(wren & inHit & ~dis)
          wrData  <= {din,E2A,E1A};     
end

`ifdef LATCH_RAM
    latchedBasedRAM #(.data_width(38),.depth(128),.log_depth(7),.delay(4)) dataBuffer
`else
    L1_data_mem dataBuffer
`endif

          (
          .QA(rdData),
          .CLKA(gatedRdClk),
          .CENA(~loadData),
          .AA(rdAddrData),
          .CLKB(gatedWrClk),
          .CENB(~wrenData),
          .AB(wrAddrData),
          .DB(wrData),
          .EMAA(3'b010),
          .EMAB(3'b010),
          .RET1N(1'b1),
          .COLLDISN(1'b1)
          );
assign dout =  rdData[37:2] ;
assign dataE1A =  rdData[0] ;
assign outE1A =  dataE1A|hitE1AReg;
assign outE2A =  hitE2AReg;
endmodule

