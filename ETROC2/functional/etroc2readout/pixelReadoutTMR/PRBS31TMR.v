/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR2/PRBS31TMR.v                                                                *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 17/05/2021 23:24:14                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel2.cnf       *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: PRBS31.v                                                                               *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-05-17 22:47:40.734320                                         *
 *           File Size         : 2657                                                               *
 *           MD5 hash          : bf3f9f8c49a60ee2c119376479f84967                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

module forwardPRBS31SeedTMR #(
  parameter WORDWIDTH=15,
  parameter FORWARDSTEPS=1
)(
     input [30:0] seedTMRA,
     input [30:0] seedTMRB,
     input [30:0] seedTMRC,
     output [30:0] newSeedTMRA,
     output [30:0] newSeedTMRB,
     output [30:0] newSeedTMRC
);
wire [30:0] cTMRA [ WORDWIDTH*FORWARDSTEPS : 0 ] ;
wire [30:0] cTMRB [ WORDWIDTH*FORWARDSTEPS : 0 ] ;
wire [30:0] cTMRC [ WORDWIDTH*FORWARDSTEPS : 0 ] ;
assign cTMRA[0]  =  seedTMRA;
assign cTMRB[0]  =  seedTMRB;
assign cTMRC[0]  =  seedTMRC;

generate
genvar i;

     for(i =  0;i<WORDWIDTH*FORWARDSTEPS;i =  i+1)
          begin : loop_itr 
               assign cTMRA[i+1]  =  {cTMRA[i] [3] ^cTMRA[i] [0] ,cTMRA[i] [30:1] };
               assign cTMRB[i+1]  =  {cTMRB[i] [3] ^cTMRB[i] [0] ,cTMRB[i] [30:1] };
               assign cTMRC[i+1]  =  {cTMRC[i] [3] ^cTMRC[i] [0] ,cTMRC[i] [30:1] };
          end

endgenerate
assign newSeedTMRA =  cTMRA[WORDWIDTH*FORWARDSTEPS] ;
assign newSeedTMRB =  cTMRB[WORDWIDTH*FORWARDSTEPS] ;
assign newSeedTMRC =  cTMRC[WORDWIDTH*FORWARDSTEPS] ;
endmodule

module nextPRBS31WordTMR #(
  parameter WORDWIDTH=15
)(
     input [30:0] seedTMRA,
     input [30:0] seedTMRB,
     input [30:0] seedTMRC,
     output [30:0] nextWordTMRA,
     output [30:0] nextWordTMRB,
     output [30:0] nextWordTMRC
);
wire [30:0] cTMRA [ WORDWIDTH : 0 ] ;
wire [30:0] cTMRB [ WORDWIDTH : 0 ] ;
wire [30:0] cTMRC [ WORDWIDTH : 0 ] ;
assign cTMRA[0]  =  seedTMRA;
assign cTMRB[0]  =  seedTMRB;
assign cTMRC[0]  =  seedTMRC;

generate
genvar i;

     for(i =  0;i<WORDWIDTH;i =  i+1)
          begin : loop_itr 
               assign cTMRA[i+1]  =  {cTMRA[i] [3] ^cTMRA[i] [0] ,cTMRA[i] [30:1] };
               assign cTMRB[i+1]  =  {cTMRB[i] [3] ^cTMRB[i] [0] ,cTMRB[i] [30:1] };
               assign cTMRC[i+1]  =  {cTMRC[i] [3] ^cTMRC[i] [0] ,cTMRC[i] [30:1] };
          end

endgenerate
assign nextWordTMRA =  cTMRA[WORDWIDTH] ;
assign nextWordTMRB =  cTMRB[WORDWIDTH] ;
assign nextWordTMRC =  cTMRC[WORDWIDTH] ;
endmodule

module PRBS31TMR #(
  parameter WORDWIDTH=15,
  parameter FORWARDSTEPS=1
)(
     input  clkTMRA,
     input  clkTMRB,
     input  clkTMRC,
     input  resetTMRA,
     input  resetTMRB,
     input  resetTMRC,
     input  disTMRA,
     input  disTMRB,
     input  disTMRC,
     input [30:0] seedTMRA,
     input [30:0] seedTMRB,
     input [30:0] seedTMRC,
     output [WORDWIDTH-1:0] prbsTMRA,
     output [WORDWIDTH-1:0] prbsTMRB,
     output [WORDWIDTH-1:0] prbsTMRC
);
wire [30:0] nextWordVotedTMRC;
wire [30:0] nextWordVotedTMRB;
wire [30:0] nextWordVotedTMRA;
reg  [30:0] rTMRA;
reg  [30:0] rTMRB;
reg  [30:0] rTMRC;
wire [30:0] newSeedTMRA;
wire [30:0] newSeedTMRB;
wire [30:0] newSeedTMRC;

forwardPRBS31SeedTMR #(.WORDWIDTH(WORDWIDTH), .FORWARDSTEPS(FORWARDSTEPS)) forwardPRBS31SeedInst (
          .seedTMRA(seedTMRA),
          .seedTMRB(seedTMRB),
          .seedTMRC(seedTMRC),
          .newSeedTMRA(newSeedTMRA),
          .newSeedTMRB(newSeedTMRB),
          .newSeedTMRC(newSeedTMRC)
          );
wire [30:0] nextWordTMRA;
wire [30:0] nextWordTMRB;
wire [30:0] nextWordTMRC;

//cadence synchro_reset “resetTMRA”
always @( posedge clkTMRA )
     begin
          if (!resetTMRA)
               begin
                    rTMRA <= newSeedTMRA;
               end
          else
               if (!disTMRA)
                    begin
                         rTMRA <= nextWordVotedTMRA;
                    end
     end
//cadence synchro_reset “resetTMRB”
always @( posedge clkTMRB )
     begin
          if (!resetTMRB)
               begin
                    rTMRB <= newSeedTMRB;
               end
          else
               if (!disTMRB)
                    begin
                         rTMRB <= nextWordVotedTMRB;
                    end
     end

//cadence synchro_reset “resetTMRC”
always @( posedge clkTMRC )
     begin
          if (!resetTMRC)
               begin
                    rTMRC <= newSeedTMRC;
               end
          else
               if (!disTMRC)
                    begin
                         rTMRC <= nextWordVotedTMRC;
                    end
     end

nextPRBS31WordTMR #(.WORDWIDTH(WORDWIDTH)) nextWordInst (
          .seedTMRA(rTMRA),
          .seedTMRB(rTMRB),
          .seedTMRC(rTMRC),
          .nextWordTMRA(nextWordTMRA),
          .nextWordTMRB(nextWordTMRB),
          .nextWordTMRC(nextWordTMRC)
          );
assign prbsTMRA =  rTMRA[WORDWIDTH-1:0] ;
assign prbsTMRB =  rTMRB[WORDWIDTH-1:0] ;
assign prbsTMRC =  rTMRC[WORDWIDTH-1:0] ;

majorityVoter #(.WIDTH(31)) nextWordVoterA (
          .inA(nextWordTMRA),
          .inB(nextWordTMRB),
          .inC(nextWordTMRC),
          .out(nextWordVotedTMRA),
          .tmrErr()
          );

majorityVoter #(.WIDTH(31)) nextWordVoterB (
          .inA(nextWordTMRA),
          .inB(nextWordTMRB),
          .inC(nextWordTMRC),
          .out(nextWordVotedTMRB),
          .tmrErr()
          );

majorityVoter #(.WIDTH(31)) nextWordVoterC (
          .inA(nextWordTMRA),
          .inB(nextWordTMRB),
          .inC(nextWordTMRC),
          .out(nextWordVotedTMRC),
          .tmrErr()
          );
endmodule

