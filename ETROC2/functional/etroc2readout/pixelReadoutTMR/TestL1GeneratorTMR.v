/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR2/TestL1GeneratorTMR.v                                                       *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 13/05/2021 11:57:14                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel2.cnf       *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: TestL1Generator.v                                                                      *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-05-08 20:54:41.421263                                         *
 *           File Size         : 2826                                                               *
 *           MD5 hash          : 50d15674dc0196fa7e433e85e2aac88a                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

`include  "commonDefinition.v"

module TestL1GeneratorTMR #(
  parameter WORDWIDTH=15,
  parameter FORWARDSTEPS=0
)(
     input  clkTMRA,
     input  clkTMRB,
     input  clkTMRC,
     input  disTMRA,
     input  disTMRB,
     input  disTMRC,
     input  resetTMRA,
     input  resetTMRB,
     input  resetTMRC,
     input  modeTMRA,
     input  modeTMRB,
     input  modeTMRC,
     output  L1ATMRA,
     output  L1ATMRB,
     output  L1ATMRC
);
wire [9:0] nextCountVotedTMRC;
wire [5:0] nextTriggerCountVotedTMRC;
wire [9:0] nextCountVotedTMRB;
wire [5:0] nextTriggerCountVotedTMRB;
wire [5:0] nextTriggerCountVotedTMRA;
wire [9:0] nextCountVotedTMRA;
wire [WORDWIDTH-1:0] prbsTMRA;
wire [WORDWIDTH-1:0] prbsTMRB;
wire [WORDWIDTH-1:0] prbsTMRC;
wire disPRBSTMRA;
wire disPRBSTMRB;
wire disPRBSTMRC;
wire disCountTMRA;
wire disCountTMRB;
wire disCountTMRC;
assign disPRBSTMRA =  disTMRA|~modeTMRA;
assign disPRBSTMRB =  disTMRB|~modeTMRB;
assign disPRBSTMRC =  disTMRC|~modeTMRC;
assign disCountTMRA =  disTMRA|modeTMRA;
assign disCountTMRB =  disTMRB|modeTMRB;
assign disCountTMRC =  disTMRC|modeTMRC;

PRBS31TMR #(.WORDWIDTH(WORDWIDTH), .FORWARDSTEPS(FORWARDSTEPS)) prbs_inst (
          .clkTMRA(clkTMRA),
          .clkTMRB(clkTMRB),
          .clkTMRC(clkTMRC),
          .resetTMRA(resetTMRA),
          .resetTMRB(resetTMRB),
          .resetTMRC(resetTMRC),
          .disTMRA(disPRBSTMRA),
          .disTMRB(disPRBSTMRB),
          .disTMRC(disPRBSTMRC),
          .seedTMRA(31'h2AAAAAAA),
          .seedTMRB(31'h2AAAAAAA),
          .seedTMRC(31'h2AAAAAAA),
          .prbsTMRA(prbsTMRA),
          .prbsTMRB(prbsTMRB),
          .prbsTMRC(prbsTMRC)
          );
reg  startTMRA;
reg  startTMRB;
reg  startTMRC;
reg  [9:0] countTMRA;
reg  [9:0] countTMRB;
reg  [9:0] countTMRC;
wire [9:0] nextCountTMRA =  countTMRA+10'd1;
wire [9:0] nextCountTMRB =  countTMRB+10'd1;
wire [9:0] nextCountTMRC =  countTMRC+10'd1;

always @( posedge clkTMRA )
     begin
          if (!resetTMRA)
               begin
                    countTMRA <= 10'h000;
                    startTMRA <= 1'b0;
               end
          else
               begin
                    if (startTMRA==1'b0)
                         begin
                              countTMRA <= nextCountVotedTMRA;
                              if (countTMRA==10'd512)
                                   begin
                                        startTMRA <= 1'b1;
                                   end
                         end
               end
     end

always @( posedge clkTMRB )
     begin
          if (!resetTMRB)
               begin
                    countTMRB <= 10'h000;
                    startTMRB <= 1'b0;
               end
          else
               begin
                    if (startTMRB==1'b0)
                         begin
                              countTMRB <= nextCountVotedTMRB;
                              if (countTMRB==10'd512)
                                   begin
                                        startTMRB <= 1'b1;
                                   end
                         end
               end
     end

always @( posedge clkTMRC )
     begin
          if (!resetTMRC)
               begin
                    countTMRC <= 10'h000;
                    startTMRC <= 1'b0;
               end
          else
               begin
                    if (startTMRC==1'b0)
                         begin
                              countTMRC <= nextCountVotedTMRC;
                              if (countTMRC==10'd512)
                                   begin
                                        startTMRC <= 1'b1;
                                   end
                         end
               end
     end
reg  [5:0] triggerCountTMRA;
reg  [5:0] triggerCountTMRB;
reg  [5:0] triggerCountTMRC;
wire [5:0] nextTriggerCountA =  triggerCountTMRA+6'd1;
wire [5:0] nextTriggerCountB =  triggerCountTMRB+6'd1;
wire [5:0] nextTriggerCountC =  triggerCountTMRC+6'd1;

always @( posedge clkTMRA )
     if (!resetTMRA)
          begin
               triggerCountTMRA <= 6'h00;
          end
     else
          if (!disCountTMRA)
               begin
                    if (triggerCountTMRA==6'd40)
                         begin
                              triggerCountTMRA <= 6'h00;
                         end
                    else
                         begin
                              triggerCountTMRA <= nextTriggerCountVotedTMRA;
                         end
               end

always @( posedge clkTMRB )
     if (!resetTMRB)
          begin
               triggerCountTMRB <= 6'h00;
          end
     else
          if (!disCountTMRB)
               begin
                    if (triggerCountTMRB==6'd40)
                         begin
                              triggerCountTMRB <= 6'h00;
                         end
                    else
                         begin
                              triggerCountTMRB <= nextTriggerCountVotedTMRB;
                         end
               end

always @( posedge clkTMRC )
     if (!resetTMRC)
          begin
               triggerCountTMRC <= 6'h00;
          end
     else
          if (!disCountTMRC)
               begin
                    if (triggerCountTMRC==6'd40)
                         begin
                              triggerCountTMRC <= 6'h00;
                         end
                    else
                         begin
                              triggerCountTMRC <= nextTriggerCountVotedTMRC;
                         end
               end
assign L1ATMRA =  !startTMRA ? 1'b0 : (modeTMRA ? (prbsTMRA<`L1A_THRESHOLD) : triggerCountTMRA==6'd40);
assign L1ATMRB =  !startTMRB ? 1'b0 : (modeTMRB ? (prbsTMRB<`L1A_THRESHOLD) : triggerCountTMRB==6'd40);
assign L1ATMRC =  !startTMRC ? 1'b0 : (modeTMRC ? (prbsTMRC<`L1A_THRESHOLD) : triggerCountTMRC==6'd40);

majorityVoter #(.WIDTH(10)) nextCountVoterA (
          .inA(nextCountTMRA),
          .inB(nextCountTMRB),
          .inC(nextCountTMRC),
          .out(nextCountVotedTMRA),
          .tmrErr()
          );

majorityVoter #(.WIDTH(6)) nextTriggerCountVoterA (
          .inA(nextTriggerCountA),
          .inB(nextTriggerCountB),
          .inC(nextTriggerCountC),
          .out(nextTriggerCountVotedTMRA),
          .tmrErr()
          );

majorityVoter #(.WIDTH(6)) nextTriggerCountVoterB (
          .inA(nextTriggerCountA),
          .inB(nextTriggerCountB),
          .inC(nextTriggerCountC),
          .out(nextTriggerCountVotedTMRB),
          .tmrErr()
          );

majorityVoter #(.WIDTH(10)) nextCountVoterB (
          .inA(nextCountTMRA),
          .inB(nextCountTMRB),
          .inC(nextCountTMRC),
          .out(nextCountVotedTMRB),
          .tmrErr()
          );

majorityVoter #(.WIDTH(6)) nextTriggerCountVoterC (
          .inA(nextTriggerCountA),
          .inB(nextTriggerCountB),
          .inC(nextTriggerCountC),
          .out(nextTriggerCountVotedTMRC),
          .tmrErr()
          );

majorityVoter #(.WIDTH(10)) nextCountVoterC (
          .inA(nextCountTMRA),
          .inB(nextCountTMRB),
          .inC(nextCountTMRC),
          .out(nextCountVotedTMRC),
          .tmrErr()
          );
endmodule

