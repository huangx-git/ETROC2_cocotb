/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR2/pixelReadoutTMR.v                                                          *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 13/05/2021 11:57:14                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel2.cnf       *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: pixelReadout.v                                                                         *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-05-13 01:06:22.755013                                         *
 *           File Size         : 6857                                                               *
 *           MD5 hash          : 23e1baa3441c598e48293e9568cf3770                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 1ps

`include  "commonDefinition.v"

module pixelReadoutTMR #(
  parameter L1ADDRWIDTH=7
)(
     input  clk,
     input  reset,
     input [1:0] workMode,
     input [L1ADDRWIDTH-1:0] L1wrAddr,
     input [L1ADDRWIDTH-1:0] L1rdAddr,
     input [8:0] CBwrAddr,
     input  preLoad,
     input  disDataReadout,
     input  disTrigPath,
     input [9:0] upperTOATrig,
     input [9:0] lowerTOATrig,
     input [8:0] upperTOTTrig,
     input [8:0] lowerTOTTrig,
     input [9:0] upperCalTrig,
     input [9:0] lowerCalTrig,
     input [9:0] upperTOA,
     input [9:0] lowerTOA,
     input [8:0] upperTOT,
     input [8:0] lowerTOT,
     input [9:0] upperCal,
     input [9:0] lowerCal,
     input  addrOffset,
     input  L1A,
     input [7:0] pixelID,
     input [29:0] TDCData,
     input [8:0] latencyL1A,
     input [6:0] selfTestOccupancy,
     input  read,
     input  load,
     output [3:0] trigHit,
     output  unreadHit,
     output [35:0] dout,
     output  outE1A,
     output  outE2A
);
wire [29:0] fakeTDCData;
wire [29:0] TDCDataInUse;
wire selfTest;
wire disTestPattern;
assign selfTest =  workMode!=2'b00;
assign disTestPattern =  ~selfTest|(disDataReadout&disTrigPath);
assign TDCDataInUse =  workMode!=2'b00 ? fakeTDCData : TDCData;

TDCTestPatternGenTMR TDCEM (
          .clk(clk),
          .reset(reset),
          .dis(disTestPattern),
          .mode(workMode[1] ),
          .latencyL1A(latencyL1A),
          .pixelID(pixelID),
          .occupancy(selfTestOccupancy),
          .dout(fakeTDCData)
          );
wire E1A;
wire E2A;
wire hit;
reg  syncL1A;
reg  syncL1A1D;
reg  localL1A;

always @( posedge clk )
     begin
          if (disDataReadout==1'b0)
               localL1A <= L1A;
     end

always @( negedge clk )
     begin
          if (disDataReadout==1'b0)
               begin
                    syncL1A <= localL1A;
                    syncL1A1D <= syncL1A;
               end
     end
wire [9:0] TOA;
wire [8:0] TOT;
wire [9:0] Cal;
assign TOA =  TDCDataInUse[29:20] ;
assign TOT =  TDCDataInUse[19:11] ;
assign Cal =  TDCDataInUse[10:1] ;
wire select;
assign select =  (TOA>=lowerTOA)&(TOA<=upperTOA)&(TOT>=lowerTOT)&(TOT<=upperTOT)&(Cal>=lowerCal)&(Cal<=upperCal)&~disDataReadout;
wire selectTrig;
assign selectTrig =  (TOA>=lowerTOATrig)&(TOA<=upperTOATrig)&(TOT>=lowerTOTTrig)&(TOT<=upperTOTTrig)&(Cal>=lowerCalTrig)&(Cal<=upperCalTrig)&~disTrigPath;
reg [28:0] dataIn;
reg  inHit;
wire goodHit;
assign goodHit =  TDCDataInUse[0] &select;

always @( negedge clk )
     begin
          if (disDataReadout==1'b0)
               inHit <= goodHit;
     end


always @(negedge clk)
begin
     if(goodHit)
          dataIn <= TDCDataInUse[29:1];
end

wire goodHitTrig;
assign goodHitTrig =  TDCDataInUse[0] &selectTrig;
// reg  trigHitReg;

// always @( negedge clk )
//      begin
//           if (disTrigPath==1'b0)
//                trigHitReg <= goodHitTrig;
//      end
//assign #1.0 dataIn =  TDCDataInUse[29:1] ;
wire [8:0] phyWrAddr;
wire [9:0] offsetAddr =  CBwrAddr+{6'h00,pixelID[4] ,pixelID[1:0] };
assign phyWrAddr =  addrOffset ? offsetAddr[8:0]  : CBwrAddr;
wire [35:0] encodedTDCData;

circularBufferTMR MB (
          .clk(clk),
          .dis(disDataReadout),
          .wrAddr(phyWrAddr),
          .din(dataIn),
          .inHit(inHit),
          .L1APre(L1A),
          .L1A(localL1A),
          .L1ADelay(syncL1A),
          .latencyL1A(latencyL1A),
          .dout(encodedTDCData),
          .hit(hit),
          .E1A(E1A),
          .E2A(E2A)
          );
wire unreadHitL1;

L1EventBufferTMR #(.ADDRWIDTH(L1ADDRWIDTH)) L1EvtB (
          .clk(clk),
          .reset(reset),
          .dis(disDataReadout),
          .wrAddr(L1wrAddr),
          .rdAddr(L1rdAddr),
          .preLoad(preLoad),
          .din(encodedTDCData),
          .inHit(hit),
          .E1A(E1A),
          .E2A(E2A),
          .wren(syncL1A1D),
          .read(read),
          .load(load),
          .unreadHit(unreadHitL1),
          .outE1A(outE1A),
          .outE2A(outE2A),
          .dout(dout)
          );
assign unreadHit =  ~disDataReadout&unreadHitL1;
reg  trigHitOut;

always @( negedge clk )
     begin
          if (disTrigPath==1'b0)
               trigHitOut <= goodHitTrig;
     end
wire [1:0] rowIDMSB =  pixelID[3:2] ;
assign trigHit[0]  =  (rowIDMSB[1:0] ==2'b00) ? trigHitOut : 1'b0;
assign trigHit[1]  =  (rowIDMSB[1:0] ==2'b01) ? trigHitOut : 1'b0;
assign trigHit[2]  =  (rowIDMSB[1:0] ==2'b10) ? trigHitOut : 1'b0;
assign trigHit[3]  =  (rowIDMSB[1:0] ==2'b11) ? trigHitOut : 1'b0;
endmodule



// /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/tmrg/../common/voter.v
module majorityVoter (inA, inB, inC, out, tmrErr);
  parameter WIDTH = 1;
  input   [(WIDTH-1):0]   inA, inB, inC;
  output  [(WIDTH-1):0]   out;
  output                  tmrErr;
  reg                     tmrErr;
  assign out = (inA&inB) | (inA&inC) | (inB&inC);
  always @(inA or inB or inC)
  begin
    if (inA!=inB || inA!=inC || inB!=inC)
      tmrErr = 1;
    else
      tmrErr = 0;
  end
endmodule


// /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/tmrg/../common/fanout.v
module fanout (in, outA, outB, outC);
  parameter WIDTH = 1;
  input   [(WIDTH-1):0]   in;
  output  [(WIDTH-1):0]   outA,outB,outC;
  assign outA=in;
  assign outB=in;
  assign outC=in;
endmodule
