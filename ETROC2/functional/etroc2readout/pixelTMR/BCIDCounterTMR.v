/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR/BCIDCounterTMR.v                                                            *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 13/04/2021 11:53:04                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel.cnf        *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: BCIDCounter.v                                                                          *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-04-13 11:39:35.730279                                         *
 *           File Size         : 1451                                                               *
 *           MD5 hash          : 1a527908a0bbf93218cad81c3750e3d4                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps / 1ps

`include  "commonDefinition.v"

module BCIDCounterTMR(
     input  clkA,
     input  clkB,
     input  clkC,
     input  resetA,
     input  resetB,
     input  resetC,
     input  disA,
     input  disB,
     input  disC,
     input  rstBCIDA,
     input  rstBCIDB,
     input  rstBCIDC,
     input [11:0] offsetA,
     input [11:0] offsetB,
     input [11:0] offsetC,
     output [11:0] BCIDA,
     output [11:0] BCIDB,
     output [11:0] BCIDC
);
wor nextBCIDTmrErrorC;
wire [11:0] nextBCIDVotedC;
wor nextBCIDTmrErrorB;
wire [11:0] nextBCIDVotedB;
wor nextBCIDTmrErrorA;
wire [11:0] nextBCIDVotedA;
reg  [11:0] BCIDRegA;
reg  [11:0] BCIDRegB;
reg  [11:0] BCIDRegC;
assign BCIDA =  BCIDRegA;
assign BCIDB =  BCIDRegB;
assign BCIDC =  BCIDRegC;
wire [11:0] nextBCIDA =  BCIDRegA+1;
wire [11:0] nextBCIDB =  BCIDRegB+1;
wire [11:0] nextBCIDC =  BCIDRegC+1;

always @( posedge clkA )
     begin
          if (!resetA)
               begin
                    BCIDRegA <= offsetA;
               end
          else
               if (!disA)
                    begin
                         if (!rstBCIDA)
                              begin
                                   BCIDRegA <= offsetA;
                              end
                         else
                              if (BCIDRegA==`MAX_BCID_NUMBER)
                                   begin
                                        BCIDRegA <= 12'H000;
                                   end
                              else
                                   begin
                                        BCIDRegA <= nextBCIDVotedA;
                                   end
                    end
     end

always @( posedge clkB )
     begin
          if (!resetB)
               begin
                    BCIDRegB <= offsetB;
               end
          else
               if (!disB)
                    begin
                         if (!rstBCIDB)
                              begin
                                   BCIDRegB <= offsetB;
                              end
                         else
                              if (BCIDRegB==`MAX_BCID_NUMBER)
                                   begin
                                        BCIDRegB <= 12'H000;
                                   end
                              else
                                   begin
                                        BCIDRegB <= nextBCIDVotedB;
                                   end
                    end
     end

always @( posedge clkC )
     begin
          if (!resetC)
               begin
                    BCIDRegC <= offsetC;
               end
          else
               if (!disC)
                    begin
                         if (!rstBCIDC)
                              begin
                                   BCIDRegC <= offsetC;
                              end
                         else
                              if (BCIDRegC==`MAX_BCID_NUMBER)
                                   begin
                                        BCIDRegC <= 12'H000;
                                   end
                              else
                                   begin
                                        BCIDRegC <= nextBCIDVotedC;
                                   end
                    end
     end

majorityVoter #(.WIDTH(12)) nextBCIDVoterA (
          .inA(nextBCIDA),
          .inB(nextBCIDB),
          .inC(nextBCIDC),
          .out(nextBCIDVotedA),
          .tmrErr(nextBCIDTmrErrorA)
          );

majorityVoter #(.WIDTH(12)) nextBCIDVoterB (
          .inA(nextBCIDA),
          .inB(nextBCIDB),
          .inC(nextBCIDC),
          .out(nextBCIDVotedB),
          .tmrErr(nextBCIDTmrErrorB)
          );

majorityVoter #(.WIDTH(12)) nextBCIDVoterC (
          .inA(nextBCIDA),
          .inB(nextBCIDB),
          .inC(nextBCIDC),
          .out(nextBCIDVotedC),
          .tmrErr(nextBCIDTmrErrorC)
          );
endmodule

