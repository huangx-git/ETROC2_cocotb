/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR/PRBS31TMR.v                                                                 *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 13/04/2021 11:53:04                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel.cnf        *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: PRBS31.v                                                                               *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-04-13 11:40:16.427770                                         *
 *           File Size         : 2712                                                               *
 *           MD5 hash          : 112ab09c65fe90e9a06939a3572b7204                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

module forwardPRBS31SeedTMR #(
  parameter WORDWIDTH=15,
  parameter FORWARDSTEPS=1
)(
     input [30:0] seedA,
     input [30:0] seedB,
     input [30:0] seedC,
     output [30:0] newSeedA,
     output [30:0] newSeedB,
     output [30:0] newSeedC
);
wire [30:0] cA [ WORDWIDTH*FORWARDSTEPS : 0 ] ;
wire [30:0] cB [ WORDWIDTH*FORWARDSTEPS : 0 ] ;
wire [30:0] cC [ WORDWIDTH*FORWARDSTEPS : 0 ] ;
assign cA[0]  =  seedA;
assign cB[0]  =  seedB;
assign cC[0]  =  seedC;

generate
genvar i;

     for(i =  0;i<WORDWIDTH*FORWARDSTEPS;i =  i+1)
          begin : loop_itr 
               assign cA[i+1]  =  {cA[i] [3] ^cA[i] [0] ,cA[i] [30:1] };
               assign cB[i+1]  =  {cB[i] [3] ^cB[i] [0] ,cB[i] [30:1] };
               assign cC[i+1]  =  {cC[i] [3] ^cC[i] [0] ,cC[i] [30:1] };
          end

endgenerate
assign newSeedA =  cA[WORDWIDTH*FORWARDSTEPS] ;
assign newSeedB =  cB[WORDWIDTH*FORWARDSTEPS] ;
assign newSeedC =  cC[WORDWIDTH*FORWARDSTEPS] ;
endmodule

module nextPRBS31WordTMR #(
  parameter WORDWIDTH=15
)(
     input [30:0] seedA,
     input [30:0] seedB,
     input [30:0] seedC,
     output [30:0] nextWordA,
     output [30:0] nextWordB,
     output [30:0] nextWordC
);
wire [30:0] cA [ WORDWIDTH : 0 ] ;
wire [30:0] cB [ WORDWIDTH : 0 ] ;
wire [30:0] cC [ WORDWIDTH : 0 ] ;
assign cA[0]  =  seedA;
assign cB[0]  =  seedB;
assign cC[0]  =  seedC;

generate
genvar i;

     for(i =  0;i<WORDWIDTH;i =  i+1)
          begin : loop_itr 
               assign cA[i+1]  =  {cA[i] [3] ^cA[i] [0] ,cA[i] [30:1] };
               assign cB[i+1]  =  {cB[i] [3] ^cB[i] [0] ,cB[i] [30:1] };
               assign cC[i+1]  =  {cC[i] [3] ^cC[i] [0] ,cC[i] [30:1] };
          end

endgenerate
assign nextWordA =  cA[WORDWIDTH] ;
assign nextWordB =  cB[WORDWIDTH] ;
assign nextWordC =  cC[WORDWIDTH] ;
endmodule

module PRBS31TMR #(
  parameter WORDWIDTH=15,
  parameter FORWARDSTEPS=1
)(
     input  clkA,
     input  clkB,
     input  clkC,
     input  resetA,
     input  resetB,
     input  resetC,
     input  disA,
     input  disB,
     input  disC,
     input [30:0] seedA,
     input [30:0] seedB,
     input [30:0] seedC,
     output [WORDWIDTH-1:0] prbsA,
     output [WORDWIDTH-1:0] prbsB,
     output [WORDWIDTH-1:0] prbsC
);
wor nextWordTmrErrorC;
wire [30:0] nextWordVotedC;
wor nextWordTmrErrorB;
wire [30:0] nextWordVotedB;
wor nextWordTmrErrorA;
wire [30:0] nextWordVotedA;
reg  [30:0] rA;
reg  [30:0] rB;
reg  [30:0] rC;
wire [30:0] newSeedA;
wire [30:0] newSeedB;
wire [30:0] newSeedC;

forwardPRBS31SeedTMR #(.WORDWIDTH(WORDWIDTH), .FORWARDSTEPS(FORWARDSTEPS)) forwardPRBS31SeedInst (
          .seedA(seedA),
          .seedB(seedB),
          .seedC(seedC),
          .newSeedA(newSeedA),
          .newSeedB(newSeedB),
          .newSeedC(newSeedC)
          );
wire [30:0] nextWordA;
wire [30:0] nextWordB;
wire [30:0] nextWordC;

always @( posedge clkA )
     begin
          if (!disA)
               begin
                    if (!resetA)
                         begin
                              rA <= newSeedA;
                         end
                    else
                         begin
                              rA <= nextWordVotedA;
                         end
               end
     end

always @( posedge clkB )
     begin
          if (!disB)
               begin
                    if (!resetB)
                         begin
                              rB <= newSeedB;
                         end
                    else
                         begin
                              rB <= nextWordVotedB;
                         end
               end
     end

always @( posedge clkC )
     begin
          if (!disC)
               begin
                    if (!resetC)
                         begin
                              rC <= newSeedC;
                         end
                    else
                         begin
                              rC <= nextWordVotedC;
                         end
               end
     end

nextPRBS31WordTMR #(.WORDWIDTH(WORDWIDTH)) nextWordInst (
          .seedA(rA),
          .seedB(rB),
          .seedC(rC),
          .nextWordA(nextWordA),
          .nextWordB(nextWordB),
          .nextWordC(nextWordC)
          );
assign prbsA =  rA[WORDWIDTH-1:0] ;
assign prbsB =  rB[WORDWIDTH-1:0] ;
assign prbsC =  rC[WORDWIDTH-1:0] ;

majorityVoter #(.WIDTH(31)) nextWordVoterA (
          .inA(nextWordA),
          .inB(nextWordB),
          .inC(nextWordC),
          .out(nextWordVotedA),
          .tmrErr(nextWordTmrErrorA)
          );

majorityVoter #(.WIDTH(31)) nextWordVoterB (
          .inA(nextWordA),
          .inB(nextWordB),
          .inC(nextWordC),
          .out(nextWordVotedB),
          .tmrErr(nextWordTmrErrorB)
          );

majorityVoter #(.WIDTH(31)) nextWordVoterC (
          .inA(nextWordA),
          .inB(nextWordB),
          .inC(nextWordC),
          .out(nextWordVotedC),
          .tmrErr(nextWordTmrErrorC)
          );
endmodule

