/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR/TestL1GeneratorTMR.v                                                        *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 13/04/2021 11:53:04                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel.cnf        *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: TestL1Generator.v                                                                      *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-04-13 11:39:11.644380                                         *
 *           File Size         : 2768                                                               *
 *           MD5 hash          : 6be66c03b67ff45f4b3a920cd8bb7fdb                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

`include  "commonDefinition.v"

module TestL1GeneratorTMR #(
  parameter WORDWIDTH=15,
  parameter FORWARDSTEPS=0
)(
     input  clkA,
     input  clkB,
     input  clkC,
     input  disA,
     input  disB,
     input  disC,
     input  resetA,
     input  resetB,
     input  resetC,
     input  modeA,
     input  modeB,
     input  modeC,
     output  L1AA,
     output  L1AB,
     output  L1AC
);
wor nextCountTmrErrorC;
wire [9:0] nextCountVotedC;
wor nextTriggerCountTmrErrorC;
wire [5:0] nextTriggerCountVotedC;
wor nextCountTmrErrorB;
wire [9:0] nextCountVotedB;
wor nextTriggerCountTmrErrorB;
wire [5:0] nextTriggerCountVotedB;
wor nextTriggerCountTmrErrorA;
wire [5:0] nextTriggerCountVotedA;
wor nextCountTmrErrorA;
wire [9:0] nextCountVotedA;
wire [WORDWIDTH-1:0] prbsA;
wire [WORDWIDTH-1:0] prbsB;
wire [WORDWIDTH-1:0] prbsC;
wire disPRBSA;
wire disPRBSB;
wire disPRBSC;
wire disCountA;
wire disCountB;
wire disCountC;
assign disPRBSA =  disA|!modeA;
assign disPRBSB =  disB|!modeB;
assign disPRBSC =  disC|!modeC;
assign disCountA =  disA|modeA;
assign disCountB =  disB|modeB;
assign disCountC =  disC|modeC;

PRBS31TMR #(.WORDWIDTH(WORDWIDTH), .FORWARDSTEPS(FORWARDSTEPS)) prbs_inst (
          .clkA(clkA),
          .clkB(clkB),
          .clkC(clkC),
          .resetA(resetA),
          .resetB(resetB),
          .resetC(resetC),
          .disA(disPRBSA),
          .disB(disPRBSB),
          .disC(disPRBSC),
          .seedA(31'h2AAAAAAA),
          .seedB(31'h2AAAAAAA),
          .seedC(31'h2AAAAAAA),
          .prbsA(prbsA),
          .prbsB(prbsB),
          .prbsC(prbsC)
          );
reg  startA;
reg  startB;
reg  startC;
reg  [9:0] countA;
reg  [9:0] countB;
reg  [9:0] countC;
wire [9:0] nextCountA =  countA+1;
wire [9:0] nextCountB =  countB+1;
wire [9:0] nextCountC =  countC+1;

always @( posedge clkA )
     begin
          if (!resetA)
               begin
                    countA <= 10'h000;
                    startA <= 1'b0;
               end
          else
               begin
                    if (startA==1'b0)
                         begin
                              countA <= nextCountVotedA;
                              if (countA==10'd512)
                                   begin
                                        startA <= 1'b1;
                                   end
                         end
               end
     end

always @( posedge clkB )
     begin
          if (!resetB)
               begin
                    countB <= 10'h000;
                    startB <= 1'b0;
               end
          else
               begin
                    if (startB==1'b0)
                         begin
                              countB <= nextCountVotedB;
                              if (countB==10'd512)
                                   begin
                                        startB <= 1'b1;
                                   end
                         end
               end
     end

always @( posedge clkC )
     begin
          if (!resetC)
               begin
                    countC <= 10'h000;
                    startC <= 1'b0;
               end
          else
               begin
                    if (startC==1'b0)
                         begin
                              countC <= nextCountVotedC;
                              if (countC==10'd512)
                                   begin
                                        startC <= 1'b1;
                                   end
                         end
               end
     end
reg  [5:0] triggerCountA;
reg  [5:0] triggerCountB;
reg  [5:0] triggerCountC;
wire [5:0] nextTriggerCountA =  triggerCountA+1;
wire [5:0] nextTriggerCountB =  triggerCountB+1;
wire [5:0] nextTriggerCountC =  triggerCountC+1;

always @( posedge clkA )
     if (!resetA)
          begin
               triggerCountA <= 6'h00;
          end
     else
          if (!disCountA)
               begin
                    if (triggerCountA==6'd40)
                         begin
                              triggerCountA <= 6'h00;
                         end
                    else
                         begin
                              triggerCountA <= nextTriggerCountVotedA;
                         end
               end

always @( posedge clkB )
     if (!resetB)
          begin
               triggerCountB <= 6'h00;
          end
     else
          if (!disCountB)
               begin
                    if (triggerCountB==6'd40)
                         begin
                              triggerCountB <= 6'h00;
                         end
                    else
                         begin
                              triggerCountB <= nextTriggerCountVotedB;
                         end
               end

always @( posedge clkC )
     if (!resetC)
          begin
               triggerCountC <= 6'h00;
          end
     else
          if (!disCountC)
               begin
                    if (triggerCountC==6'd40)
                         begin
                              triggerCountC <= 6'h00;
                         end
                    else
                         begin
                              triggerCountC <= nextTriggerCountVotedC;
                         end
               end
assign L1AA =  !startA ? 1'b0 : (modeA ? (prbsA<`L1A_THRESHOLD) : triggerCountA==6'd40);
assign L1AB =  !startB ? 1'b0 : (modeB ? (prbsB<`L1A_THRESHOLD) : triggerCountB==6'd40);
assign L1AC =  !startC ? 1'b0 : (modeC ? (prbsC<`L1A_THRESHOLD) : triggerCountC==6'd40);

majorityVoter #(.WIDTH(10)) nextCountVoterA (
          .inA(nextCountA),
          .inB(nextCountB),
          .inC(nextCountC),
          .out(nextCountVotedA),
          .tmrErr(nextCountTmrErrorA)
          );

majorityVoter #(.WIDTH(6)) nextTriggerCountVoterA (
          .inA(nextTriggerCountA),
          .inB(nextTriggerCountB),
          .inC(nextTriggerCountC),
          .out(nextTriggerCountVotedA),
          .tmrErr(nextTriggerCountTmrErrorA)
          );

majorityVoter #(.WIDTH(6)) nextTriggerCountVoterB (
          .inA(nextTriggerCountA),
          .inB(nextTriggerCountB),
          .inC(nextTriggerCountC),
          .out(nextTriggerCountVotedB),
          .tmrErr(nextTriggerCountTmrErrorB)
          );

majorityVoter #(.WIDTH(10)) nextCountVoterB (
          .inA(nextCountA),
          .inB(nextCountB),
          .inC(nextCountC),
          .out(nextCountVotedB),
          .tmrErr(nextCountTmrErrorB)
          );

majorityVoter #(.WIDTH(6)) nextTriggerCountVoterC (
          .inA(nextTriggerCountA),
          .inB(nextTriggerCountB),
          .inC(nextTriggerCountC),
          .out(nextTriggerCountVotedC),
          .tmrErr(nextTriggerCountTmrErrorC)
          );

majorityVoter #(.WIDTH(10)) nextCountVoterC (
          .inA(nextCountA),
          .inB(nextCountB),
          .inC(nextCountC),
          .out(nextCountVotedC),
          .tmrErr(nextCountTmrErrorC)
          );
endmodule

