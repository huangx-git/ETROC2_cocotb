/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR2/BCIDCounterTMR.v                                                           *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 13/05/2021 11:57:13                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel2.cnf       *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: BCIDCounter.v                                                                          *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-05-08 20:46:07.587792                                         *
 *           File Size         : 1479                                                               *
 *           MD5 hash          : 885263922aca9e280e0d4a80e79e68ac                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps / 1ps

`include  "commonDefinition.v"

module BCIDCounterTMR(
     input  clkTMRA,
     input  clkTMRB,
     input  clkTMRC,
     input  resetTMRA,
     input  resetTMRB,
     input  resetTMRC,
     input  disTMRA,
     input  disTMRB,
     input  disTMRC,
     input  rstBCIDTMRA,
     input  rstBCIDTMRB,
     input  rstBCIDTMRC,
     input [11:0] offsetTMRA,
     input [11:0] offsetTMRB,
     input [11:0] offsetTMRC,
     output [11:0] BCIDTMRA,
     output [11:0] BCIDTMRB,
     output [11:0] BCIDTMRC
);
wire [11:0] nextBCIDVotedTMRC;
wire [11:0] nextBCIDVotedTMRB;
wire [11:0] nextBCIDVotedTMRA;
reg  [11:0] BCIDRegTMRA;
reg  [11:0] BCIDRegTMRB;
reg  [11:0] BCIDRegTMRC;
assign BCIDTMRA =  BCIDRegTMRA;
assign BCIDTMRB =  BCIDRegTMRB;
assign BCIDTMRC =  BCIDRegTMRC;
wire [11:0] nextBCIDTMRA =  BCIDRegTMRA+12'd1;
wire [11:0] nextBCIDTMRB =  BCIDRegTMRB+12'd1;
wire [11:0] nextBCIDTMRC =  BCIDRegTMRC+12'd1;

always @( posedge clkTMRA )
     begin
          if (!resetTMRA)
               begin
                    BCIDRegTMRA <= offsetTMRA;
               end
          else
               if (!disTMRA)
                    begin
                         if (!rstBCIDTMRA)
                              begin
                                   BCIDRegTMRA <= offsetTMRA;
                              end
                         else
                              if (BCIDRegTMRA==`MAX_BCID_NUMBER)
                                   begin
                                        BCIDRegTMRA <= 12'H000;
                                   end
                              else
                                   begin
                                        BCIDRegTMRA <= nextBCIDVotedTMRA;
                                   end
                    end
     end

always @( posedge clkTMRB )
     begin
          if (!resetTMRB)
               begin
                    BCIDRegTMRB <= offsetTMRB;
               end
          else
               if (!disTMRB)
                    begin
                         if (!rstBCIDTMRB)
                              begin
                                   BCIDRegTMRB <= offsetTMRB;
                              end
                         else
                              if (BCIDRegTMRB==`MAX_BCID_NUMBER)
                                   begin
                                        BCIDRegTMRB <= 12'H000;
                                   end
                              else
                                   begin
                                        BCIDRegTMRB <= nextBCIDVotedTMRB;
                                   end
                    end
     end

always @( posedge clkTMRC )
     begin
          if (!resetTMRC)
               begin
                    BCIDRegTMRC <= offsetTMRC;
               end
          else
               if (!disTMRC)
                    begin
                         if (!rstBCIDTMRC)
                              begin
                                   BCIDRegTMRC <= offsetTMRC;
                              end
                         else
                              if (BCIDRegTMRC==`MAX_BCID_NUMBER)
                                   begin
                                        BCIDRegTMRC <= 12'H000;
                                   end
                              else
                                   begin
                                        BCIDRegTMRC <= nextBCIDVotedTMRC;
                                   end
                    end
     end

majorityVoter #(.WIDTH(12)) nextBCIDVoterA (
          .inA(nextBCIDTMRA),
          .inB(nextBCIDTMRB),
          .inC(nextBCIDTMRC),
          .out(nextBCIDVotedTMRA),
          .tmrErr()
          );

majorityVoter #(.WIDTH(12)) nextBCIDVoterB (
          .inA(nextBCIDTMRA),
          .inB(nextBCIDTMRB),
          .inC(nextBCIDTMRC),
          .out(nextBCIDVotedTMRB),
          .tmrErr()
          );

majorityVoter #(.WIDTH(12)) nextBCIDVoterC (
          .inA(nextBCIDTMRA),
          .inB(nextBCIDTMRB),
          .inC(nextBCIDTMRC),
          .out(nextBCIDVotedTMRC),
          .tmrErr()
          );
endmodule

