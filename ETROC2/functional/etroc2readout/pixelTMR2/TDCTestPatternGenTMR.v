/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ./pixelTMR2/TDCTestPatternGenTMR.v                                                     *
 *                                                                                                  *
 * user    : dataogong                                                                              *
 * host    : 16-11005.local                                                                         *
 * date    : 17/05/2021 23:24:14                                                                    *
 *                                                                                                  *
 * workdir : /Users/dataogong/Documents/Gitlab/ETROCI2C/etroc2_swreadout/rtl/ETROC2Readout          *
 * cmd     : /Users/dataogong/Documents/ActiveDocument/Gitlab/tmrg/bin/tmrg -c tmrgPixel2.cnf       *
 * tmrg rev: e2867c77ccb74667bff8dd6a91891cdefaaa0580                                               *
 *                                                                                                  *
 * src file: TDCTestPatternGen.v                                                                    *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2021-05-17 22:46:43.179948                                         *
 *           File Size         : 2800                                                               *
 *           MD5 hash          : 9495374199899712e3e8ddea53bf364a                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ns / 100ps

`include  "commonDefinition.v"

module TDCTestPatternGenTMR(
     input  clk,
     input  reset,
     input  dis,
     input  mode,
     input [7:0] pixelID,
     input [8:0] latencyL1A,
     input [6:0] occupancy,
     output wire [29:0] dout
);
wire [7:0] pixelIDTMRC;
wire [7:0] pixelIDTMRB;
wire [7:0] pixelIDTMRA;
wire [6:0] occupancyTMRC;
wire [6:0] occupancyTMRB;
wire [6:0] occupancyTMRA;
wire modeTMRC;
wire modeTMRB;
wire modeTMRA;
wire clkTMRC;
wire clkTMRB;
wire clkTMRA;
wire resetTMRC;
wire resetTMRB;
wire resetTMRA;
wire [8:0] latencyL1ATMRC;
wire [8:0] latencyL1ATMRB;
wire [8:0] latencyL1ATMRA;
wire disTMRC;
wire disTMRB;
wire disTMRA;
wire [8:0] nextCounterL1AVotedTMRC;
wire [8:0] nextCounterL1AVotedTMRB;
wire [8:0] nextCounterL1AVotedTMRA;
wire hit;
wire [11:0] genBCID;
wire [8:0] usedCounter;
wire [14:0] prbsTMRA;
wire [14:0] prbsTMRB;
wire [14:0] prbsTMRC;
wire [30:0] seedTMRA;
wire [30:0] seedTMRB;
wire [30:0] seedTMRC;
assign seedTMRA =  {23'h2AAAAA,8'haa^pixelIDTMRA};
assign seedTMRB =  {23'h2AAAAA,8'haa^pixelIDTMRB};
assign seedTMRC =  {23'h2AAAAA,8'haa^pixelIDTMRC};

PRBS31TMR #(.WORDWIDTH(15), .FORWARDSTEPS(0)) prbs_inst (
          .clkTMRA(clkTMRA),
          .clkTMRB(clkTMRB),
          .clkTMRC(clkTMRC),
          .resetTMRA(resetTMRA),
          .resetTMRB(resetTMRB),
          .resetTMRC(resetTMRC),
          .disTMRA(disTMRA),
          .disTMRB(disTMRB),
          .disTMRC(disTMRC),
          .seedTMRA(seedTMRA),
          .seedTMRB(seedTMRB),
          .seedTMRC(seedTMRC),
          .prbsTMRA(prbsTMRA),
          .prbsTMRB(prbsTMRB),
          .prbsTMRC(prbsTMRC)
          );
wire predictL1ATMRA;
wire predictL1ATMRB;
wire predictL1ATMRC;

TestL1GeneratorTMR #(.WORDWIDTH(15), .FORWARDSTEPS(`DEFAULT_L1A_LATENCY-1)) predict_trigger (
          .clkTMRA(clkTMRA),
          .clkTMRB(clkTMRB),
          .clkTMRC(clkTMRC),
          .resetTMRA(resetTMRA),
          .resetTMRB(resetTMRB),
          .resetTMRC(resetTMRC),
          .disTMRA(disTMRA),
          .disTMRB(disTMRB),
          .disTMRC(disTMRC),
          .modeTMRA(modeTMRA),
          .modeTMRB(modeTMRB),
          .modeTMRC(modeTMRC),
          .L1ATMRA(predictL1ATMRA),
          .L1ATMRB(predictL1ATMRB),
          .L1ATMRC(predictL1ATMRC)
          );
wire hitTMRA;
wire hitTMRB;
wire hitTMRC;
wire [15:0] thresholdTMRA;
wire [15:0] thresholdTMRB;
wire [15:0] thresholdTMRC;
assign thresholdTMRA =  ({9'd0,occupancyTMRA}<<8);
assign thresholdTMRB =  ({9'd0,occupancyTMRB}<<8);
assign thresholdTMRC =  ({9'd0,occupancyTMRC}<<8);
assign hitTMRA =  ({1'b0,prbsTMRA}<thresholdTMRA);
assign hitTMRB =  ({1'b0,prbsTMRB}<thresholdTMRB);
assign hitTMRC =  ({1'b0,prbsTMRC}<thresholdTMRC);
reg  [8:0] counterL1ATMRA;
reg  [8:0] counterL1ATMRB;
reg  [8:0] counterL1ATMRC;
wire [8:0] nextCounterL1ATMRA =  counterL1ATMRA+9'd1;
wire [8:0] nextCounterL1ATMRB =  counterL1ATMRB+9'd1;
wire [8:0] nextCounterL1ATMRC =  counterL1ATMRC+9'd1;

//cadence synchro_reset "resetTMRA"
always @( posedge clkTMRA )
     begin
          if (!resetTMRA)
               begin
                    counterL1ATMRA <= 9'h000;
               end
          else
               if (!disTMRA)
                    begin
                         if (predictL1ATMRA==1'b1&&hitTMRA==1'b1)
                              begin
                                   counterL1ATMRA <= nextCounterL1AVotedTMRA;
                              end
                    end
     end
//cadence synchro_reset "resetTMRB"
always @( posedge clkTMRB )
     begin
          if (!resetTMRB)
               begin
                    counterL1ATMRB <= 9'h000;
               end
          else
               if (!disTMRB)
                    begin
                         if (predictL1ATMRB==1'b1&&hitTMRB==1'b1)
                              begin
                                   counterL1ATMRB <= nextCounterL1AVotedTMRB;
                              end
                    end
     end

//cadence synchro_reset "resetTMRC"
always @( posedge clkTMRC )
     begin
          if (!resetTMRC)
               begin
                    counterL1ATMRC <= 9'h000;
               end
          else
               if (!disTMRC)
                    begin
                         if (predictL1ATMRC==1'b1&&hitTMRC==1'b1)
                              begin
                                   counterL1ATMRC <= nextCounterL1AVotedTMRC;
                              end
                    end
     end
wire [11:0] genBCIDTMRA;
wire [11:0] genBCIDTMRB;
wire [11:0] genBCIDTMRC;
wire [11:0] offsetTMRA =  latencyL1ATMRA+2;
wire [11:0] offsetTMRB =  latencyL1ATMRB+2;
wire [11:0] offsetTMRC =  latencyL1ATMRC+2;

BCIDCounterTMR BC (
          .clkTMRA(clkTMRA),
          .clkTMRB(clkTMRB),
          .clkTMRC(clkTMRC),
          .resetTMRA(resetTMRA),
          .resetTMRB(resetTMRB),
          .resetTMRC(resetTMRC),
          .disTMRA(disTMRA),
          .disTMRB(disTMRB),
          .disTMRC(disTMRC),
          .rstBCIDTMRA(1'b1),
          .rstBCIDTMRB(1'b1),
          .rstBCIDTMRC(1'b1),
          .offsetTMRA(offsetTMRA),
          .offsetTMRB(offsetTMRB),
          .offsetTMRC(offsetTMRC),
          .BCIDTMRA(genBCIDTMRA),
          .BCIDTMRB(genBCIDTMRB),
          .BCIDTMRC(genBCIDTMRC)
          );
wire [8:0] usedCounterTMRA;
wire [8:0] usedCounterTMRB;
wire [8:0] usedCounterTMRC;
assign usedCounterTMRA =  (modeTMRA==1'b1)&&(predictL1ATMRA==1'b1&&hitTMRA==1'b1) ? counterL1ATMRA : 9'h1aa;
assign usedCounterTMRB =  (modeTMRB==1'b1)&&(predictL1ATMRB==1'b1&&hitTMRB==1'b1) ? counterL1ATMRB : 9'h1aa;
assign usedCounterTMRC =  (modeTMRC==1'b1)&&(predictL1ATMRC==1'b1&&hitTMRC==1'b1) ? counterL1ATMRC : 9'h1aa;
assign dout =  dis ? { 30 {1'b0} }  : {pixelID,genBCID,usedCounter,hit};

majorityVoter #(.WIDTH(9)) usedCounterVoter (
          .inA(usedCounterTMRA),
          .inB(usedCounterTMRB),
          .inC(usedCounterTMRC),
          .out(usedCounter),
          .tmrErr()
          );

majorityVoter #(.WIDTH(12)) genBCIDVoter (
          .inA(genBCIDTMRA),
          .inB(genBCIDTMRB),
          .inC(genBCIDTMRC),
          .out(genBCID),
          .tmrErr()
          );

majorityVoter hitVoter (
          .inA(hitTMRA),
          .inB(hitTMRB),
          .inC(hitTMRC),
          .out(hit),
          .tmrErr()
          );

majorityVoter #(.WIDTH(9)) nextCounterL1AVoterA (
          .inA(nextCounterL1ATMRA),
          .inB(nextCounterL1ATMRB),
          .inC(nextCounterL1ATMRC),
          .out(nextCounterL1AVotedTMRA),
          .tmrErr()
          );

majorityVoter #(.WIDTH(9)) nextCounterL1AVoterB (
          .inA(nextCounterL1ATMRA),
          .inB(nextCounterL1ATMRB),
          .inC(nextCounterL1ATMRC),
          .out(nextCounterL1AVotedTMRB),
          .tmrErr()
          );

majorityVoter #(.WIDTH(9)) nextCounterL1AVoterC (
          .inA(nextCounterL1ATMRA),
          .inB(nextCounterL1ATMRB),
          .inC(nextCounterL1ATMRC),
          .out(nextCounterL1AVotedTMRC),
          .tmrErr()
          );

fanout disFanout (
          .in(dis),
          .outA(disTMRA),
          .outB(disTMRB),
          .outC(disTMRC)
          );

fanout #(.WIDTH(9)) latencyL1AFanout (
          .in(latencyL1A),
          .outA(latencyL1ATMRA),
          .outB(latencyL1ATMRB),
          .outC(latencyL1ATMRC)
          );

fanout resetFanout (
          .in(reset),
          .outA(resetTMRA),
          .outB(resetTMRB),
          .outC(resetTMRC)
          );

fanout clkFanout (
          .in(clk),
          .outA(clkTMRA),
          .outB(clkTMRB),
          .outC(clkTMRC)
          );

fanout modeFanout (
          .in(mode),
          .outA(modeTMRA),
          .outB(modeTMRB),
          .outC(modeTMRC)
          );

fanout #(.WIDTH(7)) occupancyFanout (
          .in(occupancy),
          .outA(occupancyTMRA),
          .outB(occupancyTMRB),
          .outC(occupancyTMRC)
          );

fanout #(.WIDTH(8)) pixelIDFanout (
          .in(pixelID),
          .outA(pixelIDTMRA),
          .outB(pixelIDTMRB),
          .outC(pixelIDTMRC)
          );
endmodule

