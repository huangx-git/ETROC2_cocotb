/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/busMatrixAdapterTMR.v                                                        *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:50                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/busMatrixAdapter.v *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 11:51:38.800691                                         *
 *           File Size         : 1302                                                               *
 *           MD5 hash          : 3c2691886159d9cd80f9d1ff128039ae                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module busMatrixAdapterTMR(
     input  rstA,
     input  rstB,
     input  rstC,
     input [15:0] wbAdrA,
     input [15:0] wbAdrB,
     input [15:0] wbAdrC,
     input [7:0] wbDataM2SA,
     input [7:0] wbDataM2SB,
     input [7:0] wbDataM2SC,
     output [7:0] wbDataS2MA,
     output [7:0] wbDataS2MB,
     output [7:0] wbDataS2MC,
     input  wbWeA,
     input  wbWeB,
     input  wbWeC,
     input  wbClkA,
     input  wbClkB,
     input  wbClkC,
     output  busTmrErrorPresentA,
     output  busTmrErrorPresentB,
     output  busTmrErrorPresentC,
     output  busRstA,
     output  busRstB,
     output  busRstC,
     output  busWeA,
     output  busWeB,
     output  busWeC,
     output  busReA,
     output  busReB,
     output  busReC,
     output  busClkA,
     output  busClkB,
     output  busClkC,
     output [15:0] busAddrA,
     output [15:0] busAddrB,
     output [15:0] busAddrC,
     output [7:0] busDataMosiA,
     output [7:0] busDataMosiB,
     output [7:0] busDataMosiC,
     input [7:0] busDataMisoA,
     input [7:0] busDataMisoB,
     input [7:0] busDataMisoC,
     input  busTmrErrorA,
     input  busTmrErrorB,
     input  busTmrErrorC
);
wor wbWeDelNextTmrErrorC;
wire [1:0] wbWeDelNextVotedC;
wor wbWeDelNextTmrErrorB;
wire [1:0] wbWeDelNextVotedB;
wor wbWeDelNextTmrErrorA;
wire [1:0] wbWeDelNextVotedA;
wire matrixSelectedA =  wbAdrA[15] ;
wire matrixSelectedB =  wbAdrB[15] ;
wire matrixSelectedC =  wbAdrC[15] ;
assign busTmrErrorPresentA =  busTmrErrorA;
assign busTmrErrorPresentB =  busTmrErrorB;
assign busTmrErrorPresentC =  busTmrErrorC;
assign busRstA =  rstA;
assign busRstB =  rstB;
assign busRstC =  rstC;
assign busAddrA =  matrixSelectedA ? wbAdrA : 16'b0;
assign busAddrB =  matrixSelectedB ? wbAdrB : 16'b0;
assign busAddrC =  matrixSelectedC ? wbAdrC : 16'b0;
assign busDataMosiA =  matrixSelectedA ? wbDataM2SA : 8'b0;
assign busDataMosiB =  matrixSelectedB ? wbDataM2SB : 8'b0;
assign busDataMosiC =  matrixSelectedC ? wbDataM2SC : 8'b0;
assign wbDataS2MA =  matrixSelectedA ? busDataMisoA : 8'b0;
assign wbDataS2MB =  matrixSelectedB ? busDataMisoB : 8'b0;
assign wbDataS2MC =  matrixSelectedC ? busDataMisoC : 8'b0;
reg  [1:0] wbWeDelA;
reg  [1:0] wbWeDelB;
reg  [1:0] wbWeDelC;
wire [1:0] wbWeDelNextA =  {wbWeDelA[0] ,wbWeA};
wire [1:0] wbWeDelNextB =  {wbWeDelB[0] ,wbWeB};
wire [1:0] wbWeDelNextC =  {wbWeDelC[0] ,wbWeC};

always @( posedge wbClkA or posedge rstA )
     if (rstA)
          wbWeDelA <= #1 2'b00;
     else
          wbWeDelA <= #1 wbWeDelNextVotedA;

always @( posedge wbClkB or posedge rstB )
     if (rstB)
          wbWeDelB <= #1 2'b00;
     else
          wbWeDelB <= #1 wbWeDelNextVotedB;

always @( posedge wbClkC or posedge rstC )
     if (rstC)
          wbWeDelC <= #1 2'b00;
     else
          wbWeDelC <= #1 wbWeDelNextVotedC;
wire wbWePulseA =  (wbWeDelA==2'b01);
wire wbWePulseB =  (wbWeDelB==2'b01);
wire wbWePulseC =  (wbWeDelC==2'b01);
assign busWeA =  wbWeA&matrixSelectedA;
assign busWeB =  wbWeB&matrixSelectedB;
assign busWeC =  wbWeC&matrixSelectedC;
wire busClkEnableA =  busTmrErrorA|wbWePulseA&matrixSelectedA;
wire busClkEnableB =  busTmrErrorB|wbWePulseB&matrixSelectedB;
wire busClkEnableC =  busTmrErrorC|wbWePulseC&matrixSelectedC;

CKLNQD2 CG_preserveA (
          .CP(wbClkA),
          .Q(busClkA),
          .TE(1'b0),
          .E(busClkEnableA)
          );

CKLNQD2 CG_preserveB (
          .CP(wbClkB),
          .Q(busClkB),
          .TE(1'b0),
          .E(busClkEnableB)
          );

CKLNQD2 CG_preserveC (
          .CP(wbClkC),
          .Q(busClkC),
          .TE(1'b0),
          .E(busClkEnableC)
          );
assign busReA =  1'b1;
assign busReB =  1'b1;
assign busReC =  1'b1;

majorityVoter #(.WIDTH(2)) wbWeDelNextVoterA (
          .inA(wbWeDelNextA),
          .inB(wbWeDelNextB),
          .inC(wbWeDelNextC),
          .out(wbWeDelNextVotedA),
          .tmrErr(wbWeDelNextTmrErrorA)
          );

majorityVoter #(.WIDTH(2)) wbWeDelNextVoterB (
          .inA(wbWeDelNextA),
          .inB(wbWeDelNextB),
          .inC(wbWeDelNextC),
          .out(wbWeDelNextVotedB),
          .tmrErr(wbWeDelNextTmrErrorB)
          );

majorityVoter #(.WIDTH(2)) wbWeDelNextVoterC (
          .inA(wbWeDelNextA),
          .inB(wbWeDelNextB),
          .inC(wbWeDelNextC),
          .out(wbWeDelNextVotedC),
          .tmrErr(wbWeDelNextTmrErrorC)
          );
endmodule

