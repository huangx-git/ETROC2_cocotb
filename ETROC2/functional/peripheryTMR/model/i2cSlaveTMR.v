/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/i2cSlaveTMR.v                                                                *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:52                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/i2cSlave.v        *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 11:50:53.514696                                         *
 *           File Size         : 12255                                                              *
 *           MD5 hash          : dad8416f1f7da6bad0f76c6b4b990247                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module i2cSlaveTMR(
     input  SDAinA,
     input  SDAinB,
     input  SDAinC,
     output  SDAoutA,
     output  SDAoutB,
     output  SDAoutC,
     output  SDAenA,
     output  SDAenB,
     output  SDAenC,
     input  SCLinA,
     input  SCLinB,
     input  SCLinC,
     output  SCLoutA,
     output  SCLoutB,
     output  SCLoutC,
     output  SCLenA,
     output  SCLenB,
     output  SCLenC,
     input [6:0] i2cAddrA,
     input [6:0] i2cAddrB,
     input [6:0] i2cAddrC,
     input  driveSDAA,
     input  driveSDAB,
     input  driveSDAC,
     input  rstA,
     input  rstB,
     input  rstC,
     input  clkA,
     input  clkB,
     input  clkC,
     output reg [15:0] wbAdrA,
     output reg [15:0] wbAdrB,
     output reg [15:0] wbAdrC,
     output reg  wbWeA,
     output reg  wbWeB,
     output reg  wbWeC,
     input [7:0] wbDataInA,
     input [7:0] wbDataInB,
     input [7:0] wbDataInC,
     output reg [7:0] wbDataOutA,
     output reg [7:0] wbDataOutB,
     output reg [7:0] wbDataOutC,
     output reg  activeA,
     output reg  activeB,
     output reg  activeC,
     output  startA,
     output  startB,
     output  startC,
     output  stopA,
     output  stopB,
     output  stopC,
     output  tmrErrorA,
     output  tmrErrorB,
     output  tmrErrorC
);
localparam   [2:0] IDLE=3'd0;
localparam   [2:0] ADRI2C=3'd1;
localparam   [2:0] REGADR=3'd2;
localparam   [2:0] REGADR2=3'd3;
localparam   [2:0] DATA_M2S=3'd4;
localparam   [2:0] DATA_S2M=3'd5;
localparam    TIMEOUT_MAX=24'hffffff;
wor wbWeTmrErrorC;
wor wbDataOutTmrErrorC;
wor wbDataInTmrErrorC;
wor wbAdrTmrErrorC;
wor timeoutCntTmrErrorC;
wor stateTmrErrorC;
wor iTmrErrorC;
wor i2cAddrTmrErrorC;
wor bufferTmrErrorC;
wor activeTmrErrorC;
wor SDAoutIntTmrErrorC;
wor SDAfilterTmrErrorC;
wor SDAffTmrErrorC;
wor SDAenIntTmrErrorC;
wor SDATmrErrorC;
wor SCLfilterTmrErrorC;
wor SCLffTmrErrorC;
wor SCLTmrErrorC;
wire [2:0] stateVotedC;
wire activeVotedC;
wire [2:0] SDAfilterVotedC;
wire SDAffVotedC;
wire [3:0] iVotedC;
wire [1:0] SDAVotedC;
wire [7:0] wbDataOutVotedC;
wire [1:0] SCLVotedC;
wire wbWeVotedC;
wire [7:0] wbDataInVotedC;
wire [2:0] SCLfilterVotedC;
wire [23:0] timeoutCntVotedC;
wire SDAoutIntVotedC;
wire [6:0] i2cAddrVotedC;
wire [15:0] wbAdrVotedC;
wire SCLffVotedC;
wire [7:0] bufferVotedC;
wire SDAenIntVotedC;
wor wbWeTmrErrorB;
wor wbDataOutTmrErrorB;
wor wbDataInTmrErrorB;
wor wbAdrTmrErrorB;
wor timeoutCntTmrErrorB;
wor stateTmrErrorB;
wor iTmrErrorB;
wor i2cAddrTmrErrorB;
wor bufferTmrErrorB;
wor activeTmrErrorB;
wor SDAoutIntTmrErrorB;
wor SDAfilterTmrErrorB;
wor SDAffTmrErrorB;
wor SDAenIntTmrErrorB;
wor SDATmrErrorB;
wor SCLfilterTmrErrorB;
wor SCLffTmrErrorB;
wor SCLTmrErrorB;
wire [7:0] bufferVotedB;
wire [2:0] stateVotedB;
wire [2:0] SDAfilterVotedB;
wire activeVotedB;
wire SDAffVotedB;
wire [1:0] SDAVotedB;
wire [3:0] iVotedB;
wire [1:0] SCLVotedB;
wire [7:0] wbDataOutVotedB;
wire [23:0] timeoutCntVotedB;
wire [2:0] SCLfilterVotedB;
wire [7:0] wbDataInVotedB;
wire [6:0] i2cAddrVotedB;
wire SDAoutIntVotedB;
wire [15:0] wbAdrVotedB;
wire wbWeVotedB;
wire SCLffVotedB;
wire SDAenIntVotedB;
wor wbWeTmrErrorA;
wor wbDataOutTmrErrorA;
wor wbDataInTmrErrorA;
wor wbAdrTmrErrorA;
wor timeoutCntTmrErrorA;
wor stateTmrErrorA;
wor iTmrErrorA;
wor i2cAddrTmrErrorA;
wor bufferTmrErrorA;
wor activeTmrErrorA;
wor SDAoutIntTmrErrorA;
wor SDAfilterTmrErrorA;
wor SDAffTmrErrorA;
wor SDAenIntTmrErrorA;
wor SDATmrErrorA;
wor SCLfilterTmrErrorA;
wor SCLffTmrErrorA;
wor SCLTmrErrorA;
wire [2:0] stateVotedA;
wire wbWeVotedA;
wire [6:0] i2cAddrVotedA;
wire SDAffVotedA;
wire activeVotedA;
wire [2:0] SDAfilterVotedA;
wire [7:0] bufferVotedA;
wire [3:0] iVotedA;
wire [1:0] SDAVotedA;
wire [7:0] wbDataOutVotedA;
wire [1:0] SCLVotedA;
wire [7:0] wbDataInVotedA;
wire [2:0] SCLfilterVotedA;
wire [15:0] wbAdrVotedA;
wire SDAoutIntVotedA;
wire SCLffVotedA;
wire [23:0] timeoutCntVotedA;
wire SDAenIntVotedA;
assign SCLoutA =  1'b1;
assign SCLoutB =  1'b1;
assign SCLoutC =  1'b1;
assign SCLenA =  1'b0;
assign SCLenB =  1'b0;
assign SCLenC =  1'b0;
reg  SDAoutIntA;
reg  SDAoutIntB;
reg  SDAoutIntC;
reg  SDAenIntA;
reg  SDAenIntB;
reg  SDAenIntC;
assign SDAoutA =  driveSDAA ? SDAoutIntVotedA : 1'b0;
assign SDAoutB =  driveSDAB ? SDAoutIntVotedB : 1'b0;
assign SDAoutC =  driveSDAC ? SDAoutIntVotedC : 1'b0;
assign SDAenA =  driveSDAA ? SDAenIntVotedA : (SDAenIntVotedA&&~SDAoutIntVotedA);
assign SDAenB =  driveSDAB ? SDAenIntVotedB : (SDAenIntVotedB&&~SDAoutIntVotedB);
assign SDAenC =  driveSDAC ? SDAenIntVotedC : (SDAenIntVotedC&&~SDAoutIntVotedC);
reg  SDAffA;
reg  SDAffB;
reg  SDAffC;
reg  SCLffA;
reg  SCLffB;
reg  SCLffC;
reg  [2:0] SDAfilterA;
reg  [2:0] SDAfilterB;
reg  [2:0] SDAfilterC;
reg  [2:0] SDAfilterNextA;
reg  [2:0] SDAfilterNextB;
reg  [2:0] SDAfilterNextC;
reg  [2:0] SCLfilterA;
reg  [2:0] SCLfilterB;
reg  [2:0] SCLfilterC;
reg  [2:0] SCLfilterNextA;
reg  [2:0] SCLfilterNextB;
reg  [2:0] SCLfilterNextC;
reg  [1:0] SDAA;
reg  [1:0] SDAB;
reg  [1:0] SDAC;
reg  [1:0] SDANextA;
reg  [1:0] SDANextB;
reg  [1:0] SDANextC;
reg  [1:0] SCLA;
reg  [1:0] SCLB;
reg  [1:0] SCLC;
reg  [1:0] SCLNextA;
reg  [1:0] SCLNextB;
reg  [1:0] SCLNextC;

always @( posedge clkA or posedge rstA )
     if (rstA)
          begin
               SDAffA <= #1 1'b1;
               SCLffA <= #1 1'b1;
               SDAfilterA <= #1 3'b111;
               SCLfilterA <= #1 3'b111;
               SCLA <= #1 2'b11;
               SDAA <= #1 2'b11;
          end
     else
          begin
               SDAffA <= #1 SDAinA;
               SCLffA <= #1 SCLinA;
               SDAfilterA <= #1 SDAfilterNextA;
               SCLfilterA <= #1 SCLfilterNextA;
               SCLA <= #1 SCLNextA;
               SDAA <= #1 SDANextA;
          end

always @( posedge clkB or posedge rstB )
     if (rstB)
          begin
               SDAffB <= #1 1'b1;
               SCLffB <= #1 1'b1;
               SDAfilterB <= #1 3'b111;
               SCLfilterB <= #1 3'b111;
               SCLB <= #1 2'b11;
               SDAB <= #1 2'b11;
          end
     else
          begin
               SDAffB <= #1 SDAinB;
               SCLffB <= #1 SCLinB;
               SDAfilterB <= #1 SDAfilterNextB;
               SCLfilterB <= #1 SCLfilterNextB;
               SCLB <= #1 SCLNextB;
               SDAB <= #1 SDANextB;
          end

always @( posedge clkC or posedge rstC )
     if (rstC)
          begin
               SDAffC <= #1 1'b1;
               SCLffC <= #1 1'b1;
               SDAfilterC <= #1 3'b111;
               SCLfilterC <= #1 3'b111;
               SCLC <= #1 2'b11;
               SDAC <= #1 2'b11;
          end
     else
          begin
               SDAffC <= #1 SDAinC;
               SCLffC <= #1 SCLinC;
               SDAfilterC <= #1 SDAfilterNextC;
               SCLfilterC <= #1 SCLfilterNextC;
               SCLC <= #1 SCLNextC;
               SDAC <= #1 SDANextC;
          end
wire SDAfilteredA =  SDAfilterVotedA[0] &SDAfilterVotedA[1] |SDAfilterVotedA[1] &SDAfilterVotedA[2] |SDAfilterVotedA[0] &SDAfilterVotedA[2] ;
wire SDAfilteredB =  SDAfilterVotedB[0] &SDAfilterVotedB[1] |SDAfilterVotedB[1] &SDAfilterVotedB[2] |SDAfilterVotedB[0] &SDAfilterVotedB[2] ;
wire SDAfilteredC =  SDAfilterVotedC[0] &SDAfilterVotedC[1] |SDAfilterVotedC[1] &SDAfilterVotedC[2] |SDAfilterVotedC[0] &SDAfilterVotedC[2] ;
wire SCLfilteredA =  SCLfilterVotedA[0] &SCLfilterVotedA[1] |SCLfilterVotedA[1] &SCLfilterVotedA[2] |SCLfilterVotedA[0] &SCLfilterVotedA[2] ;
wire SCLfilteredB =  SCLfilterVotedB[0] &SCLfilterVotedB[1] |SCLfilterVotedB[1] &SCLfilterVotedB[2] |SCLfilterVotedB[0] &SCLfilterVotedB[2] ;
wire SCLfilteredC =  SCLfilterVotedC[0] &SCLfilterVotedC[1] |SCLfilterVotedC[1] &SCLfilterVotedC[2] |SCLfilterVotedC[0] &SCLfilterVotedC[2] ;
wire SDA_riseA =  !SDAVotedA[1] &SDAVotedA[0] ;
wire SDA_riseB =  !SDAVotedB[1] &SDAVotedB[0] ;
wire SDA_riseC =  !SDAVotedC[1] &SDAVotedC[0] ;
wire SDA_fallA =  SDAVotedA[1] &!SDAVotedA[0] ;
wire SDA_fallB =  SDAVotedB[1] &!SDAVotedB[0] ;
wire SDA_fallC =  SDAVotedC[1] &!SDAVotedC[0] ;
wire SCL_riseA =  !SCLVotedA[1] &SCLVotedA[0] ;
wire SCL_riseB =  !SCLVotedB[1] &SCLVotedB[0] ;
wire SCL_riseC =  !SCLVotedC[1] &SCLVotedC[0] ;
wire SCL_fallA =  SCLVotedA[1] &!SCLVotedA[0] ;
wire SCL_fallB =  SCLVotedB[1] &!SCLVotedB[0] ;
wire SCL_fallC =  SCLVotedC[1] &!SCLVotedC[0] ;
assign startA =  SCLVotedA[0] &SDA_fallA;
assign startB =  SCLVotedB[0] &SDA_fallB;
assign startC =  SCLVotedC[0] &SDA_fallC;
assign stopA =  SCLVotedA[0] &SDA_riseA;
assign stopB =  SCLVotedB[0] &SDA_riseB;
assign stopC =  SCLVotedC[0] &SDA_riseC;
reg  [2:0] stateA;
reg  [2:0] stateB;
reg  [2:0] stateC;
reg  [7:0] bufferA;
reg  [7:0] bufferB;
reg  [7:0] bufferC;
reg  [3:0] iA;
reg  [3:0] iB;
reg  [3:0] iC;
reg  SDAoutIntNextA;
reg  SDAoutIntNextB;
reg  SDAoutIntNextC;
reg  SDAenIntNextA;
reg  SDAenIntNextB;
reg  SDAenIntNextC;
reg  [2:0] stateNextA;
reg  [2:0] stateNextB;
reg  [2:0] stateNextC;
reg  [7:0] bufferNextA;
reg  [7:0] bufferNextB;
reg  [7:0] bufferNextC;
reg  [3:0] iNextA;
reg  [3:0] iNextB;
reg  [3:0] iNextC;
reg  [7:0] wbDataOutNextA;
reg  [7:0] wbDataOutNextB;
reg  [7:0] wbDataOutNextC;
reg  [15:0] wbAdrNextA;
reg  [15:0] wbAdrNextB;
reg  [15:0] wbAdrNextC;
reg  wbWeNextA;
reg  wbWeNextB;
reg  wbWeNextC;
reg  activeNextA;
reg  activeNextB;
reg  activeNextC;
reg  [23:0] timeoutCntA;
reg  [23:0] timeoutCntB;
reg  [23:0] timeoutCntC;
reg  [23:0] timeoutCntNextA;
reg  [23:0] timeoutCntNextB;
reg  [23:0] timeoutCntNextC;
wire timeoutA =  (timeoutCntVotedA==24'b0);
wire timeoutB =  (timeoutCntVotedB==24'b0);
wire timeoutC =  (timeoutCntVotedC==24'b0);

always @( posedge clkA or posedge rstA )
     begin
          if (rstA)
               begin
                    iA <= #1 4'b0;
                    bufferA <= #1 8'b0;
                    wbDataOutA <= #1 8'b0;
                    SDAoutIntA <= #1 1'b1;
                    SDAenIntA <= #1 1'b0;
                    stateA <= #1 IDLE;
                    wbAdrA <= #1 16'b0;
                    wbWeA <= #1 1'b0;
                    activeA <= #1 1'b0;
                    timeoutCntA <= #1 TIMEOUT_MAX;
               end
          else
               begin
                    iA <= #1 iNextA;
                    bufferA <= #1 bufferNextA;
                    wbDataOutA <= #1 wbDataOutNextA;
                    SDAoutIntA <= #1 SDAoutIntNextA;
                    SDAenIntA <= #1 SDAenIntNextA;
                    stateA <= #1 stateNextA;
                    wbAdrA <= #1 wbAdrNextA;
                    wbWeA <= #1 wbWeNextA;
                    activeA <= #1 activeNextA;
                    timeoutCntA <= #1 timeoutCntNextA;
               end
     end

always @( posedge clkB or posedge rstB )
     begin
          if (rstB)
               begin
                    iB <= #1 4'b0;
                    bufferB <= #1 8'b0;
                    wbDataOutB <= #1 8'b0;
                    SDAoutIntB <= #1 1'b1;
                    SDAenIntB <= #1 1'b0;
                    stateB <= #1 IDLE;
                    wbAdrB <= #1 16'b0;
                    wbWeB <= #1 1'b0;
                    activeB <= #1 1'b0;
                    timeoutCntB <= #1 TIMEOUT_MAX;
               end
          else
               begin
                    iB <= #1 iNextB;
                    bufferB <= #1 bufferNextB;
                    wbDataOutB <= #1 wbDataOutNextB;
                    SDAoutIntB <= #1 SDAoutIntNextB;
                    SDAenIntB <= #1 SDAenIntNextB;
                    stateB <= #1 stateNextB;
                    wbAdrB <= #1 wbAdrNextB;
                    wbWeB <= #1 wbWeNextB;
                    activeB <= #1 activeNextB;
                    timeoutCntB <= #1 timeoutCntNextB;
               end
     end

always @( posedge clkC or posedge rstC )
     begin
          if (rstC)
               begin
                    iC <= #1 4'b0;
                    bufferC <= #1 8'b0;
                    wbDataOutC <= #1 8'b0;
                    SDAoutIntC <= #1 1'b1;
                    SDAenIntC <= #1 1'b0;
                    stateC <= #1 IDLE;
                    wbAdrC <= #1 16'b0;
                    wbWeC <= #1 1'b0;
                    activeC <= #1 1'b0;
                    timeoutCntC <= #1 TIMEOUT_MAX;
               end
          else
               begin
                    iC <= #1 iNextC;
                    bufferC <= #1 bufferNextC;
                    wbDataOutC <= #1 wbDataOutNextC;
                    SDAoutIntC <= #1 SDAoutIntNextC;
                    SDAenIntC <= #1 SDAenIntNextC;
                    stateC <= #1 stateNextC;
                    wbAdrC <= #1 wbAdrNextC;
                    wbWeC <= #1 wbWeNextC;
                    activeC <= #1 activeNextC;
                    timeoutCntC <= #1 timeoutCntNextC;
               end
     end

always @*
     begin
          SDAoutIntNextA =  SDAoutIntVotedA;
          SDAenIntNextA =  SDAenIntVotedA;
          iNextA =  iVotedA;
          stateNextA =  stateVotedA;
          wbDataOutNextA =  wbDataOutVotedA;
          bufferNextA =  bufferVotedA;
          wbAdrNextA =  wbAdrVotedA;
          wbWeNextA =  wbWeVotedA;
          activeNextA =  activeVotedA;
          timeoutCntNextA =  timeoutCntVotedA;
          case (stateVotedA)
               IDLE : 
                    begin
                         SDAenIntNextA =  1'b0;
                         wbWeNextA =  1'b0;
                    end
               ADRI2C : 
                    begin
                         wbWeNextA =  1'b0;
                         if (SCL_riseA)
                              iNextA =  iVotedA+4'b1;
                         if (iVotedA<4'd8)
                              begin
                                   SDAenIntNextA =  1'b0;
                                   if (SCL_riseA)
                                        bufferNextA =  {bufferVotedA[6:0] ,SDAVotedA[0] };
                              end
                         if (iVotedA==4'd8&&SCL_fallA)
                              begin
                                   if ((bufferVotedA[7:1] ==i2cAddrVotedA)|(bufferVotedA[7:1] ==7'b000_0000))
                                        begin
                                             SDAenIntNextA =  1'b1;
                                             SDAoutIntNextA =  1'b0;
                                             if (bufferVotedA[0] )
                                                  wbWeNextA =  1'b0;
                                        end
                                   else
                                        stateNextA =  IDLE;
                              end
                         if (iVotedA==4'd9)
                              begin
                                   if (bufferVotedA[0] )
                                        begin
                                             iNextA =  4'b0;
                                             stateNextA =  DATA_S2M;
                                             bufferNextA =  wbDataInVotedA;
                                        end
                                   else
                                        begin
                                             if (SCL_fallA)
                                                  begin
                                                       iNextA =  4'b0;
                                                       SDAenIntNextA =  1'b0;
                                                       stateNextA =  REGADR;
                                                  end
                                        end
                              end
                    end
               REGADR : 
                    begin
                         wbWeNextA =  1'b0;
                         if (SCL_riseA)
                              iNextA =  iVotedA+4'b1;
                         if (iVotedA<4'd8)
                              begin
                                   SDAenIntNextA =  1'b0;
                                   if (SCL_riseA)
                                        bufferNextA =  {bufferVotedA[6:0] ,SDAVotedA[0] };
                              end
                         if (iVotedA==4'd8&&SCL_fallA)
                              begin
                                   SDAenIntNextA =  1'b1;
                                   SDAoutIntNextA =  1'b0;
                                   wbAdrNextA[7:0]  =  bufferVotedA[7:0] ;
                              end
                         if (iVotedA==4'd9&&SCL_fallA)
                              begin
                                   iNextA =  4'b0;
                                   SDAenIntNextA =  1'b0;
                                   stateNextA =  REGADR2;
                              end
                    end
               REGADR2 : 
                    begin
                         wbWeNextA =  1'b0;
                         if (SCL_riseA)
                              iNextA =  iVotedA+4'b1;
                         if (iVotedA<4'd8)
                              begin
                                   SDAenIntNextA =  1'b0;
                                   if (SCL_riseA)
                                        bufferNextA =  {bufferVotedA[6:0] ,SDAVotedA[0] };
                              end
                         if (iVotedA==4'd8&&SCL_fallA)
                              begin
                                   SDAenIntNextA =  1'b1;
                                   SDAoutIntNextA =  1'b0;
                                   wbAdrNextA[15:8]  =  bufferVotedA[7:0] ;
                              end
                         if (iVotedA==4'd9&&SCL_fallA)
                              begin
                                   iNextA =  4'b0;
                                   SDAenIntNextA =  1'b0;
                                   stateNextA =  DATA_M2S;
                              end
                    end
               DATA_M2S : 
                    begin
                         if (SCL_riseA)
                              iNextA =  iVotedA+4'b1;
                         if (iVotedA<4'd8)
                              begin
                                   SDAoutIntNextA =  1'b1;
                                   SDAenIntNextA =  1'b0;
                                   if (SCL_riseA)
                                        bufferNextA =  {bufferVotedA[6:0] ,SDAVotedA[0] };
                              end
                         if (iVotedA==4'd8&&SCL_fallA)
                              begin
                                   SDAenIntNextA =  1'b1;
                                   SDAoutIntNextA =  1'b0;
                                   wbDataOutNextA =  bufferVotedA;
                                   wbWeNextA =  1'b1;
                              end
                         if (iVotedA==4'd9&&SCL_fallA)
                              begin
                                   SDAenIntNextA =  1'b0;
                                   iNextA =  4'b0;
                                   wbWeNextA =  1'b0;
                                   wbAdrNextA =  wbAdrVotedA+16'b1;
                              end
                    end
               DATA_S2M : 
                    begin
                         if (SCL_fallA)
                              iNextA =  iVotedA+4'b1;
                         if (iVotedA<4'd8)
                              begin
                                   SDAenIntNextA =  1'b1;
                                   if (SCL_fallA)
                                        begin
                                             SDAoutIntNextA =  bufferVotedA[7] ;
                                             bufferNextA =  bufferVotedA<<1;
                                        end
                              end
                         if (iVotedA==4'd8&&SCL_fallA)
                              begin
                                   SDAenIntNextA =  1'b0;
                                   wbAdrNextA =  wbAdrVotedA+16'b1;
                              end
                         if (iVotedA==4'd9)
                              begin
                                   SDAenIntNextA =  1'b0;
                                   if (SCL_riseA)
                                        begin
                                             if (~SDAVotedA[0] )
                                                  begin
                                                       iNextA =  4'b0;
                                                       bufferNextA =  wbDataInVotedA;
                                                  end
                                             else
                                                  begin
                                                       stateNextA =  IDLE;
                                                  end
                                        end
                              end
                    end
               default : stateNextA =  IDLE;
          endcase
          SDAfilterNextA =  {SDAfilterVotedA[1:0] ,SDAffVotedA};
          SCLfilterNextA =  {SCLfilterVotedA[1:0] ,SCLffVotedA};
          SCLNextA =  {SCLVotedA[0] ,SCLfilteredA};
          SDANextA =  {SDAVotedA[0] ,SDAfilteredA};
          if (stopA|timeoutA)
               begin
                    SDAenIntNextA =  1'b0;
                    SDAoutIntNextA =  1'b1;
                    activeNextA =  1'b0;
                    stateNextA =  IDLE;
                    SDAfilterNextA =  3'b111;
                    SCLfilterNextA =  3'b111;
                    SCLNextA =  2'b11;
                    SDANextA =  2'b11;
               end
          if (startA)
               begin
                    stateNextA =  ADRI2C;
                    activeNextA =  1'b1;
                    SDAenIntNextA =  1'b0;
                    iNextA =  4'b0;
               end
          if (SCLVotedA[0] )
               begin
                    SDAenIntNextA =  SDAenIntVotedA;
                    SDAoutIntNextA =  SDAoutIntVotedA;
               end
          if (SDA_fallA|SDA_riseA|SCL_riseA|SCL_fallA)
               timeoutCntNextA =  TIMEOUT_MAX;
          else
               timeoutCntNextA =  timeoutCntVotedA-24'b1;
     end

always @*
     begin
          SDAoutIntNextB =  SDAoutIntVotedB;
          SDAenIntNextB =  SDAenIntVotedB;
          iNextB =  iVotedB;
          stateNextB =  stateVotedB;
          wbDataOutNextB =  wbDataOutVotedB;
          bufferNextB =  bufferVotedB;
          wbAdrNextB =  wbAdrVotedB;
          wbWeNextB =  wbWeVotedB;
          activeNextB =  activeVotedB;
          timeoutCntNextB =  timeoutCntVotedB;
          case (stateVotedB)
               IDLE : 
                    begin
                         SDAenIntNextB =  1'b0;
                         wbWeNextB =  1'b0;
                    end
               ADRI2C : 
                    begin
                         wbWeNextB =  1'b0;
                         if (SCL_riseB)
                              iNextB =  iVotedB+4'b1;
                         if (iVotedB<4'd8)
                              begin
                                   SDAenIntNextB =  1'b0;
                                   if (SCL_riseB)
                                        bufferNextB =  {bufferVotedB[6:0] ,SDAVotedB[0] };
                              end
                         if (iVotedB==4'd8&&SCL_fallB)
                              begin
                                   if ((bufferVotedB[7:1] ==i2cAddrVotedB)|(bufferVotedB[7:1] ==7'b000_0000))
                                        begin
                                             SDAenIntNextB =  1'b1;
                                             SDAoutIntNextB =  1'b0;
                                             if (bufferVotedB[0] )
                                                  wbWeNextB =  1'b0;
                                        end
                                   else
                                        stateNextB =  IDLE;
                              end
                         if (iVotedB==4'd9)
                              begin
                                   if (bufferVotedB[0] )
                                        begin
                                             iNextB =  4'b0;
                                             stateNextB =  DATA_S2M;
                                             bufferNextB =  wbDataInVotedB;
                                        end
                                   else
                                        begin
                                             if (SCL_fallB)
                                                  begin
                                                       iNextB =  4'b0;
                                                       SDAenIntNextB =  1'b0;
                                                       stateNextB =  REGADR;
                                                  end
                                        end
                              end
                    end
               REGADR : 
                    begin
                         wbWeNextB =  1'b0;
                         if (SCL_riseB)
                              iNextB =  iVotedB+4'b1;
                         if (iVotedB<4'd8)
                              begin
                                   SDAenIntNextB =  1'b0;
                                   if (SCL_riseB)
                                        bufferNextB =  {bufferVotedB[6:0] ,SDAVotedB[0] };
                              end
                         if (iVotedB==4'd8&&SCL_fallB)
                              begin
                                   SDAenIntNextB =  1'b1;
                                   SDAoutIntNextB =  1'b0;
                                   wbAdrNextB[7:0]  =  bufferVotedB[7:0] ;
                              end
                         if (iVotedB==4'd9&&SCL_fallB)
                              begin
                                   iNextB =  4'b0;
                                   SDAenIntNextB =  1'b0;
                                   stateNextB =  REGADR2;
                              end
                    end
               REGADR2 : 
                    begin
                         wbWeNextB =  1'b0;
                         if (SCL_riseB)
                              iNextB =  iVotedB+4'b1;
                         if (iVotedB<4'd8)
                              begin
                                   SDAenIntNextB =  1'b0;
                                   if (SCL_riseB)
                                        bufferNextB =  {bufferVotedB[6:0] ,SDAVotedB[0] };
                              end
                         if (iVotedB==4'd8&&SCL_fallB)
                              begin
                                   SDAenIntNextB =  1'b1;
                                   SDAoutIntNextB =  1'b0;
                                   wbAdrNextB[15:8]  =  bufferVotedB[7:0] ;
                              end
                         if (iVotedB==4'd9&&SCL_fallB)
                              begin
                                   iNextB =  4'b0;
                                   SDAenIntNextB =  1'b0;
                                   stateNextB =  DATA_M2S;
                              end
                    end
               DATA_M2S : 
                    begin
                         if (SCL_riseB)
                              iNextB =  iVotedB+4'b1;
                         if (iVotedB<4'd8)
                              begin
                                   SDAoutIntNextB =  1'b1;
                                   SDAenIntNextB =  1'b0;
                                   if (SCL_riseB)
                                        bufferNextB =  {bufferVotedB[6:0] ,SDAVotedB[0] };
                              end
                         if (iVotedB==4'd8&&SCL_fallB)
                              begin
                                   SDAenIntNextB =  1'b1;
                                   SDAoutIntNextB =  1'b0;
                                   wbDataOutNextB =  bufferVotedB;
                                   wbWeNextB =  1'b1;
                              end
                         if (iVotedB==4'd9&&SCL_fallB)
                              begin
                                   SDAenIntNextB =  1'b0;
                                   iNextB =  4'b0;
                                   wbWeNextB =  1'b0;
                                   wbAdrNextB =  wbAdrVotedB+16'b1;
                              end
                    end
               DATA_S2M : 
                    begin
                         if (SCL_fallB)
                              iNextB =  iVotedB+4'b1;
                         if (iVotedB<4'd8)
                              begin
                                   SDAenIntNextB =  1'b1;
                                   if (SCL_fallB)
                                        begin
                                             SDAoutIntNextB =  bufferVotedB[7] ;
                                             bufferNextB =  bufferVotedB<<1;
                                        end
                              end
                         if (iVotedB==4'd8&&SCL_fallB)
                              begin
                                   SDAenIntNextB =  1'b0;
                                   wbAdrNextB =  wbAdrVotedB+16'b1;
                              end
                         if (iVotedB==4'd9)
                              begin
                                   SDAenIntNextB =  1'b0;
                                   if (SCL_riseB)
                                        begin
                                             if (~SDAVotedB[0] )
                                                  begin
                                                       iNextB =  4'b0;
                                                       bufferNextB =  wbDataInVotedB;
                                                  end
                                             else
                                                  begin
                                                       stateNextB =  IDLE;
                                                  end
                                        end
                              end
                    end
               default : stateNextB =  IDLE;
          endcase
          SDAfilterNextB =  {SDAfilterVotedB[1:0] ,SDAffVotedB};
          SCLfilterNextB =  {SCLfilterVotedB[1:0] ,SCLffVotedB};
          SCLNextB =  {SCLVotedB[0] ,SCLfilteredB};
          SDANextB =  {SDAVotedB[0] ,SDAfilteredB};
          if (stopB|timeoutB)
               begin
                    SDAenIntNextB =  1'b0;
                    SDAoutIntNextB =  1'b1;
                    activeNextB =  1'b0;
                    stateNextB =  IDLE;
                    SDAfilterNextB =  3'b111;
                    SCLfilterNextB =  3'b111;
                    SCLNextB =  2'b11;
                    SDANextB =  2'b11;
               end
          if (startB)
               begin
                    stateNextB =  ADRI2C;
                    activeNextB =  1'b1;
                    SDAenIntNextB =  1'b0;
                    iNextB =  4'b0;
               end
          if (SCLVotedB[0] )
               begin
                    SDAenIntNextB =  SDAenIntVotedB;
                    SDAoutIntNextB =  SDAoutIntVotedB;
               end
          if (SDA_fallB|SDA_riseB|SCL_riseB|SCL_fallB)
               timeoutCntNextB =  TIMEOUT_MAX;
          else
               timeoutCntNextB =  timeoutCntVotedB-24'b1;
     end

always @*
     begin
          SDAoutIntNextC =  SDAoutIntVotedC;
          SDAenIntNextC =  SDAenIntVotedC;
          iNextC =  iVotedC;
          stateNextC =  stateVotedC;
          wbDataOutNextC =  wbDataOutVotedC;
          bufferNextC =  bufferVotedC;
          wbAdrNextC =  wbAdrVotedC;
          wbWeNextC =  wbWeVotedC;
          activeNextC =  activeVotedC;
          timeoutCntNextC =  timeoutCntVotedC;
          case (stateVotedC)
               IDLE : 
                    begin
                         SDAenIntNextC =  1'b0;
                         wbWeNextC =  1'b0;
                    end
               ADRI2C : 
                    begin
                         wbWeNextC =  1'b0;
                         if (SCL_riseC)
                              iNextC =  iVotedC+4'b1;
                         if (iVotedC<4'd8)
                              begin
                                   SDAenIntNextC =  1'b0;
                                   if (SCL_riseC)
                                        bufferNextC =  {bufferVotedC[6:0] ,SDAVotedC[0] };
                              end
                         if (iVotedC==4'd8&&SCL_fallC)
                              begin
                                   if ((bufferVotedC[7:1] ==i2cAddrVotedC)|(bufferVotedC[7:1] ==7'b000_0000))
                                        begin
                                             SDAenIntNextC =  1'b1;
                                             SDAoutIntNextC =  1'b0;
                                             if (bufferVotedC[0] )
                                                  wbWeNextC =  1'b0;
                                        end
                                   else
                                        stateNextC =  IDLE;
                              end
                         if (iVotedC==4'd9)
                              begin
                                   if (bufferVotedC[0] )
                                        begin
                                             iNextC =  4'b0;
                                             stateNextC =  DATA_S2M;
                                             bufferNextC =  wbDataInVotedC;
                                        end
                                   else
                                        begin
                                             if (SCL_fallC)
                                                  begin
                                                       iNextC =  4'b0;
                                                       SDAenIntNextC =  1'b0;
                                                       stateNextC =  REGADR;
                                                  end
                                        end
                              end
                    end
               REGADR : 
                    begin
                         wbWeNextC =  1'b0;
                         if (SCL_riseC)
                              iNextC =  iVotedC+4'b1;
                         if (iVotedC<4'd8)
                              begin
                                   SDAenIntNextC =  1'b0;
                                   if (SCL_riseC)
                                        bufferNextC =  {bufferVotedC[6:0] ,SDAVotedC[0] };
                              end
                         if (iVotedC==4'd8&&SCL_fallC)
                              begin
                                   SDAenIntNextC =  1'b1;
                                   SDAoutIntNextC =  1'b0;
                                   wbAdrNextC[7:0]  =  bufferVotedC[7:0] ;
                              end
                         if (iVotedC==4'd9&&SCL_fallC)
                              begin
                                   iNextC =  4'b0;
                                   SDAenIntNextC =  1'b0;
                                   stateNextC =  REGADR2;
                              end
                    end
               REGADR2 : 
                    begin
                         wbWeNextC =  1'b0;
                         if (SCL_riseC)
                              iNextC =  iVotedC+4'b1;
                         if (iVotedC<4'd8)
                              begin
                                   SDAenIntNextC =  1'b0;
                                   if (SCL_riseC)
                                        bufferNextC =  {bufferVotedC[6:0] ,SDAVotedC[0] };
                              end
                         if (iVotedC==4'd8&&SCL_fallC)
                              begin
                                   SDAenIntNextC =  1'b1;
                                   SDAoutIntNextC =  1'b0;
                                   wbAdrNextC[15:8]  =  bufferVotedC[7:0] ;
                              end
                         if (iVotedC==4'd9&&SCL_fallC)
                              begin
                                   iNextC =  4'b0;
                                   SDAenIntNextC =  1'b0;
                                   stateNextC =  DATA_M2S;
                              end
                    end
               DATA_M2S : 
                    begin
                         if (SCL_riseC)
                              iNextC =  iVotedC+4'b1;
                         if (iVotedC<4'd8)
                              begin
                                   SDAoutIntNextC =  1'b1;
                                   SDAenIntNextC =  1'b0;
                                   if (SCL_riseC)
                                        bufferNextC =  {bufferVotedC[6:0] ,SDAVotedC[0] };
                              end
                         if (iVotedC==4'd8&&SCL_fallC)
                              begin
                                   SDAenIntNextC =  1'b1;
                                   SDAoutIntNextC =  1'b0;
                                   wbDataOutNextC =  bufferVotedC;
                                   wbWeNextC =  1'b1;
                              end
                         if (iVotedC==4'd9&&SCL_fallC)
                              begin
                                   SDAenIntNextC =  1'b0;
                                   iNextC =  4'b0;
                                   wbWeNextC =  1'b0;
                                   wbAdrNextC =  wbAdrVotedC+16'b1;
                              end
                    end
               DATA_S2M : 
                    begin
                         if (SCL_fallC)
                              iNextC =  iVotedC+4'b1;
                         if (iVotedC<4'd8)
                              begin
                                   SDAenIntNextC =  1'b1;
                                   if (SCL_fallC)
                                        begin
                                             SDAoutIntNextC =  bufferVotedC[7] ;
                                             bufferNextC =  bufferVotedC<<1;
                                        end
                              end
                         if (iVotedC==4'd8&&SCL_fallC)
                              begin
                                   SDAenIntNextC =  1'b0;
                                   wbAdrNextC =  wbAdrVotedC+16'b1;
                              end
                         if (iVotedC==4'd9)
                              begin
                                   SDAenIntNextC =  1'b0;
                                   if (SCL_riseC)
                                        begin
                                             if (~SDAVotedC[0] )
                                                  begin
                                                       iNextC =  4'b0;
                                                       bufferNextC =  wbDataInVotedC;
                                                  end
                                             else
                                                  begin
                                                       stateNextC =  IDLE;
                                                  end
                                        end
                              end
                    end
               default : stateNextC =  IDLE;
          endcase
          SDAfilterNextC =  {SDAfilterVotedC[1:0] ,SDAffVotedC};
          SCLfilterNextC =  {SCLfilterVotedC[1:0] ,SCLffVotedC};
          SCLNextC =  {SCLVotedC[0] ,SCLfilteredC};
          SDANextC =  {SDAVotedC[0] ,SDAfilteredC};
          if (stopC|timeoutC)
               begin
                    SDAenIntNextC =  1'b0;
                    SDAoutIntNextC =  1'b1;
                    activeNextC =  1'b0;
                    stateNextC =  IDLE;
                    SDAfilterNextC =  3'b111;
                    SCLfilterNextC =  3'b111;
                    SCLNextC =  2'b11;
                    SDANextC =  2'b11;
               end
          if (startC)
               begin
                    stateNextC =  ADRI2C;
                    activeNextC =  1'b1;
                    SDAenIntNextC =  1'b0;
                    iNextC =  4'b0;
               end
          if (SCLVotedC[0] )
               begin
                    SDAenIntNextC =  SDAenIntVotedC;
                    SDAoutIntNextC =  SDAoutIntVotedC;
               end
          if (SDA_fallC|SDA_riseC|SCL_riseC|SCL_fallC)
               timeoutCntNextC =  TIMEOUT_MAX;
          else
               timeoutCntNextC =  timeoutCntVotedC-24'b1;
     end

majorityVoter SDAenIntVoterA (
          .inA(SDAenIntA),
          .inB(SDAenIntB),
          .inC(SDAenIntC),
          .out(SDAenIntVotedA),
          .tmrErr(SDAenIntTmrErrorA)
          );

majorityVoter #(.WIDTH(24)) timeoutCntVoterA (
          .inA(timeoutCntA),
          .inB(timeoutCntB),
          .inC(timeoutCntC),
          .out(timeoutCntVotedA),
          .tmrErr(timeoutCntTmrErrorA)
          );

majorityVoter SCLffVoterA (
          .inA(SCLffA),
          .inB(SCLffB),
          .inC(SCLffC),
          .out(SCLffVotedA),
          .tmrErr(SCLffTmrErrorA)
          );

majorityVoter SDAoutIntVoterA (
          .inA(SDAoutIntA),
          .inB(SDAoutIntB),
          .inC(SDAoutIntC),
          .out(SDAoutIntVotedA),
          .tmrErr(SDAoutIntTmrErrorA)
          );

majorityVoter #(.WIDTH(16)) wbAdrVoterA (
          .inA(wbAdrA),
          .inB(wbAdrB),
          .inC(wbAdrC),
          .out(wbAdrVotedA),
          .tmrErr(wbAdrTmrErrorA)
          );

majorityVoter #(.WIDTH(3)) SCLfilterVoterA (
          .inA(SCLfilterA),
          .inB(SCLfilterB),
          .inC(SCLfilterC),
          .out(SCLfilterVotedA),
          .tmrErr(SCLfilterTmrErrorA)
          );

majorityVoter #(.WIDTH(8)) wbDataInVoterA (
          .inA(wbDataInA),
          .inB(wbDataInB),
          .inC(wbDataInC),
          .out(wbDataInVotedA),
          .tmrErr(wbDataInTmrErrorA)
          );

majorityVoter #(.WIDTH(2)) SCLVoterA (
          .inA(SCLA),
          .inB(SCLB),
          .inC(SCLC),
          .out(SCLVotedA),
          .tmrErr(SCLTmrErrorA)
          );

majorityVoter #(.WIDTH(8)) wbDataOutVoterA (
          .inA(wbDataOutA),
          .inB(wbDataOutB),
          .inC(wbDataOutC),
          .out(wbDataOutVotedA),
          .tmrErr(wbDataOutTmrErrorA)
          );

majorityVoter #(.WIDTH(2)) SDAVoterA (
          .inA(SDAA),
          .inB(SDAB),
          .inC(SDAC),
          .out(SDAVotedA),
          .tmrErr(SDATmrErrorA)
          );

majorityVoter #(.WIDTH(4)) iVoterA (
          .inA(iA),
          .inB(iB),
          .inC(iC),
          .out(iVotedA),
          .tmrErr(iTmrErrorA)
          );

majorityVoter #(.WIDTH(8)) bufferVoterA (
          .inA(bufferA),
          .inB(bufferB),
          .inC(bufferC),
          .out(bufferVotedA),
          .tmrErr(bufferTmrErrorA)
          );

majorityVoter #(.WIDTH(3)) SDAfilterVoterA (
          .inA(SDAfilterA),
          .inB(SDAfilterB),
          .inC(SDAfilterC),
          .out(SDAfilterVotedA),
          .tmrErr(SDAfilterTmrErrorA)
          );

majorityVoter activeVoterA (
          .inA(activeA),
          .inB(activeB),
          .inC(activeC),
          .out(activeVotedA),
          .tmrErr(activeTmrErrorA)
          );

majorityVoter SDAffVoterA (
          .inA(SDAffA),
          .inB(SDAffB),
          .inC(SDAffC),
          .out(SDAffVotedA),
          .tmrErr(SDAffTmrErrorA)
          );

majorityVoter #(.WIDTH(7)) i2cAddrVoterA (
          .inA(i2cAddrA),
          .inB(i2cAddrB),
          .inC(i2cAddrC),
          .out(i2cAddrVotedA),
          .tmrErr(i2cAddrTmrErrorA)
          );

majorityVoter wbWeVoterA (
          .inA(wbWeA),
          .inB(wbWeB),
          .inC(wbWeC),
          .out(wbWeVotedA),
          .tmrErr(wbWeTmrErrorA)
          );

majorityVoter #(.WIDTH(3)) stateVoterA (
          .inA(stateA),
          .inB(stateB),
          .inC(stateC),
          .out(stateVotedA),
          .tmrErr(stateTmrErrorA)
          );
assign tmrErrorA =  SCLTmrErrorA|SCLfilterTmrErrorA|SDATmrErrorA|SDAenIntTmrErrorA|SDAfilterTmrErrorA|SDAoutIntTmrErrorA|activeTmrErrorA|bufferTmrErrorA|i2cAddrTmrErrorA|iTmrErrorA|stateTmrErrorA|timeoutCntTmrErrorA|wbAdrTmrErrorA|wbDataInTmrErrorA|wbDataOutTmrErrorA|wbWeTmrErrorA;

majorityVoter SDAenIntVoterB (
          .inA(SDAenIntA),
          .inB(SDAenIntB),
          .inC(SDAenIntC),
          .out(SDAenIntVotedB),
          .tmrErr(SDAenIntTmrErrorB)
          );

majorityVoter SCLffVoterB (
          .inA(SCLffA),
          .inB(SCLffB),
          .inC(SCLffC),
          .out(SCLffVotedB),
          .tmrErr(SCLffTmrErrorB)
          );

majorityVoter wbWeVoterB (
          .inA(wbWeA),
          .inB(wbWeB),
          .inC(wbWeC),
          .out(wbWeVotedB),
          .tmrErr(wbWeTmrErrorB)
          );

majorityVoter #(.WIDTH(16)) wbAdrVoterB (
          .inA(wbAdrA),
          .inB(wbAdrB),
          .inC(wbAdrC),
          .out(wbAdrVotedB),
          .tmrErr(wbAdrTmrErrorB)
          );

majorityVoter SDAoutIntVoterB (
          .inA(SDAoutIntA),
          .inB(SDAoutIntB),
          .inC(SDAoutIntC),
          .out(SDAoutIntVotedB),
          .tmrErr(SDAoutIntTmrErrorB)
          );

majorityVoter #(.WIDTH(7)) i2cAddrVoterB (
          .inA(i2cAddrA),
          .inB(i2cAddrB),
          .inC(i2cAddrC),
          .out(i2cAddrVotedB),
          .tmrErr(i2cAddrTmrErrorB)
          );

majorityVoter #(.WIDTH(8)) wbDataInVoterB (
          .inA(wbDataInA),
          .inB(wbDataInB),
          .inC(wbDataInC),
          .out(wbDataInVotedB),
          .tmrErr(wbDataInTmrErrorB)
          );

majorityVoter #(.WIDTH(3)) SCLfilterVoterB (
          .inA(SCLfilterA),
          .inB(SCLfilterB),
          .inC(SCLfilterC),
          .out(SCLfilterVotedB),
          .tmrErr(SCLfilterTmrErrorB)
          );

majorityVoter #(.WIDTH(24)) timeoutCntVoterB (
          .inA(timeoutCntA),
          .inB(timeoutCntB),
          .inC(timeoutCntC),
          .out(timeoutCntVotedB),
          .tmrErr(timeoutCntTmrErrorB)
          );

majorityVoter #(.WIDTH(8)) wbDataOutVoterB (
          .inA(wbDataOutA),
          .inB(wbDataOutB),
          .inC(wbDataOutC),
          .out(wbDataOutVotedB),
          .tmrErr(wbDataOutTmrErrorB)
          );

majorityVoter #(.WIDTH(2)) SCLVoterB (
          .inA(SCLA),
          .inB(SCLB),
          .inC(SCLC),
          .out(SCLVotedB),
          .tmrErr(SCLTmrErrorB)
          );

majorityVoter #(.WIDTH(4)) iVoterB (
          .inA(iA),
          .inB(iB),
          .inC(iC),
          .out(iVotedB),
          .tmrErr(iTmrErrorB)
          );

majorityVoter #(.WIDTH(2)) SDAVoterB (
          .inA(SDAA),
          .inB(SDAB),
          .inC(SDAC),
          .out(SDAVotedB),
          .tmrErr(SDATmrErrorB)
          );

majorityVoter SDAffVoterB (
          .inA(SDAffA),
          .inB(SDAffB),
          .inC(SDAffC),
          .out(SDAffVotedB),
          .tmrErr(SDAffTmrErrorB)
          );

majorityVoter activeVoterB (
          .inA(activeA),
          .inB(activeB),
          .inC(activeC),
          .out(activeVotedB),
          .tmrErr(activeTmrErrorB)
          );

majorityVoter #(.WIDTH(3)) SDAfilterVoterB (
          .inA(SDAfilterA),
          .inB(SDAfilterB),
          .inC(SDAfilterC),
          .out(SDAfilterVotedB),
          .tmrErr(SDAfilterTmrErrorB)
          );

majorityVoter #(.WIDTH(3)) stateVoterB (
          .inA(stateA),
          .inB(stateB),
          .inC(stateC),
          .out(stateVotedB),
          .tmrErr(stateTmrErrorB)
          );

majorityVoter #(.WIDTH(8)) bufferVoterB (
          .inA(bufferA),
          .inB(bufferB),
          .inC(bufferC),
          .out(bufferVotedB),
          .tmrErr(bufferTmrErrorB)
          );
assign tmrErrorB =  SCLTmrErrorB|SCLfilterTmrErrorB|SDATmrErrorB|SDAenIntTmrErrorB|SDAfilterTmrErrorB|SDAoutIntTmrErrorB|activeTmrErrorB|bufferTmrErrorB|i2cAddrTmrErrorB|iTmrErrorB|stateTmrErrorB|timeoutCntTmrErrorB|wbAdrTmrErrorB|wbDataInTmrErrorB|wbDataOutTmrErrorB|wbWeTmrErrorB;

majorityVoter SDAenIntVoterC (
          .inA(SDAenIntA),
          .inB(SDAenIntB),
          .inC(SDAenIntC),
          .out(SDAenIntVotedC),
          .tmrErr(SDAenIntTmrErrorC)
          );

majorityVoter #(.WIDTH(8)) bufferVoterC (
          .inA(bufferA),
          .inB(bufferB),
          .inC(bufferC),
          .out(bufferVotedC),
          .tmrErr(bufferTmrErrorC)
          );

majorityVoter SCLffVoterC (
          .inA(SCLffA),
          .inB(SCLffB),
          .inC(SCLffC),
          .out(SCLffVotedC),
          .tmrErr(SCLffTmrErrorC)
          );

majorityVoter #(.WIDTH(16)) wbAdrVoterC (
          .inA(wbAdrA),
          .inB(wbAdrB),
          .inC(wbAdrC),
          .out(wbAdrVotedC),
          .tmrErr(wbAdrTmrErrorC)
          );

majorityVoter #(.WIDTH(7)) i2cAddrVoterC (
          .inA(i2cAddrA),
          .inB(i2cAddrB),
          .inC(i2cAddrC),
          .out(i2cAddrVotedC),
          .tmrErr(i2cAddrTmrErrorC)
          );

majorityVoter SDAoutIntVoterC (
          .inA(SDAoutIntA),
          .inB(SDAoutIntB),
          .inC(SDAoutIntC),
          .out(SDAoutIntVotedC),
          .tmrErr(SDAoutIntTmrErrorC)
          );

majorityVoter #(.WIDTH(24)) timeoutCntVoterC (
          .inA(timeoutCntA),
          .inB(timeoutCntB),
          .inC(timeoutCntC),
          .out(timeoutCntVotedC),
          .tmrErr(timeoutCntTmrErrorC)
          );

majorityVoter #(.WIDTH(3)) SCLfilterVoterC (
          .inA(SCLfilterA),
          .inB(SCLfilterB),
          .inC(SCLfilterC),
          .out(SCLfilterVotedC),
          .tmrErr(SCLfilterTmrErrorC)
          );

majorityVoter #(.WIDTH(8)) wbDataInVoterC (
          .inA(wbDataInA),
          .inB(wbDataInB),
          .inC(wbDataInC),
          .out(wbDataInVotedC),
          .tmrErr(wbDataInTmrErrorC)
          );

majorityVoter wbWeVoterC (
          .inA(wbWeA),
          .inB(wbWeB),
          .inC(wbWeC),
          .out(wbWeVotedC),
          .tmrErr(wbWeTmrErrorC)
          );

majorityVoter #(.WIDTH(2)) SCLVoterC (
          .inA(SCLA),
          .inB(SCLB),
          .inC(SCLC),
          .out(SCLVotedC),
          .tmrErr(SCLTmrErrorC)
          );

majorityVoter #(.WIDTH(8)) wbDataOutVoterC (
          .inA(wbDataOutA),
          .inB(wbDataOutB),
          .inC(wbDataOutC),
          .out(wbDataOutVotedC),
          .tmrErr(wbDataOutTmrErrorC)
          );

majorityVoter #(.WIDTH(2)) SDAVoterC (
          .inA(SDAA),
          .inB(SDAB),
          .inC(SDAC),
          .out(SDAVotedC),
          .tmrErr(SDATmrErrorC)
          );

majorityVoter #(.WIDTH(4)) iVoterC (
          .inA(iA),
          .inB(iB),
          .inC(iC),
          .out(iVotedC),
          .tmrErr(iTmrErrorC)
          );

majorityVoter SDAffVoterC (
          .inA(SDAffA),
          .inB(SDAffB),
          .inC(SDAffC),
          .out(SDAffVotedC),
          .tmrErr(SDAffTmrErrorC)
          );

majorityVoter #(.WIDTH(3)) SDAfilterVoterC (
          .inA(SDAfilterA),
          .inB(SDAfilterB),
          .inC(SDAfilterC),
          .out(SDAfilterVotedC),
          .tmrErr(SDAfilterTmrErrorC)
          );

majorityVoter activeVoterC (
          .inA(activeA),
          .inB(activeB),
          .inC(activeC),
          .out(activeVotedC),
          .tmrErr(activeTmrErrorC)
          );

majorityVoter #(.WIDTH(3)) stateVoterC (
          .inA(stateA),
          .inB(stateB),
          .inC(stateC),
          .out(stateVotedC),
          .tmrErr(stateTmrErrorC)
          );
assign tmrErrorC =  SCLTmrErrorC|SCLfilterTmrErrorC|SDATmrErrorC|SDAenIntTmrErrorC|SDAfilterTmrErrorC|SDAoutIntTmrErrorC|activeTmrErrorC|bufferTmrErrorC|i2cAddrTmrErrorC|iTmrErrorC|stateTmrErrorC|timeoutCntTmrErrorC|wbAdrTmrErrorC|wbDataInTmrErrorC|wbDataOutTmrErrorC|wbWeTmrErrorC;
endmodule

