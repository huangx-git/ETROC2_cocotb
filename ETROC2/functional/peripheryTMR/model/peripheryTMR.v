/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/peripheryTMR.v                                                               *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:53                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/periphery.v       *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 11:51:38.807691                                         *
 *           File Size         : 15985                                                              *
 *           MD5 hash          : d22308931701d014ec409d35e5221b5c                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module peripheryTMR #(
  parameter COLS=16,
  parameter HIGH_LOW_OUTS=50
)(
     input  SCLin,
     output  SCLen,
     output  SCLout,
     output  SCLds,
     output  SCLpe,
     output  SCLud,
     input  SDAin,
     output  SDAout,
     output  SDAen,
     output  SDAds,
     output  SDApe,
     output  SDAud,
     input  A0in,
     output  A0out,
     output  A0en,
     output  A0ds,
     output  A0pe,
     output  A0ud,
     input  A1in,
     output  A1out,
     output  A1en,
     output  A1ds,
     output  A1pe,
     output  A1ud,
     input  RSTNin,
     output  RSTNout,
     output  RSTNen,
     output  RSTNds,
     output  RSTNpe,
     output  RSTNud,
     input  TOin,
     output  TOen,
     output  TOout,
     output  TOds,
     output  TOpe,
     output  TOud,
     input [3:0] chipID,
     input [3:0] chipREV,
     input [6:2] Ain,
     output [HIGH_LOW_OUTS-1:0] HIGH,
     output [HIGH_LOW_OUTS-1:0] LOW,
     output [7:0] regOut00A,
     output [7:0] regOut00B,
     output [7:0] regOut00C,
     input [7:0] defVal00,
     output [7:0] regOut01A,
     output [7:0] regOut01B,
     output [7:0] regOut01C,
     input [7:0] defVal01,
     output [7:0] regOut02A,
     output [7:0] regOut02B,
     output [7:0] regOut02C,
     input [7:0] defVal02,
     output [7:0] regOut03A,
     output [7:0] regOut03B,
     output [7:0] regOut03C,
     input [7:0] defVal03,
     output [7:0] regOut04A,
     output [7:0] regOut04B,
     output [7:0] regOut04C,
     input [7:0] defVal04,
     output [7:0] regOut05A,
     output [7:0] regOut05B,
     output [7:0] regOut05C,
     input [7:0] defVal05,
     output [7:0] regOut06A,
     output [7:0] regOut06B,
     output [7:0] regOut06C,
     input [7:0] defVal06,
     output [7:0] regOut07A,
     output [7:0] regOut07B,
     output [7:0] regOut07C,
     input [7:0] defVal07,
     output [7:0] regOut08A,
     output [7:0] regOut08B,
     output [7:0] regOut08C,
     input [7:0] defVal08,
     output [7:0] regOut09A,
     output [7:0] regOut09B,
     output [7:0] regOut09C,
     input [7:0] defVal09,
     output [7:0] regOut0AA,
     output [7:0] regOut0AB,
     output [7:0] regOut0AC,
     input [7:0] defVal0A,
     output [7:0] regOut0BA,
     output [7:0] regOut0BB,
     output [7:0] regOut0BC,
     input [7:0] defVal0B,
     output [7:0] regOut0CA,
     output [7:0] regOut0CB,
     output [7:0] regOut0CC,
     input [7:0] defVal0C,
     output [7:0] regOut0DA,
     output [7:0] regOut0DB,
     output [7:0] regOut0DC,
     input [7:0] defVal0D,
     output [7:0] regOut0EA,
     output [7:0] regOut0EB,
     output [7:0] regOut0EC,
     input [7:0] defVal0E,
     output [7:0] regOut0FA,
     output [7:0] regOut0FB,
     output [7:0] regOut0FC,
     input [7:0] defVal0F,
     output [7:0] regOut10A,
     output [7:0] regOut10B,
     output [7:0] regOut10C,
     input [7:0] defVal10,
     output [7:0] regOut11A,
     output [7:0] regOut11B,
     output [7:0] regOut11C,
     input [7:0] defVal11,
     output [7:0] regOut12A,
     output [7:0] regOut12B,
     output [7:0] regOut12C,
     input [7:0] defVal12,
     output [7:0] regOut13A,
     output [7:0] regOut13B,
     output [7:0] regOut13C,
     input [7:0] defVal13,
     output [7:0] regOut14A,
     output [7:0] regOut14B,
     output [7:0] regOut14C,
     input [7:0] defVal14,
     output [7:0] regOut15A,
     output [7:0] regOut15B,
     output [7:0] regOut15C,
     input [7:0] defVal15,
     output [7:0] regOut16A,
     output [7:0] regOut16B,
     output [7:0] regOut16C,
     input [7:0] defVal16,
     output [7:0] regOut17A,
     output [7:0] regOut17B,
     output [7:0] regOut17C,
     input [7:0] defVal17,
     output [7:0] regOut18A,
     output [7:0] regOut18B,
     output [7:0] regOut18C,
     input [7:0] defVal18,
     output [7:0] regOut19A,
     output [7:0] regOut19B,
     output [7:0] regOut19C,
     input [7:0] defVal19,
     output [7:0] regOut1AA,
     output [7:0] regOut1AB,
     output [7:0] regOut1AC,
     input [7:0] defVal1A,
     output [7:0] regOut1BA,
     output [7:0] regOut1BB,
     output [7:0] regOut1BC,
     input [7:0] defVal1B,
     output [7:0] regOut1CA,
     output [7:0] regOut1CB,
     output [7:0] regOut1CC,
     input [7:0] defVal1C,
     output [7:0] regOut1DA,
     output [7:0] regOut1DB,
     output [7:0] regOut1DC,
     input [7:0] defVal1D,
     output [7:0] regOut1EA,
     output [7:0] regOut1EB,
     output [7:0] regOut1EC,
     input [7:0] defVal1E,
     output [7:0] regOut1FA,
     output [7:0] regOut1FB,
     output [7:0] regOut1FC,
     input [7:0] defVal1F,
     input [7:0] regIn100A,
     input [7:0] regIn100B,
     input [7:0] regIn100C,
     input [7:0] regIn101A,
     input [7:0] regIn101B,
     input [7:0] regIn101C,
     input [7:0] regIn102A,
     input [7:0] regIn102B,
     input [7:0] regIn102C,
     input [7:0] regIn103A,
     input [7:0] regIn103B,
     input [7:0] regIn103C,
     input [7:0] regIn104A,
     input [7:0] regIn104B,
     input [7:0] regIn104C,
     input [7:0] regIn105A,
     input [7:0] regIn105B,
     input [7:0] regIn105C,
     input [7:0] regIn106A,
     input [7:0] regIn106B,
     input [7:0] regIn106C,
     input [7:0] regIn107A,
     input [7:0] regIn107B,
     input [7:0] regIn107C,
     input [7:0] regIn108A,
     input [7:0] regIn108B,
     input [7:0] regIn108C,
     input [7:0] regIn109A,
     input [7:0] regIn109B,
     input [7:0] regIn109C,
     input [7:0] regIn10AA,
     input [7:0] regIn10AB,
     input [7:0] regIn10AC,
     input [7:0] regIn10BA,
     input [7:0] regIn10BB,
     input [7:0] regIn10BC,
     input [7:0] regIn10CA,
     input [7:0] regIn10CB,
     input [7:0] regIn10CC,
     input [7:0] regIn10DA,
     input [7:0] regIn10DB,
     input [7:0] regIn10DC,
     input [7:0] regIn10EA,
     input [7:0] regIn10EB,
     input [7:0] regIn10EC,
     input [7:0] regIn10FA,
     input [7:0] regIn10FB,
     input [7:0] regIn10FC,
     output  matrixBusRstA,
     output  matrixBusRstB,
     output  matrixBusRstC,
     output  matrixBusWeA,
     output  matrixBusWeB,
     output  matrixBusWeC,
     output  matrixBusReA,
     output  matrixBusReB,
     output  matrixBusReC,
     output  matrixBusClkA,
     output  matrixBusClkB,
     output  matrixBusClkC,
     output [15:0] matrixBusAddrA,
     output [15:0] matrixBusAddrB,
     output [15:0] matrixBusAddrC,
     output [7:0] matrixBusDataMosiA,
     output [7:0] matrixBusDataMosiB,
     output [7:0] matrixBusDataMosiC,
     input [7:0] matrixBusDataMisoA,
     input [7:0] matrixBusDataMisoB,
     input [7:0] matrixBusDataMisoC,
     input  matrixBusTmrErrorA,
     input  matrixBusTmrErrorB,
     input  matrixBusTmrErrorC,
     input VDD, 
     input VSS
);
localparam   [7:0] MAGIC_NUMBER=8'b10010110;
localparam   [7:0] REG_SEU0=16'h0120;
localparam   [7:0] REG_SEU1=16'h0121;
localparam   [7:0] REG_SEU2=16'h0122;
localparam   [7:0] REG_SEU3=16'h0123;
parameter    MEMLEN_RW=32+4;
parameter    MEMLEN_ALL=512;
wire [7:0] defVal10C;
wire [7:0] defVal10B;
wire [7:0] defVal10A;
wire [7:0] defVal04C;
wire [7:0] defVal04B;
wire [7:0] defVal04A;
wire [7:0] defVal1BC;
wire [7:0] defVal1BB;
wire [7:0] defVal1BA;
wire [7:0] defVal1EC;
wire [7:0] defVal1EB;
wire [7:0] defVal1EA;
wire [7:0] defVal19C;
wire [7:0] defVal19B;
wire [7:0] defVal19A;
wire [7:0] defVal1DC;
wire [7:0] defVal1DB;
wire [7:0] defVal1DA;
wire [7:0] defVal05C;
wire [7:0] defVal05B;
wire [7:0] defVal05A;
wire [7:0] defVal15C;
wire [7:0] defVal15B;
wire [7:0] defVal15A;
wire [7:0] defVal0AC;
wire [7:0] defVal0AB;
wire [7:0] defVal0AA;
wire A1inC;
wire A1inB;
wire A1inA;
wire [7:0] defVal1AC;
wire [7:0] defVal1AB;
wire [7:0] defVal1AA;
wire [7:0] defVal14C;
wire [7:0] defVal14B;
wire [7:0] defVal14A;
wire [7:0] defVal01C;
wire [7:0] defVal01B;
wire [7:0] defVal01A;
wire [7:0] defVal08C;
wire [7:0] defVal08B;
wire [7:0] defVal08A;
wire [7:0] defVal0DC;
wire [7:0] defVal0DB;
wire [7:0] defVal0DA;
wire [7:0] defVal06C;
wire [7:0] defVal06B;
wire [7:0] defVal06A;
wire [7:0] defVal00C;
wire [7:0] defVal00B;
wire [7:0] defVal00A;
wire [7:0] defVal07C;
wire [7:0] defVal07B;
wire [7:0] defVal07A;
wire [7:0] defVal13C;
wire [7:0] defVal13B;
wire [7:0] defVal13A;
wire [7:0] defVal0EC;
wire [7:0] defVal0EB;
wire [7:0] defVal0EA;
wire [7:0] defVal0BC;
wire [7:0] defVal0BB;
wire [7:0] defVal0BA;
wire [7:0] defVal0CC;
wire [7:0] defVal0CB;
wire [7:0] defVal0CA;
wire [7:0] defVal12C;
wire [7:0] defVal12B;
wire [7:0] defVal12A;
wire [7:0] defVal02C;
wire [7:0] defVal02B;
wire [7:0] defVal02A;
wire [7:0] defVal18C;
wire [7:0] defVal18B;
wire [7:0] defVal18A;
wire [7:0] defVal1FC;
wire [7:0] defVal1FB;
wire [7:0] defVal1FA;
wire A0inC;
wire A0inB;
wire A0inA;
wire [7:0] defVal09C;
wire [7:0] defVal09B;
wire [7:0] defVal09A;
wire [7:0] defVal0FC;
wire [7:0] defVal0FB;
wire [7:0] defVal0FA;
wire [7:0] defVal03C;
wire [7:0] defVal03B;
wire [7:0] defVal03A;
wire SDAinC;
wire SDAinB;
wire SDAinA;
wire [7:0] defVal16C;
wire [7:0] defVal16B;
wire [7:0] defVal16A;
wire RSTNinC;
wire RSTNinB;
wire RSTNinA;
wire SCLinC;
wire SCLinB;
wire SCLinA;
wire [6:2] AinC;
wire [6:2] AinB;
wire [6:2] AinA;
wire [7:0] defVal1CC;
wire [7:0] defVal1CB;
wire [7:0] defVal1CA;
wire [7:0] defVal11C;
wire [7:0] defVal11B;
wire [7:0] defVal11A;
wire [7:0] defVal17C;
wire [7:0] defVal17B;
wire [7:0] defVal17A;
wire tmrErrorC;
wor MECtmrErrorC;
wor MBtmrErrorC;
wor I2CtmrErrorC;
wire tmrErrorB;
wor MECtmrErrorB;
wor MBtmrErrorB;
wor I2CtmrErrorB;
wire tmrErrorA;
wor MECtmrErrorA;
wor MBtmrErrorA;
wor I2CtmrErrorA;
wire tmrError;
wor testOutSelectTmrError;
wor reg21TmrError;
wor i2cStopTmrError;
wor i2cStartTmrError;
wor i2cActiveTmrError;
wor defValTmrError;
wor clkEnableRegCTmrError;
wor clkEnableRegBTmrError;
wor clkEnableRegATmrError;
wor busTmrErrorPresentTmrError;
wor TOenTmrError;
wor SDAoutTmrError;
wor SDAenTmrError;
wor SCLoutTmrError;
wor SCLenTmrError;
wire SCLenB;
wire SCLenC;
wire SCLenA;
wire [MEMLEN_RW*8-1:0] defVal;
wire i2cStop;
wire SDAenB;
wire SDAenC;
wire SDAenA;
wire SCLoutB;
wire SCLoutC;
wire SCLoutA;
wire busTmrErrorPresent;
wire [4:0] testOutSelect;
wire [7:0] reg21;
wire clkEnableRegC;
wire clkEnableRegB;
wire i2cActive;
wire TOenB;
wire TOenC;
wire TOenA;
wire i2cStart;
wire clkEnableRegA;
wire SDAoutB;
wire SDAoutC;
wire SDAoutA;
wire [MEMLEN_RW*8-1:0] memoryValuesA;
wire [MEMLEN_RW*8-1:0] memoryValuesB;
wire [MEMLEN_RW*8-1:0] memoryValuesC;
wire [MEMLEN_ALL*8-1:0] registerValuesA;
wire [MEMLEN_ALL*8-1:0] registerValuesB;
wire [MEMLEN_ALL*8-1:0] registerValuesC;
wire [15:0] wbAdrA;
wire [15:0] wbAdrB;
wire [15:0] wbAdrC;
wire [7:0] wbDataM2SA;
wire [7:0] wbDataM2SB;
wire [7:0] wbDataM2SC;
wire wbWeA;
wire wbWeB;
wire wbWeC;
wire [7:0] wbDataS2MRegsA;
wire [7:0] wbDataS2MRegsB;
wire [7:0] wbDataS2MRegsC;
wire [7:0] wbDataS2MMatrixA;
wire [7:0] wbDataS2MMatrixB;
wire [7:0] wbDataS2MMatrixC;
wire [7:0] wbDataS2MA =  wbAdrA[15]  ? wbDataS2MMatrixA : wbDataS2MRegsA;
wire [7:0] wbDataS2MB =  wbAdrB[15]  ? wbDataS2MMatrixB : wbDataS2MRegsB;
wire [7:0] wbDataS2MC =  wbAdrC[15]  ? wbDataS2MMatrixC : wbDataS2MRegsC;
wire porA;
wire porB;
wire porC;
wire rstCombA =  porA|!RSTNinA;
wire rstCombB =  porB|!RSTNinB;
wire rstCombC =  porC|!RSTNinC;
wire rstA;
wire rstB;
wire rstC;
wire rstVtdA;
wire rstVtdB;
wire rstVtdC;

powerOnResetLong PORA (
          .POR(porA),
          .VDD(VDD), .VSS(VSS)
          );

powerOnResetLong PORB (
          .POR(porB),
          .VDD(VDD), .VSS(VSS)
          );

powerOnResetLong PORC (
          .POR(porC),
          .VDD(VDD), .VSS(VSS)
          );

resetVoterTMR PORV (
          .inA(rstCombA),
          .inB(rstCombB),
          .inC(rstCombC),
          .outA(rstVtdA),
          .outB(rstVtdB),
          .outC(rstVtdC)
          );

glitchFilter rstGFA (
          .in(rstVtdA),
          .out(rstA)
          );

glitchFilter rstGFB (
          .in(rstVtdB),
          .out(rstB)
          );

glitchFilter rstGFC (
          .in(rstVtdC),
          .out(rstC)
          );
wire [6:0] i2cAdrNoGlitchesA;
wire [6:0] i2cAdrNoGlitchesB;
wire [6:0] i2cAdrNoGlitchesC;
wire i2cActiveA;
wire i2cActiveB;
wire i2cActiveC;
wire i2cStartA;
wire i2cStartB;
wire i2cStartC;
wire i2cStopA;
wire i2cStopB;
wire i2cStopC;
wire driveSDAA;
wire driveSDAB;
wire driveSDAC;
wire SDAinNoGlitchesA;
wire SDAinNoGlitchesB;
wire SDAinNoGlitchesC;
wire SCLinNoGlitchesA;
wire SCLinNoGlitchesB;
wire SCLinNoGlitchesC;
assign SCLds =  1'b0;
assign SCLpe =  1'b1;
assign SCLud =  1'b1;
assign SDApe =  1'b1;
assign SDAud =  1'b1;
assign RSTNen =  1'b0;
assign RSTNout =  1'b0;
assign RSTNds =  1'b0;
assign RSTNpe =  1'b1;
assign RSTNud =  1'b1;

glitchFilter SDAinGFA (
          .in(SDAinA),
          .out(SDAinNoGlitchesA)
          );

glitchFilter SDAinGFB (
          .in(SDAinB),
          .out(SDAinNoGlitchesB)
          );

glitchFilter SDAinGFC (
          .in(SDAinC),
          .out(SDAinNoGlitchesC)
          );

glitchFilter SCLinGFA (
          .in(SCLinA),
          .out(SCLinNoGlitchesA)
          );

glitchFilter SCLinGFB (
          .in(SCLinB),
          .out(SCLinNoGlitchesB)
          );

glitchFilter SCLinGFC (
          .in(SCLinC),
          .out(SCLinNoGlitchesC)
          );
wire clkA;
wire clkB;
wire clkC;
wire clkEnableRegAA;
wire clkEnableRegAB;
wire clkEnableRegAC;
wire clkEnableRegBA;
wire clkEnableRegBB;
wire clkEnableRegBC;
wire clkEnableRegCA;
wire clkEnableRegCB;
wire clkEnableRegCC;
wire clkForceEnableA;
wire clkForceEnableB;
wire clkForceEnableC;
wire errDetectedA =  MBtmrErrorA;
wire errDetectedB =  MBtmrErrorB;
wire errDetectedC =  MBtmrErrorC;
wire busTmrErrorPresentA;
wire busTmrErrorPresentB;
wire busTmrErrorPresentC;
wire clkEnableGlithesA =  (i2cActiveA|tmrErrorA|busTmrErrorPresentA|clkForceEnableA|!SCLinA|!SDAinA)&&!rstA;
wire clkEnableGlithesB =  (i2cActiveB|tmrErrorB|busTmrErrorPresentB|clkForceEnableB|!SCLinB|!SDAinB)&&!rstB;
wire clkEnableGlithesC =  (i2cActiveC|tmrErrorC|busTmrErrorPresentC|clkForceEnableC|!SCLinC|!SDAinC)&&!rstC;
wire clkEnableA;
wire clkEnableB;
wire clkEnableC;
wire clkMaskedA;
wire clkMaskedB;
wire clkMaskedC;
wire gateA =  clkEnableRegA;
wire gateB =  clkEnableRegB;
wire gateC =  clkEnableRegC;
reg  gateRegA;
reg  gateRegB;
reg  gateRegC;

clockGeneratorTMR RO (
          .enableA(clkEnableA),
          .enableB(clkEnableB),
          .enableC(clkEnableC),
          .clkA(clkA),
          .clkB(clkB),
          .clkC(clkC)
          );

glitchFilter clkEnGFA (
          .in(clkEnableGlithesA),
          .out(clkEnableA)
          );

glitchFilter clkEnGFB (
          .in(clkEnableGlithesB),
          .out(clkEnableB)
          );

glitchFilter clkEnGFC (
          .in(clkEnableGlithesC),
          .out(clkEnableC)
          );

always @( negedge clkA or posedge rstA )
     begin
          if (rstA)
               gateRegA <= 1'b1;
          else
               gateRegA <= gateA;
     end

always @( negedge clkB or posedge rstB )
     begin
          if (rstB)
               gateRegB <= 1'b1;
          else
               gateRegB <= gateB;
     end

always @( negedge clkC or posedge rstC )
     begin
          if (rstC)
               gateRegC <= 1'b1;
          else
               gateRegC <= gateC;
     end
assign clkMaskedA =  clkA&gateRegA;
assign clkMaskedB =  clkB&gateRegB;
assign clkMaskedC =  clkC&gateRegC;

i2cSlaveTMR I2C (
          .SDAoutA(SDAoutA),
          .SDAoutB(SDAoutB),
          .SDAoutC(SDAoutC),
          .SDAenA(SDAenA),
          .SDAenB(SDAenB),
          .SDAenC(SDAenC),
          .SDAinA(SDAinNoGlitchesA),
          .SDAinB(SDAinNoGlitchesB),
          .SDAinC(SDAinNoGlitchesC),
          .SCLinA(SCLinNoGlitchesA),
          .SCLinB(SCLinNoGlitchesB),
          .SCLinC(SCLinNoGlitchesC),
          .SCLoutA(SCLoutA),
          .SCLoutB(SCLoutB),
          .SCLoutC(SCLoutC),
          .SCLenA(SCLenA),
          .SCLenB(SCLenB),
          .SCLenC(SCLenC),
          .rstA(rstA),
          .rstB(rstB),
          .rstC(rstC),
          .clkA(clkMaskedA),
          .clkB(clkMaskedB),
          .clkC(clkMaskedC),
          .i2cAddrA(i2cAdrNoGlitchesA),
          .i2cAddrB(i2cAdrNoGlitchesB),
          .i2cAddrC(i2cAdrNoGlitchesC),
          .wbDataInA(wbDataS2MA),
          .wbDataInB(wbDataS2MB),
          .wbDataInC(wbDataS2MC),
          .wbDataOutA(wbDataM2SA),
          .wbDataOutB(wbDataM2SB),
          .wbDataOutC(wbDataM2SC),
          .wbWeA(wbWeA),
          .wbWeB(wbWeB),
          .wbWeC(wbWeC),
          .wbAdrA(wbAdrA),
          .wbAdrB(wbAdrB),
          .wbAdrC(wbAdrC),
          .startA(i2cStartA),
          .startB(i2cStartB),
          .startC(i2cStartC),
          .stopA(i2cStopA),
          .stopB(i2cStopB),
          .stopC(i2cStopC),
          .activeA(i2cActiveA),
          .activeB(i2cActiveB),
          .activeC(i2cActiveC),
          .driveSDAA(driveSDAA),
          .driveSDAB(driveSDAB),
          .driveSDAC(driveSDAC),
          .tmrErrorA(I2CtmrErrorA),
          .tmrErrorB(I2CtmrErrorB),
          .tmrErrorC(I2CtmrErrorC)
          );
assign A0ds =  1'b1;
assign A0pe =  1'b1;
assign A0ud =  1'b0;
assign A0en =  1'b0;
assign A0out =  1'b0;
assign A1ds =  1'b1;
assign A1pe =  1'b1;
assign A1ud =  1'b0;
assign A1en =  1'b0;
assign A1out =  1'b0;

glitchFilter AGF6A (
          .in(AinA[6] ),
          .out(i2cAdrNoGlitchesA[6] )
          );

glitchFilter AGF6B (
          .in(AinB[6] ),
          .out(i2cAdrNoGlitchesB[6] )
          );

glitchFilter AGF6C (
          .in(AinC[6] ),
          .out(i2cAdrNoGlitchesC[6] )
          );

glitchFilter AGF5A (
          .in(AinA[5] ),
          .out(i2cAdrNoGlitchesA[5] )
          );

glitchFilter AGF5B (
          .in(AinB[5] ),
          .out(i2cAdrNoGlitchesB[5] )
          );

glitchFilter AGF5C (
          .in(AinC[5] ),
          .out(i2cAdrNoGlitchesC[5] )
          );

glitchFilter AGF4A (
          .in(AinA[4] ),
          .out(i2cAdrNoGlitchesA[4] )
          );

glitchFilter AGF4B (
          .in(AinB[4] ),
          .out(i2cAdrNoGlitchesB[4] )
          );

glitchFilter AGF4C (
          .in(AinC[4] ),
          .out(i2cAdrNoGlitchesC[4] )
          );

glitchFilter AGF3A (
          .in(AinA[3] ),
          .out(i2cAdrNoGlitchesA[3] )
          );

glitchFilter AGF3B (
          .in(AinB[3] ),
          .out(i2cAdrNoGlitchesB[3] )
          );

glitchFilter AGF3C (
          .in(AinC[3] ),
          .out(i2cAdrNoGlitchesC[3] )
          );

glitchFilter AGF2A (
          .in(AinA[2] ),
          .out(i2cAdrNoGlitchesA[2] )
          );

glitchFilter AGF2B (
          .in(AinB[2] ),
          .out(i2cAdrNoGlitchesB[2] )
          );

glitchFilter AGF2C (
          .in(AinC[2] ),
          .out(i2cAdrNoGlitchesC[2] )
          );

glitchFilter A1GFA (
          .in(A1inA),
          .out(i2cAdrNoGlitchesA[1] )
          );

glitchFilter A1GFB (
          .in(A1inB),
          .out(i2cAdrNoGlitchesB[1] )
          );

glitchFilter A1GFC (
          .in(A1inC),
          .out(i2cAdrNoGlitchesC[1] )
          );

glitchFilter A0GFA (
          .in(A0inA),
          .out(i2cAdrNoGlitchesA[0] )
          );

glitchFilter A0GFB (
          .in(A0inB),
          .out(i2cAdrNoGlitchesB[0] )
          );

glitchFilter A0GFC (
          .in(A0inC),
          .out(i2cAdrNoGlitchesC[0] )
          );
wire [MEMLEN_RW*8-1:0] defValA;
wire [MEMLEN_RW*8-1:0] defValB;
wire [MEMLEN_RW*8-1:0] defValC;
wire [MEMLEN_RW*8-1:0] regOutA;
wire [MEMLEN_RW*8-1:0] regOutB;
wire [MEMLEN_RW*8-1:0] regOutC;

registerFileTMR #(.MEMLEN(MEMLEN_RW)) MB (
          .wbAdrA(wbAdrA),
          .wbAdrB(wbAdrB),
          .wbAdrC(wbAdrC),
          .wbDataInA(wbDataM2SA),
          .wbDataInB(wbDataM2SB),
          .wbDataInC(wbDataM2SC),
          .wbWeA(wbWeA),
          .wbWeB(wbWeB),
          .wbWeC(wbWeC),
          .clkA(clkMaskedA),
          .clkB(clkMaskedB),
          .clkC(clkMaskedC),
          .rstA(rstA),
          .rstB(rstB),
          .rstC(rstC),
          .defaultValue(defVal),
          .valuesA(memoryValuesA),
          .valuesB(memoryValuesB),
          .valuesC(memoryValuesC),
          .tmrErrorA(MBtmrErrorA),
          .tmrErrorB(MBtmrErrorB),
          .tmrErrorC(MBtmrErrorC)
          );
wire [31:0] seuCounterA;
wire [31:0] seuCounterB;
wire [31:0] seuCounterC;
assign regOut00A =  memoryValuesA[0*8+:8] ;
assign regOut00B =  memoryValuesB[0*8+:8] ;
assign regOut00C =  memoryValuesC[0*8+:8] ;
assign regOut01A =  memoryValuesA[1*8+:8] ;
assign regOut01B =  memoryValuesB[1*8+:8] ;
assign regOut01C =  memoryValuesC[1*8+:8] ;
assign regOut02A =  memoryValuesA[2*8+:8] ;
assign regOut02B =  memoryValuesB[2*8+:8] ;
assign regOut02C =  memoryValuesC[2*8+:8] ;
assign regOut03A =  memoryValuesA[3*8+:8] ;
assign regOut03B =  memoryValuesB[3*8+:8] ;
assign regOut03C =  memoryValuesC[3*8+:8] ;
assign regOut04A =  memoryValuesA[4*8+:8] ;
assign regOut04B =  memoryValuesB[4*8+:8] ;
assign regOut04C =  memoryValuesC[4*8+:8] ;
assign regOut05A =  memoryValuesA[5*8+:8] ;
assign regOut05B =  memoryValuesB[5*8+:8] ;
assign regOut05C =  memoryValuesC[5*8+:8] ;
assign regOut06A =  memoryValuesA[6*8+:8] ;
assign regOut06B =  memoryValuesB[6*8+:8] ;
assign regOut06C =  memoryValuesC[6*8+:8] ;
assign regOut07A =  memoryValuesA[7*8+:8] ;
assign regOut07B =  memoryValuesB[7*8+:8] ;
assign regOut07C =  memoryValuesC[7*8+:8] ;
assign regOut08A =  memoryValuesA[8*8+:8] ;
assign regOut08B =  memoryValuesB[8*8+:8] ;
assign regOut08C =  memoryValuesC[8*8+:8] ;
assign regOut09A =  memoryValuesA[9*8+:8] ;
assign regOut09B =  memoryValuesB[9*8+:8] ;
assign regOut09C =  memoryValuesC[9*8+:8] ;
assign regOut0AA =  memoryValuesA[10*8+:8] ;
assign regOut0AB =  memoryValuesB[10*8+:8] ;
assign regOut0AC =  memoryValuesC[10*8+:8] ;
assign regOut0BA =  memoryValuesA[11*8+:8] ;
assign regOut0BB =  memoryValuesB[11*8+:8] ;
assign regOut0BC =  memoryValuesC[11*8+:8] ;
assign regOut0CA =  memoryValuesA[12*8+:8] ;
assign regOut0CB =  memoryValuesB[12*8+:8] ;
assign regOut0CC =  memoryValuesC[12*8+:8] ;
assign regOut0DA =  memoryValuesA[13*8+:8] ;
assign regOut0DB =  memoryValuesB[13*8+:8] ;
assign regOut0DC =  memoryValuesC[13*8+:8] ;
assign regOut0EA =  memoryValuesA[14*8+:8] ;
assign regOut0EB =  memoryValuesB[14*8+:8] ;
assign regOut0EC =  memoryValuesC[14*8+:8] ;
assign regOut0FA =  memoryValuesA[15*8+:8] ;
assign regOut0FB =  memoryValuesB[15*8+:8] ;
assign regOut0FC =  memoryValuesC[15*8+:8] ;
assign regOut10A =  memoryValuesA[16*8+:8] ;
assign regOut10B =  memoryValuesB[16*8+:8] ;
assign regOut10C =  memoryValuesC[16*8+:8] ;
assign regOut11A =  memoryValuesA[17*8+:8] ;
assign regOut11B =  memoryValuesB[17*8+:8] ;
assign regOut11C =  memoryValuesC[17*8+:8] ;
assign regOut12A =  memoryValuesA[18*8+:8] ;
assign regOut12B =  memoryValuesB[18*8+:8] ;
assign regOut12C =  memoryValuesC[18*8+:8] ;
assign regOut13A =  memoryValuesA[19*8+:8] ;
assign regOut13B =  memoryValuesB[19*8+:8] ;
assign regOut13C =  memoryValuesC[19*8+:8] ;
assign regOut14A =  memoryValuesA[20*8+:8] ;
assign regOut14B =  memoryValuesB[20*8+:8] ;
assign regOut14C =  memoryValuesC[20*8+:8] ;
assign regOut15A =  memoryValuesA[21*8+:8] ;
assign regOut15B =  memoryValuesB[21*8+:8] ;
assign regOut15C =  memoryValuesC[21*8+:8] ;
assign regOut16A =  memoryValuesA[22*8+:8] ;
assign regOut16B =  memoryValuesB[22*8+:8] ;
assign regOut16C =  memoryValuesC[22*8+:8] ;
assign regOut17A =  memoryValuesA[23*8+:8] ;
assign regOut17B =  memoryValuesB[23*8+:8] ;
assign regOut17C =  memoryValuesC[23*8+:8] ;
assign regOut18A =  memoryValuesA[24*8+:8] ;
assign regOut18B =  memoryValuesB[24*8+:8] ;
assign regOut18C =  memoryValuesC[24*8+:8] ;
assign regOut19A =  memoryValuesA[25*8+:8] ;
assign regOut19B =  memoryValuesB[25*8+:8] ;
assign regOut19C =  memoryValuesC[25*8+:8] ;
assign regOut1AA =  memoryValuesA[26*8+:8] ;
assign regOut1AB =  memoryValuesB[26*8+:8] ;
assign regOut1AC =  memoryValuesC[26*8+:8] ;
assign regOut1BA =  memoryValuesA[27*8+:8] ;
assign regOut1BB =  memoryValuesB[27*8+:8] ;
assign regOut1BC =  memoryValuesC[27*8+:8] ;
assign regOut1CA =  memoryValuesA[28*8+:8] ;
assign regOut1CB =  memoryValuesB[28*8+:8] ;
assign regOut1CC =  memoryValuesC[28*8+:8] ;
assign regOut1DA =  memoryValuesA[29*8+:8] ;
assign regOut1DB =  memoryValuesB[29*8+:8] ;
assign regOut1DC =  memoryValuesC[29*8+:8] ;
assign regOut1EA =  memoryValuesA[30*8+:8] ;
assign regOut1EB =  memoryValuesB[30*8+:8] ;
assign regOut1EC =  memoryValuesC[30*8+:8] ;
assign regOut1FA =  memoryValuesA[31*8+:8] ;
assign regOut1FB =  memoryValuesB[31*8+:8] ;
assign regOut1FC =  memoryValuesC[31*8+:8] ;
assign defValA[0*8+:8]  =  defVal00A;
assign defValB[0*8+:8]  =  defVal00B;
assign defValC[0*8+:8]  =  defVal00C;
assign defValA[1*8+:8]  =  defVal01A;
assign defValB[1*8+:8]  =  defVal01B;
assign defValC[1*8+:8]  =  defVal01C;
assign defValA[2*8+:8]  =  defVal02A;
assign defValB[2*8+:8]  =  defVal02B;
assign defValC[2*8+:8]  =  defVal02C;
assign defValA[3*8+:8]  =  defVal03A;
assign defValB[3*8+:8]  =  defVal03B;
assign defValC[3*8+:8]  =  defVal03C;
assign defValA[4*8+:8]  =  defVal04A;
assign defValB[4*8+:8]  =  defVal04B;
assign defValC[4*8+:8]  =  defVal04C;
assign defValA[5*8+:8]  =  defVal05A;
assign defValB[5*8+:8]  =  defVal05B;
assign defValC[5*8+:8]  =  defVal05C;
assign defValA[6*8+:8]  =  defVal06A;
assign defValB[6*8+:8]  =  defVal06B;
assign defValC[6*8+:8]  =  defVal06C;
assign defValA[7*8+:8]  =  defVal07A;
assign defValB[7*8+:8]  =  defVal07B;
assign defValC[7*8+:8]  =  defVal07C;
assign defValA[8*8+:8]  =  defVal08A;
assign defValB[8*8+:8]  =  defVal08B;
assign defValC[8*8+:8]  =  defVal08C;
assign defValA[9*8+:8]  =  defVal09A;
assign defValB[9*8+:8]  =  defVal09B;
assign defValC[9*8+:8]  =  defVal09C;
assign defValA[10*8+:8]  =  defVal0AA;
assign defValB[10*8+:8]  =  defVal0AB;
assign defValC[10*8+:8]  =  defVal0AC;
assign defValA[11*8+:8]  =  defVal0BA;
assign defValB[11*8+:8]  =  defVal0BB;
assign defValC[11*8+:8]  =  defVal0BC;
assign defValA[12*8+:8]  =  defVal0CA;
assign defValB[12*8+:8]  =  defVal0CB;
assign defValC[12*8+:8]  =  defVal0CC;
assign defValA[13*8+:8]  =  defVal0DA;
assign defValB[13*8+:8]  =  defVal0DB;
assign defValC[13*8+:8]  =  defVal0DC;
assign defValA[14*8+:8]  =  defVal0EA;
assign defValB[14*8+:8]  =  defVal0EB;
assign defValC[14*8+:8]  =  defVal0EC;
assign defValA[15*8+:8]  =  defVal0FA;
assign defValB[15*8+:8]  =  defVal0FB;
assign defValC[15*8+:8]  =  defVal0FC;
assign defValA[16*8+:8]  =  defVal10A;
assign defValB[16*8+:8]  =  defVal10B;
assign defValC[16*8+:8]  =  defVal10C;
assign defValA[17*8+:8]  =  defVal11A;
assign defValB[17*8+:8]  =  defVal11B;
assign defValC[17*8+:8]  =  defVal11C;
assign defValA[18*8+:8]  =  defVal12A;
assign defValB[18*8+:8]  =  defVal12B;
assign defValC[18*8+:8]  =  defVal12C;
assign defValA[19*8+:8]  =  defVal13A;
assign defValB[19*8+:8]  =  defVal13B;
assign defValC[19*8+:8]  =  defVal13C;
assign defValA[20*8+:8]  =  defVal14A;
assign defValB[20*8+:8]  =  defVal14B;
assign defValC[20*8+:8]  =  defVal14C;
assign defValA[21*8+:8]  =  defVal15A;
assign defValB[21*8+:8]  =  defVal15B;
assign defValC[21*8+:8]  =  defVal15C;
assign defValA[22*8+:8]  =  defVal16A;
assign defValB[22*8+:8]  =  defVal16B;
assign defValC[22*8+:8]  =  defVal16C;
assign defValA[23*8+:8]  =  defVal17A;
assign defValB[23*8+:8]  =  defVal17B;
assign defValC[23*8+:8]  =  defVal17C;
assign defValA[24*8+:8]  =  defVal18A;
assign defValB[24*8+:8]  =  defVal18B;
assign defValC[24*8+:8]  =  defVal18C;
assign defValA[25*8+:8]  =  defVal19A;
assign defValB[25*8+:8]  =  defVal19B;
assign defValC[25*8+:8]  =  defVal19C;
assign defValA[26*8+:8]  =  defVal1AA;
assign defValB[26*8+:8]  =  defVal1AB;
assign defValC[26*8+:8]  =  defVal1AC;
assign defValA[27*8+:8]  =  defVal1BA;
assign defValB[27*8+:8]  =  defVal1BB;
assign defValC[27*8+:8]  =  defVal1BC;
assign defValA[28*8+:8]  =  defVal1CA;
assign defValB[28*8+:8]  =  defVal1CB;
assign defValC[28*8+:8]  =  defVal1CC;
assign defValA[29*8+:8]  =  defVal1DA;
assign defValB[29*8+:8]  =  defVal1DB;
assign defValC[29*8+:8]  =  defVal1DC;
assign defValA[30*8+:8]  =  defVal1EA;
assign defValB[30*8+:8]  =  defVal1EB;
assign defValC[30*8+:8]  =  defVal1EC;
assign defValA[31*8+:8]  =  defVal1FA;
assign defValB[31*8+:8]  =  defVal1FB;
assign defValC[31*8+:8]  =  defVal1FC;
assign defValA[32*8+:8]  =  8'b0;
assign defValB[32*8+:8]  =  8'b0;
assign defValC[32*8+:8]  =  8'b0;
assign defValA[33*8+:8]  =  8'b0;
assign defValB[33*8+:8]  =  8'b0;
assign defValC[33*8+:8]  =  8'b0;
assign defValA[34*8+:8]  =  8'b0;
assign defValB[34*8+:8]  =  8'b0;
assign defValC[34*8+:8]  =  8'b0;
assign defValA[35*8+:8]  =  8'b0;
assign defValB[35*8+:8]  =  8'b0;
assign defValC[35*8+:8]  =  8'b0;
assign registerValuesA[MEMLEN_RW*8-1:0]  =  memoryValuesA[MEMLEN_RW*8-1:0] ;
assign registerValuesB[MEMLEN_RW*8-1:0]  =  memoryValuesB[MEMLEN_RW*8-1:0] ;
assign registerValuesC[MEMLEN_RW*8-1:0]  =  memoryValuesC[MEMLEN_RW*8-1:0] ;
assign registerValuesA[36*8+:(256-36)*8]  =  'b0;
assign registerValuesB[36*8+:(256-36)*8]  =  'b0;
assign registerValuesC[36*8+:(256-36)*8]  =  'b0;
assign registerValuesA[16'h100*8+:8]  =  regIn100A;
assign registerValuesB[16'h100*8+:8]  =  regIn100B;
assign registerValuesC[16'h100*8+:8]  =  regIn100C;
assign registerValuesA[16'h101*8+:8]  =  regIn101A;
assign registerValuesB[16'h101*8+:8]  =  regIn101B;
assign registerValuesC[16'h101*8+:8]  =  regIn101C;
assign registerValuesA[16'h102*8+:8]  =  regIn102A;
assign registerValuesB[16'h102*8+:8]  =  regIn102B;
assign registerValuesC[16'h102*8+:8]  =  regIn102C;
assign registerValuesA[16'h103*8+:8]  =  regIn103A;
assign registerValuesB[16'h103*8+:8]  =  regIn103B;
assign registerValuesC[16'h103*8+:8]  =  regIn103C;
assign registerValuesA[16'h104*8+:8]  =  regIn104A;
assign registerValuesB[16'h104*8+:8]  =  regIn104B;
assign registerValuesC[16'h104*8+:8]  =  regIn104C;
assign registerValuesA[16'h105*8+:8]  =  regIn105A;
assign registerValuesB[16'h105*8+:8]  =  regIn105B;
assign registerValuesC[16'h105*8+:8]  =  regIn105C;
assign registerValuesA[16'h106*8+:8]  =  regIn106A;
assign registerValuesB[16'h106*8+:8]  =  regIn106B;
assign registerValuesC[16'h106*8+:8]  =  regIn106C;
assign registerValuesA[16'h107*8+:8]  =  regIn107A;
assign registerValuesB[16'h107*8+:8]  =  regIn107B;
assign registerValuesC[16'h107*8+:8]  =  regIn107C;
assign registerValuesA[16'h108*8+:8]  =  regIn108A;
assign registerValuesB[16'h108*8+:8]  =  regIn108B;
assign registerValuesC[16'h108*8+:8]  =  regIn108C;
assign registerValuesA[16'h109*8+:8]  =  regIn109A;
assign registerValuesB[16'h109*8+:8]  =  regIn109B;
assign registerValuesC[16'h109*8+:8]  =  regIn109C;
assign registerValuesA[16'h10A*8+:8]  =  regIn10AA;
assign registerValuesB[16'h10A*8+:8]  =  regIn10AB;
assign registerValuesC[16'h10A*8+:8]  =  regIn10AC;
assign registerValuesA[16'h10B*8+:8]  =  regIn10BA;
assign registerValuesB[16'h10B*8+:8]  =  regIn10BB;
assign registerValuesC[16'h10B*8+:8]  =  regIn10BC;
assign registerValuesA[16'h10C*8+:8]  =  regIn10CA;
assign registerValuesB[16'h10C*8+:8]  =  regIn10CB;
assign registerValuesC[16'h10C*8+:8]  =  regIn10CC;
assign registerValuesA[16'h10D*8+:8]  =  regIn10DA;
assign registerValuesB[16'h10D*8+:8]  =  regIn10DB;
assign registerValuesC[16'h10D*8+:8]  =  regIn10DC;
assign registerValuesA[16'h10E*8+:8]  =  regIn10EA;
assign registerValuesB[16'h10E*8+:8]  =  regIn10EB;
assign registerValuesC[16'h10E*8+:8]  =  regIn10EC;
assign registerValuesA[16'h10F*8+:8]  =  regIn10FA;
assign registerValuesB[16'h10F*8+:8]  =  regIn10FB;
assign registerValuesC[16'h10F*8+:8]  =  regIn10FC;
assign registerValuesA[16'h120*8+:8]  =  seuCounterA[0+:8] ;
assign registerValuesB[16'h120*8+:8]  =  seuCounterB[0+:8] ;
assign registerValuesC[16'h120*8+:8]  =  seuCounterC[0+:8] ;
assign registerValuesA[16'h121*8+:8]  =  seuCounterA[8+:8] ;
assign registerValuesB[16'h121*8+:8]  =  seuCounterB[8+:8] ;
assign registerValuesC[16'h121*8+:8]  =  seuCounterC[8+:8] ;
assign registerValuesA[16'h122*8+:8]  =  seuCounterA[16+:8] ;
assign registerValuesB[16'h122*8+:8]  =  seuCounterB[16+:8] ;
assign registerValuesC[16'h122*8+:8]  =  seuCounterC[16+:8] ;
assign registerValuesA[16'h123*8+:8]  =  seuCounterA[24+:8] ;
assign registerValuesB[16'h123*8+:8]  =  seuCounterB[24+:8] ;
assign registerValuesC[16'h123*8+:8]  =  seuCounterC[24+:8] ;
assign registerValuesA[16'h124*8+:(512-16'h124)*8]  =  'b0;
assign registerValuesB[16'h124*8+:(512-16'h124)*8]  =  'b0;
assign registerValuesC[16'h124*8+:(512-16'h124)*8]  =  'b0;

memoryOutputMuxTMR #(.MEMLEN(MEMLEN_ALL)) MOM (
          .wbAdrA(wbAdrA),
          .wbAdrB(wbAdrB),
          .wbAdrC(wbAdrC),
          .wbDataOutA(wbDataS2MRegsA),
          .wbDataOutB(wbDataS2MRegsB),
          .wbDataOutC(wbDataS2MRegsC),
          .valuesA(registerValuesA),
          .valuesB(registerValuesB),
          .valuesC(registerValuesC)
          );
wire magicNumberOKA;
wire magicNumberOKB;
wire magicNumberOKC;
wire [7:0] reg20A =  memoryValuesA[8'h20*8+:8] ;
wire [7:0] reg20B =  memoryValuesB[8'h20*8+:8] ;
wire [7:0] reg20C =  memoryValuesC[8'h20*8+:8] ;
wire [7:0] reg21A =  memoryValuesA[8'h21*8+:8] ;
wire [7:0] reg21B =  memoryValuesB[8'h21*8+:8] ;
wire [7:0] reg21C =  memoryValuesC[8'h21*8+:8] ;
wire [7:0] reg22A =  memoryValuesA[8'h22*8+:8] ;
wire [7:0] reg22B =  memoryValuesB[8'h22*8+:8] ;
wire [7:0] reg22C =  memoryValuesC[8'h22*8+:8] ;
assign magicNumberOKA =  (reg20A[7:0] ==MAGIC_NUMBER);
assign magicNumberOKB =  (reg20B[7:0] ==MAGIC_NUMBER);
assign magicNumberOKC =  (reg20C[7:0] ==MAGIC_NUMBER);
assign clkEnableRegAA =  reg21A[0] |!magicNumberOKA;
assign clkEnableRegAB =  reg21B[0] |!magicNumberOKB;
assign clkEnableRegAC =  reg21C[0] |!magicNumberOKC;
assign clkEnableRegBA =  reg21A[1] |!magicNumberOKA;
assign clkEnableRegBB =  reg21B[1] |!magicNumberOKB;
assign clkEnableRegBC =  reg21C[1] |!magicNumberOKC;
assign clkEnableRegCA =  reg21A[2] |!magicNumberOKA;
assign clkEnableRegCB =  reg21B[2] |!magicNumberOKB;
assign clkEnableRegCC =  reg21C[2] |!magicNumberOKC;
assign clkForceEnableA =  reg21A[3] ;
assign clkForceEnableB =  reg21B[3] ;
assign clkForceEnableC =  reg21C[3] ;
assign SDAds =  reg21[4] ;
assign driveSDAA =  reg21A[5] ;
assign driveSDAB =  reg21B[5] ;
assign driveSDAC =  reg21C[5] ;
wire [4:0] testOutSelectA =  reg22A[4:0] ;
wire [4:0] testOutSelectB =  reg22B[4:0] ;
wire [4:0] testOutSelectC =  reg22C[4:0] ;
wire loadErrorCounterA =  (wbAdrA==REG_SEU0|wbAdrA==REG_SEU1|wbAdrA==REG_SEU2|wbAdrA==REG_SEU3)&wbWeA;
wire loadErrorCounterB =  (wbAdrB==REG_SEU0|wbAdrB==REG_SEU1|wbAdrB==REG_SEU2|wbAdrB==REG_SEU3)&wbWeB;
wire loadErrorCounterC =  (wbAdrC==REG_SEU0|wbAdrC==REG_SEU1|wbAdrC==REG_SEU2|wbAdrC==REG_SEU3)&wbWeC;

memoryErrorCounterTMR MEC (
          .rstA(rstA),
          .rstB(rstB),
          .rstC(rstC),
          .clkA(clkA),
          .clkB(clkB),
          .clkC(clkC),
          .errDetectedA(errDetectedA),
          .errDetectedB(errDetectedB),
          .errDetectedC(errDetectedC),
          .dataOutA(seuCounterA),
          .dataOutB(seuCounterB),
          .dataOutC(seuCounterC),
          .loadA(loadErrorCounterA),
          .loadB(loadErrorCounterB),
          .loadC(loadErrorCounterC),
          .tmrErrorA(MECtmrErrorA),
          .tmrErrorB(MECtmrErrorB),
          .tmrErrorC(MECtmrErrorC)
          );
genvar i;

generate
     for(i =  0;i<HIGH_LOW_OUTS;i =  i+1)
          begin : tie 

               TIEL TIELOW (
                         .ZN(LOW[i] )
                         );

               TIEH TIEHIGH (
                         .Z(HIGH[i]) 
                         );
          end

endgenerate
wire sysErrorA =  tmrErrorA;
wire sysErrorB =  tmrErrorB;
wire sysErrorC =  tmrErrorC;
wire i2cActiveV =  i2cActive;
wire i2cStartV =  i2cStart;
wire i2cStopV =  i2cStop;
wire busTmrErrorPresentV =  busTmrErrorPresent;
wire [31:0] testSignals =  {busTmrErrorPresentV,i2cActiveV,i2cStartV,i2cStopV,clkEnableC,clkEnableB,clkEnableA,clkEnableGlithesC,clkEnableGlithesB,clkEnableGlithesA,errDetectedC,errDetectedB,errDetectedA,sysErrorC,sysErrorB,sysErrorA,clkMaskedC,clkMaskedB,clkMaskedA,clkC,clkB,clkA,1'b1,1'b0,1'b0};

testOutMuxTMR TOM (
          .inputSignals(testSignals),
          .testOutSelect(testOutSelect),
          .magicNumberOKA(magicNumberOKA),
          .magicNumberOKB(magicNumberOKB),
          .magicNumberOKC(magicNumberOKC),
          .testOutput(TOout),
          .testOutputEnA(TOenA),
          .testOutputEnB(TOenB),
          .testOutputEnC(TOenC)
          );
assign TOds =  1'b1;
assign TOpe =  1'b0;
assign TOud =  1'b0;

busMatrixAdapterTMR BMA (
          .busAddrA(matrixBusAddrA),
          .busAddrB(matrixBusAddrB),
          .busAddrC(matrixBusAddrC),
          .busClkA(matrixBusClkA),
          .busClkB(matrixBusClkB),
          .busClkC(matrixBusClkC),
          .busDataMisoA(matrixBusDataMisoA),
          .busDataMisoB(matrixBusDataMisoB),
          .busDataMisoC(matrixBusDataMisoC),
          .busDataMosiA(matrixBusDataMosiA),
          .busDataMosiB(matrixBusDataMosiB),
          .busDataMosiC(matrixBusDataMosiC),
          .busReA(matrixBusReA),
          .busReB(matrixBusReB),
          .busReC(matrixBusReC),
          .busRstA(matrixBusRstA),
          .busRstB(matrixBusRstB),
          .busRstC(matrixBusRstC),
          .busTmrErrorA(matrixBusTmrErrorA),
          .busTmrErrorB(matrixBusTmrErrorB),
          .busTmrErrorC(matrixBusTmrErrorC),
          .busWeA(matrixBusWeA),
          .busWeB(matrixBusWeB),
          .busWeC(matrixBusWeC),
          .rstA(rstA),
          .rstB(rstB),
          .rstC(rstC),
          .wbAdrA(wbAdrA),
          .wbAdrB(wbAdrB),
          .wbAdrC(wbAdrC),
          .wbClkA(clkA),
          .wbClkB(clkB),
          .wbClkC(clkC),
          .wbDataM2SA(wbDataM2SA),
          .wbDataM2SB(wbDataM2SB),
          .wbDataM2SC(wbDataM2SC),
          .wbDataS2MA(wbDataS2MMatrixA),
          .wbDataS2MB(wbDataS2MMatrixB),
          .wbDataS2MC(wbDataS2MMatrixC),
          .wbWeA(wbWeA),
          .wbWeB(wbWeB),
          .wbWeC(wbWeC),
          .busTmrErrorPresentA(busTmrErrorPresentA),
          .busTmrErrorPresentB(busTmrErrorPresentB),
          .busTmrErrorPresentC(busTmrErrorPresentC)
          );

majorityVoter SDAoutVoter (
          .inA(SDAoutA),
          .inB(SDAoutB),
          .inC(SDAoutC),
          .out(SDAout),
          .tmrErr(SDAoutTmrError)
          );

majorityVoter clkEnableRegAVoter (
          .inA(clkEnableRegAA),
          .inB(clkEnableRegAB),
          .inC(clkEnableRegAC),
          .out(clkEnableRegA),
          .tmrErr(clkEnableRegATmrError)
          );

majorityVoter i2cStartVoter (
          .inA(i2cStartA),
          .inB(i2cStartB),
          .inC(i2cStartC),
          .out(i2cStart),
          .tmrErr(i2cStartTmrError)
          );

majorityVoter TOenVoter (
          .inA(TOenA),
          .inB(TOenB),
          .inC(TOenC),
          .out(TOen),
          .tmrErr(TOenTmrError)
          );

majorityVoter i2cActiveVoter (
          .inA(i2cActiveA),
          .inB(i2cActiveB),
          .inC(i2cActiveC),
          .out(i2cActive),
          .tmrErr(i2cActiveTmrError)
          );

majorityVoter clkEnableRegBVoter (
          .inA(clkEnableRegBA),
          .inB(clkEnableRegBB),
          .inC(clkEnableRegBC),
          .out(clkEnableRegB),
          .tmrErr(clkEnableRegBTmrError)
          );

majorityVoter clkEnableRegCVoter (
          .inA(clkEnableRegCA),
          .inB(clkEnableRegCB),
          .inC(clkEnableRegCC),
          .out(clkEnableRegC),
          .tmrErr(clkEnableRegCTmrError)
          );

majorityVoter #(.WIDTH(8)) reg21Voter (
          .inA(reg21A),
          .inB(reg21B),
          .inC(reg21C),
          .out(reg21),
          .tmrErr(reg21TmrError)
          );

majorityVoter #(.WIDTH(5)) testOutSelectVoter (
          .inA(testOutSelectA),
          .inB(testOutSelectB),
          .inC(testOutSelectC),
          .out(testOutSelect),
          .tmrErr(testOutSelectTmrError)
          );

majorityVoter busTmrErrorPresentVoter (
          .inA(busTmrErrorPresentA),
          .inB(busTmrErrorPresentB),
          .inC(busTmrErrorPresentC),
          .out(busTmrErrorPresent),
          .tmrErr(busTmrErrorPresentTmrError)
          );

majorityVoter SCLoutVoter (
          .inA(SCLoutA),
          .inB(SCLoutB),
          .inC(SCLoutC),
          .out(SCLout),
          .tmrErr(SCLoutTmrError)
          );

majorityVoter SDAenVoter (
          .inA(SDAenA),
          .inB(SDAenB),
          .inC(SDAenC),
          .out(SDAen),
          .tmrErr(SDAenTmrError)
          );

majorityVoter i2cStopVoter (
          .inA(i2cStopA),
          .inB(i2cStopB),
          .inC(i2cStopC),
          .out(i2cStop),
          .tmrErr(i2cStopTmrError)
          );

majorityVoter #(.WIDTH(((MEMLEN_RW*8-1)>(0)) ? ((MEMLEN_RW*8-1)-(0)+1) : ((0)-(MEMLEN_RW*8-1)+1))) defValVoter (
          .inA(defValA),
          .inB(defValB),
          .inC(defValC),
          .out(defVal),
          .tmrErr(defValTmrError)
          );

majorityVoter SCLenVoter (
          .inA(SCLenA),
          .inB(SCLenB),
          .inC(SCLenC),
          .out(SCLen),
          .tmrErr(SCLenTmrError)
          );
assign tmrError =  SCLenTmrError|SCLoutTmrError|SDAenTmrError|SDAoutTmrError|TOenTmrError|busTmrErrorPresentTmrError|clkEnableRegATmrError|clkEnableRegBTmrError|clkEnableRegCTmrError|defValTmrError|i2cActiveTmrError|i2cStartTmrError|i2cStopTmrError|reg21TmrError|testOutSelectTmrError;
assign tmrErrorA =  I2CtmrErrorA|MBtmrErrorA|MECtmrErrorA;
assign tmrErrorB =  I2CtmrErrorB|MBtmrErrorB|MECtmrErrorB;
assign tmrErrorC =  I2CtmrErrorC|MBtmrErrorC|MECtmrErrorC;

fanout #(.WIDTH(8)) defVal17Fanout (
          .in(defVal17),
          .outA(defVal17A),
          .outB(defVal17B),
          .outC(defVal17C)
          );

fanout #(.WIDTH(8)) defVal11Fanout (
          .in(defVal11),
          .outA(defVal11A),
          .outB(defVal11B),
          .outC(defVal11C)
          );

fanout #(.WIDTH(8)) defVal1CFanout (
          .in(defVal1C),
          .outA(defVal1CA),
          .outB(defVal1CB),
          .outC(defVal1CC)
          );

fanout #(.WIDTH(5)) AinFanout (
          .in(Ain),
          .outA(AinA),
          .outB(AinB),
          .outC(AinC)
          );

fanout SCLinFanout (
          .in(SCLin),
          .outA(SCLinA),
          .outB(SCLinB),
          .outC(SCLinC)
          );

fanout RSTNinFanout (
          .in(RSTNin),
          .outA(RSTNinA),
          .outB(RSTNinB),
          .outC(RSTNinC)
          );

fanout #(.WIDTH(8)) defVal16Fanout (
          .in(defVal16),
          .outA(defVal16A),
          .outB(defVal16B),
          .outC(defVal16C)
          );

fanout SDAinFanout (
          .in(SDAin),
          .outA(SDAinA),
          .outB(SDAinB),
          .outC(SDAinC)
          );

fanout #(.WIDTH(8)) defVal03Fanout (
          .in(defVal03),
          .outA(defVal03A),
          .outB(defVal03B),
          .outC(defVal03C)
          );

fanout #(.WIDTH(8)) defVal0FFanout (
          .in(defVal0F),
          .outA(defVal0FA),
          .outB(defVal0FB),
          .outC(defVal0FC)
          );

fanout #(.WIDTH(8)) defVal09Fanout (
          .in(defVal09),
          .outA(defVal09A),
          .outB(defVal09B),
          .outC(defVal09C)
          );

fanout A0inFanout (
          .in(A0in),
          .outA(A0inA),
          .outB(A0inB),
          .outC(A0inC)
          );

fanout #(.WIDTH(8)) defVal1FFanout (
          .in(defVal1F),
          .outA(defVal1FA),
          .outB(defVal1FB),
          .outC(defVal1FC)
          );

fanout #(.WIDTH(8)) defVal18Fanout (
          .in(defVal18),
          .outA(defVal18A),
          .outB(defVal18B),
          .outC(defVal18C)
          );

fanout #(.WIDTH(8)) defVal02Fanout (
          .in(defVal02),
          .outA(defVal02A),
          .outB(defVal02B),
          .outC(defVal02C)
          );

fanout #(.WIDTH(8)) defVal12Fanout (
          .in(defVal12),
          .outA(defVal12A),
          .outB(defVal12B),
          .outC(defVal12C)
          );

fanout #(.WIDTH(8)) defVal0CFanout (
          .in(defVal0C),
          .outA(defVal0CA),
          .outB(defVal0CB),
          .outC(defVal0CC)
          );

fanout #(.WIDTH(8)) defVal0BFanout (
          .in(defVal0B),
          .outA(defVal0BA),
          .outB(defVal0BB),
          .outC(defVal0BC)
          );

fanout #(.WIDTH(8)) defVal0EFanout (
          .in(defVal0E),
          .outA(defVal0EA),
          .outB(defVal0EB),
          .outC(defVal0EC)
          );

fanout #(.WIDTH(8)) defVal13Fanout (
          .in(defVal13),
          .outA(defVal13A),
          .outB(defVal13B),
          .outC(defVal13C)
          );

fanout #(.WIDTH(8)) defVal07Fanout (
          .in(defVal07),
          .outA(defVal07A),
          .outB(defVal07B),
          .outC(defVal07C)
          );

fanout #(.WIDTH(8)) defVal00Fanout (
          .in(defVal00),
          .outA(defVal00A),
          .outB(defVal00B),
          .outC(defVal00C)
          );

fanout #(.WIDTH(8)) defVal06Fanout (
          .in(defVal06),
          .outA(defVal06A),
          .outB(defVal06B),
          .outC(defVal06C)
          );

fanout #(.WIDTH(8)) defVal0DFanout (
          .in(defVal0D),
          .outA(defVal0DA),
          .outB(defVal0DB),
          .outC(defVal0DC)
          );

fanout #(.WIDTH(8)) defVal08Fanout (
          .in(defVal08),
          .outA(defVal08A),
          .outB(defVal08B),
          .outC(defVal08C)
          );

fanout #(.WIDTH(8)) defVal01Fanout (
          .in(defVal01),
          .outA(defVal01A),
          .outB(defVal01B),
          .outC(defVal01C)
          );

fanout #(.WIDTH(8)) defVal14Fanout (
          .in(defVal14),
          .outA(defVal14A),
          .outB(defVal14B),
          .outC(defVal14C)
          );

fanout #(.WIDTH(8)) defVal1AFanout (
          .in(defVal1A),
          .outA(defVal1AA),
          .outB(defVal1AB),
          .outC(defVal1AC)
          );

fanout A1inFanout (
          .in(A1in),
          .outA(A1inA),
          .outB(A1inB),
          .outC(A1inC)
          );

fanout #(.WIDTH(8)) defVal0AFanout (
          .in(defVal0A),
          .outA(defVal0AA),
          .outB(defVal0AB),
          .outC(defVal0AC)
          );

fanout #(.WIDTH(8)) defVal15Fanout (
          .in(defVal15),
          .outA(defVal15A),
          .outB(defVal15B),
          .outC(defVal15C)
          );

fanout #(.WIDTH(8)) defVal05Fanout (
          .in(defVal05),
          .outA(defVal05A),
          .outB(defVal05B),
          .outC(defVal05C)
          );

fanout #(.WIDTH(8)) defVal1DFanout (
          .in(defVal1D),
          .outA(defVal1DA),
          .outB(defVal1DB),
          .outC(defVal1DC)
          );

fanout #(.WIDTH(8)) defVal19Fanout (
          .in(defVal19),
          .outA(defVal19A),
          .outB(defVal19B),
          .outC(defVal19C)
          );

fanout #(.WIDTH(8)) defVal1EFanout (
          .in(defVal1E),
          .outA(defVal1EA),
          .outB(defVal1EB),
          .outC(defVal1EC)
          );

fanout #(.WIDTH(8)) defVal1BFanout (
          .in(defVal1B),
          .outA(defVal1BA),
          .outB(defVal1BB),
          .outC(defVal1BC)
          );

fanout #(.WIDTH(8)) defVal04Fanout (
          .in(defVal04),
          .outA(defVal04A),
          .outB(defVal04B),
          .outC(defVal04C)
          );

fanout #(.WIDTH(8)) defVal10Fanout (
          .in(defVal10),
          .outA(defVal10A),
          .outB(defVal10B),
          .outC(defVal10C)
          );
endmodule

