/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/pixelColumnTMR.v                                                             *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:54                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/pixelColumn.v     *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 11:50:53.560724                                         *
 *           File Size         : 2835                                                               *
 *           MD5 hash          : 7b0de7e4a176053d60138668349534bb                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module pixelColumnTMR #(
  parameter ROWS=16
)(
     input [3:0] columnAddrInA,
     input [3:0] columnAddrInB,
     input [3:0] columnAddrInC,
     input  busRstInA,
     input  busRstInB,
     input  busRstInC,
     input  busWeInA,
     input  busWeInB,
     input  busWeInC,
     input  busClkInA,
     input  busClkInB,
     input  busClkInC,
     input  busReInA,
     input  busReInB,
     input  busReInC,
     input [15:0] busAddrInA,
     input [15:0] busAddrInB,
     input [15:0] busAddrInC,
     input [7:0] busDataMosiInA,
     input [7:0] busDataMosiInB,
     input [7:0] busDataMosiInC,
     output [7:0] busDataMisoOutA,
     output [7:0] busDataMisoOutB,
     output [7:0] busDataMisoOutC,
     output  busTmrErrorOutA,
     output  busTmrErrorOutB,
     output  busTmrErrorOutC,
     output [3:0] columnAddrNextOutA,
     output [3:0] columnAddrNextOutB,
     output [3:0] columnAddrNextOutC,
     output  busRstOutA,
     output  busRstOutB,
     output  busRstOutC,
     output  busWeOutA,
     output  busWeOutB,
     output  busWeOutC,
     output  busClkOutA,
     output  busClkOutB,
     output  busClkOutC,
     output  busReOutA,
     output  busReOutB,
     output  busReOutC,
     output [15:0] busAddrOutA,
     output [15:0] busAddrOutB,
     output [15:0] busAddrOutC,
     output [7:0] busDataMosiOutA,
     output [7:0] busDataMosiOutB,
     output [7:0] busDataMosiOutC,
     input [7:0] busDataMisoInA,
     input [7:0] busDataMisoInB,
     input [7:0] busDataMisoInC,
     input  busTmrErrorInA,
     input  busTmrErrorInB,
     input  busTmrErrorInC
);
genvar r;
wire [ROWS:0] busRstA;
wire [ROWS:0] busRstB;
wire [ROWS:0] busRstC;
wire [ROWS:0] busWeA;
wire [ROWS:0] busWeB;
wire [ROWS:0] busWeC;
wire [ROWS:0] busReA;
wire [ROWS:0] busReB;
wire [ROWS:0] busReC;
wire [ROWS:0] busClkA;
wire [ROWS:0] busClkB;
wire [ROWS:0] busClkC;
wire [15:0] busAddrA [ ROWS : 0 ] ;
wire [15:0] busAddrB [ ROWS : 0 ] ;
wire [15:0] busAddrC [ ROWS : 0 ] ;
wire [7:0] busDataMosiA [ ROWS : 0 ] ;
wire [7:0] busDataMosiB [ ROWS : 0 ] ;
wire [7:0] busDataMosiC [ ROWS : 0 ] ;
wire [7:0] busDataMisoA [ ROWS : 0 ] ;
wire [7:0] busDataMisoB [ ROWS : 0 ] ;
wire [7:0] busDataMisoC [ ROWS : 0 ] ;
wire [3:0] colAddrA [ ROWS : 0 ] ;
wire [3:0] colAddrB [ ROWS : 0 ] ;
wire [3:0] colAddrC [ ROWS : 0 ] ;
wire [ROWS:0] busTmrErrorA;
wire [ROWS:0] busTmrErrorB;
wire [ROWS:0] busTmrErrorC;
wire [3:0] pixelAddrA [ ROWS : 0 ] ;
wire [3:0] pixelAddrB [ ROWS : 0 ] ;
wire [3:0] pixelAddrC [ ROWS : 0 ] ;

busColumnAdapterTMR BCA (
          .busAddrInA(busAddrInA),
          .busAddrInB(busAddrInB),
          .busAddrInC(busAddrInC),
          .busAddrOutA(busAddrOutA),
          .busAddrOutB(busAddrOutB),
          .busAddrOutC(busAddrOutC),
          .busClkInA(busClkInA),
          .busClkInB(busClkInB),
          .busClkInC(busClkInC),
          .busClkOutA(busClkOutA),
          .busClkOutB(busClkOutB),
          .busClkOutC(busClkOutC),
          .busDataMisoInA(busDataMisoInA),
          .busDataMisoInB(busDataMisoInB),
          .busDataMisoInC(busDataMisoInC),
          .busDataMisoOutA(busDataMisoOutA),
          .busDataMisoOutB(busDataMisoOutB),
          .busDataMisoOutC(busDataMisoOutC),
          .busDataMosiInA(busDataMosiInA),
          .busDataMosiInB(busDataMosiInB),
          .busDataMosiInC(busDataMosiInC),
          .busDataMosiOutA(busDataMosiOutA),
          .busDataMosiOutB(busDataMosiOutB),
          .busDataMosiOutC(busDataMosiOutC),
          .busReInA(busReInA),
          .busReInB(busReInB),
          .busReInC(busReInC),
          .busReOutA(busReOutA),
          .busReOutB(busReOutB),
          .busReOutC(busReOutC),
          .busRstInA(busRstInA),
          .busRstInB(busRstInB),
          .busRstInC(busRstInC),
          .busRstOutA(busRstOutA),
          .busRstOutB(busRstOutB),
          .busRstOutC(busRstOutC),
          .busTmrErrorInA(busTmrErrorInA),
          .busTmrErrorInB(busTmrErrorInB),
          .busTmrErrorInC(busTmrErrorInC),
          .busTmrErrorOutA(busTmrErrorOutA),
          .busTmrErrorOutB(busTmrErrorOutB),
          .busTmrErrorOutC(busTmrErrorOutC),
          .busWeInA(busWeInA),
          .busWeInB(busWeInB),
          .busWeInC(busWeInC),
          .busWeOutA(busWeOutA),
          .busWeOutB(busWeOutB),
          .busWeOutC(busWeOutC),
          .colAddrOutA(busAddrA[0] ),
          .colAddrOutB(busAddrB[0] ),
          .colAddrOutC(busAddrC[0] ),
          .colClkOutA(busClkA[0] ),
          .colClkOutB(busClkB[0] ),
          .colClkOutC(busClkC[0] ),
          .colDataMisoInA(busDataMisoA[0] ),
          .colDataMisoInB(busDataMisoB[0] ),
          .colDataMisoInC(busDataMisoC[0] ),
          .colDataMosiOutA(busDataMosiA[0] ),
          .colDataMosiOutB(busDataMosiB[0] ),
          .colDataMosiOutC(busDataMosiC[0] ),
          .colReOutA(busReA[0] ),
          .colReOutB(busReB[0] ),
          .colReOutC(busReC[0] ),
          .colRstOutA(busRstA[0] ),
          .colRstOutB(busRstB[0] ),
          .colRstOutC(busRstC[0] ),
          .colTmrErrorInA(busTmrErrorA[0] ),
          .colTmrErrorInB(busTmrErrorB[0] ),
          .colTmrErrorInC(busTmrErrorC[0] ),
          .colWeOutA(busWeA[0] ),
          .colWeOutB(busWeB[0] ),
          .colWeOutC(busWeC[0] ),
          .columnAddrInA(columnAddrInA),
          .columnAddrInB(columnAddrInB),
          .columnAddrInC(columnAddrInC),
          .columnAddrNextOutA(columnAddrNextOutA),
          .columnAddrNextOutB(columnAddrNextOutB),
          .columnAddrNextOutC(columnAddrNextOutC),
          .colIDA(colAddrA[0] ),
          .colIDB(colAddrB[0] ),
          .colIDC(colAddrC[0] )
          );

generate
     for(r =  0;r<ROWS;r =  r+1)
          begin : row 

               pixelTMR PIX (
                         .busAddrInA(busAddrA[r] ),
                         .busAddrInB(busAddrB[r] ),
                         .busAddrInC(busAddrC[r] ),
                         .busAddrOutA(busAddrA[r+1] ),
                         .busAddrOutB(busAddrB[r+1] ),
                         .busAddrOutC(busAddrC[r+1] ),
                         .busDataMisoInA(busDataMisoA[r+1] ),
                         .busDataMisoInB(busDataMisoB[r+1] ),
                         .busDataMisoInC(busDataMisoC[r+1] ),
                         .busDataMisoOutA(busDataMisoA[r] ),
                         .busDataMisoOutB(busDataMisoB[r] ),
                         .busDataMisoOutC(busDataMisoC[r] ),
                         .busDataMosiInA(busDataMosiA[r] ),
                         .busDataMosiInB(busDataMosiB[r] ),
                         .busDataMosiInC(busDataMosiC[r] ),
                         .busDataMosiOutA(busDataMosiA[r+1] ),
                         .busDataMosiOutB(busDataMosiB[r+1] ),
                         .busDataMosiOutC(busDataMosiC[r+1] ),
                         .busReInA(busReA[r] ),
                         .busReInB(busReB[r] ),
                         .busReInC(busReC[r] ),
                         .busReOutA(busReA[r+1] ),
                         .busReOutB(busReB[r+1] ),
                         .busReOutC(busReC[r+1] ),
                         .busRstInA(busRstA[r] ),
                         .busRstInB(busRstB[r] ),
                         .busRstInC(busRstC[r] ),
                         .busRstOutA(busRstA[r+1] ),
                         .busRstOutB(busRstB[r+1] ),
                         .busRstOutC(busRstC[r+1] ),
                         .busTmrErrorInA(busTmrErrorA[r+1] ),
                         .busTmrErrorInB(busTmrErrorB[r+1] ),
                         .busTmrErrorInC(busTmrErrorC[r+1] ),
                         .busTmrErrorOutA(busTmrErrorA[r] ),
                         .busTmrErrorOutB(busTmrErrorB[r] ),
                         .busTmrErrorOutC(busTmrErrorC[r] ),
                         .busWeInA(busWeA[r] ),
                         .busWeInB(busWeB[r] ),
                         .busWeInC(busWeC[r] ),
                         .busWeOutA(busWeA[r+1] ),
                         .busWeOutB(busWeB[r+1] ),
                         .busWeOutC(busWeC[r+1] ),
                         .busClkInA(busClkA[r] ),
                         .busClkInB(busClkB[r] ),
                         .busClkInC(busClkC[r] ),
                         .busClkOutA(busClkA[r+1] ),
                         .busClkOutB(busClkB[r+1] ),
                         .busClkOutC(busClkC[r+1] ),
                         .colAddrInA(colAddrA[r] ),
                         .colAddrInB(colAddrB[r] ),
                         .colAddrInC(colAddrC[r] ),
                         .colAddrOutA(colAddrA[r+1] ),
                         .colAddrOutB(colAddrB[r+1] ),
                         .colAddrOutC(colAddrC[r+1] ),
                         .pixelAddrInA(pixelAddrA[r] ),
                         .pixelAddrInB(pixelAddrB[r] ),
                         .pixelAddrInC(pixelAddrC[r] ),
                         .pixelAddrNextOutA(pixelAddrA[r+1] ),
                         .pixelAddrNextOutB(pixelAddrB[r+1] ),
                         .pixelAddrNextOutC(pixelAddrC[r+1] )
                         );
          end

endgenerate
assign pixelAddrA[0]  =  4'b0;
assign pixelAddrB[0]  =  4'b0;
assign pixelAddrC[0]  =  4'b0;
assign busTmrErrorA[ROWS]  =  1'b0;
assign busTmrErrorB[ROWS]  =  1'b0;
assign busTmrErrorC[ROWS]  =  1'b0;
assign busDataMisoA[ROWS]  =  8'b0;
assign busDataMisoB[ROWS]  =  8'b0;
assign busDataMisoC[ROWS]  =  8'b0;
endmodule

