/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/pixelMatrixTMR.v                                                             *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:54                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/pixelMatrix.v     *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 11:51:38.816692                                         *
 *           File Size         : 1846                                                               *
 *           MD5 hash          : cf3a356de4868555bfcbeca9dee7bdad                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module pixelMatrixTMR #(
  parameter COLS=16
)(
     input  busRstInA,
     input  busRstInB,
     input  busRstInC,
     input  busWeInA,
     input  busWeInB,
     input  busWeInC,
     input  busReInA,
     input  busReInB,
     input  busReInC,
     input  busClkInA,
     input  busClkInB,
     input  busClkInC,
     input [15:0] busAddrInA,
     input [15:0] busAddrInB,
     input [15:0] busAddrInC,
     input [7:0] busDataMosiInA,
     input [7:0] busDataMosiInB,
     input [7:0] busDataMosiInC,
     output [7:0] busDataMisoOutA,
     output [7:0] busDataMisoOutB,
     output [7:0] busDataMisoOutC,
     output  busTmrErrorOutA,
     output  busTmrErrorOutB,
     output  busTmrErrorOutC
);
genvar r;
wire [COLS:0] busRstA;
wire [COLS:0] busRstB;
wire [COLS:0] busRstC;
wire [COLS:0] busWeA;
wire [COLS:0] busWeB;
wire [COLS:0] busWeC;
wire [COLS:0] busClkA;
wire [COLS:0] busClkB;
wire [COLS:0] busClkC;
wire [COLS:0] busReA;
wire [COLS:0] busReB;
wire [COLS:0] busReC;
wire [COLS:0] busTmrErrorA;
wire [COLS:0] busTmrErrorB;
wire [COLS:0] busTmrErrorC;
wire [8*(COLS+1)-1:0] busDataMosiA;
wire [8*(COLS+1)-1:0] busDataMosiB;
wire [8*(COLS+1)-1:0] busDataMosiC;
wire [16*(COLS+1)-1:0] busAddrA;
wire [16*(COLS+1)-1:0] busAddrB;
wire [16*(COLS+1)-1:0] busAddrC;
wire [8*(COLS+1)-1:0] busDataMisoA;
wire [8*(COLS+1)-1:0] busDataMisoB;
wire [8*(COLS+1)-1:0] busDataMisoC;
wire [4*(COLS+1)-1:0] columnAddrA;
wire [4*(COLS+1)-1:0] columnAddrB;
wire [4*(COLS+1)-1:0] columnAddrC;
assign busRstA[0]  =  busRstInA;
assign busRstB[0]  =  busRstInB;
assign busRstC[0]  =  busRstInC;
assign busWeA[0]  =  busWeInA;
assign busWeB[0]  =  busWeInB;
assign busWeC[0]  =  busWeInC;
assign busClkA[0]  =  busClkInA;
assign busClkB[0]  =  busClkInB;
assign busClkC[0]  =  busClkInC;
assign busReA[0]  =  busReInA;
assign busReB[0]  =  busReInB;
assign busReC[0]  =  busReInC;
assign busTmrErrorOutA =  busTmrErrorA[0] ;
assign busTmrErrorOutB =  busTmrErrorB[0] ;
assign busTmrErrorOutC =  busTmrErrorC[0] ;
assign busDataMosiA[7:0]  =  busDataMosiInA;
assign busDataMosiB[7:0]  =  busDataMosiInB;
assign busDataMosiC[7:0]  =  busDataMosiInC;
assign busAddrA[15:0]  =  busAddrInA;
assign busAddrB[15:0]  =  busAddrInB;
assign busAddrC[15:0]  =  busAddrInC;
assign busDataMisoOutA =  busDataMisoA[7:0] ;
assign busDataMisoOutB =  busDataMisoB[7:0] ;
assign busDataMisoOutC =  busDataMisoC[7:0] ;
assign busDataMisoA[8*COLS+:8]  =  8'b0;
assign busDataMisoB[8*COLS+:8]  =  8'b0;
assign busDataMisoC[8*COLS+:8]  =  8'b0;
assign busTmrErrorA[COLS]  =  1'b0;
assign busTmrErrorB[COLS]  =  1'b0;
assign busTmrErrorC[COLS]  =  1'b0;
assign columnAddrA[3:0]  =  4'b0;
assign columnAddrB[3:0]  =  4'b0;
assign columnAddrC[3:0]  =  4'b0;
genvar c;

generate
     for(c =  0;c<COLS;c =  c+1)
          begin : column 

               pixelColumnTMR PC (
                         .columnAddrInA(columnAddrA[c*4+:4] ),
                         .columnAddrInB(columnAddrB[c*4+:4] ),
                         .columnAddrInC(columnAddrC[c*4+:4] ),
                         .busAddrInA(busAddrA[c*16+:16] ),
                         .busAddrInB(busAddrB[c*16+:16] ),
                         .busAddrInC(busAddrC[c*16+:16] ),
                         .busClkInA(busClkA[c] ),
                         .busClkInB(busClkB[c] ),
                         .busClkInC(busClkC[c] ),
                         .busDataMisoOutA(busDataMisoA[c*8+:8] ),
                         .busDataMisoOutB(busDataMisoB[c*8+:8] ),
                         .busDataMisoOutC(busDataMisoC[c*8+:8] ),
                         .busDataMosiInA(busDataMosiA[c*8+:8] ),
                         .busDataMosiInB(busDataMosiB[c*8+:8] ),
                         .busDataMosiInC(busDataMosiC[c*8+:8] ),
                         .busReInA(busReA[c] ),
                         .busReInB(busReB[c] ),
                         .busReInC(busReC[c] ),
                         .busRstInA(busRstA[c] ),
                         .busRstInB(busRstB[c] ),
                         .busRstInC(busRstC[c] ),
                         .busTmrErrorOutA(busTmrErrorA[c] ),
                         .busTmrErrorOutB(busTmrErrorB[c] ),
                         .busTmrErrorOutC(busTmrErrorC[c] ),
                         .busWeInA(busWeA[c] ),
                         .busWeInB(busWeB[c] ),
                         .busWeInC(busWeC[c] ),
                         .columnAddrNextOutA(columnAddrA[(c+1)*4+:4] ),
                         .columnAddrNextOutB(columnAddrB[(c+1)*4+:4] ),
                         .columnAddrNextOutC(columnAddrC[(c+1)*4+:4] ),
                         .busAddrOutA(busAddrA[(c+1)*16+:16] ),
                         .busAddrOutB(busAddrB[(c+1)*16+:16] ),
                         .busAddrOutC(busAddrC[(c+1)*16+:16] ),
                         .busClkOutA(busClkA[c+1] ),
                         .busClkOutB(busClkB[c+1] ),
                         .busClkOutC(busClkC[c+1] ),
                         .busDataMisoInA(busDataMisoA[(c+1)*8+:8] ),
                         .busDataMisoInB(busDataMisoB[(c+1)*8+:8] ),
                         .busDataMisoInC(busDataMisoC[(c+1)*8+:8] ),
                         .busDataMosiOutA(busDataMosiA[(c+1)*8+:8] ),
                         .busDataMosiOutB(busDataMosiB[(c+1)*8+:8] ),
                         .busDataMosiOutC(busDataMosiC[(c+1)*8+:8] ),
                         .busReOutA(busReA[c+1] ),
                         .busReOutB(busReB[c+1] ),
                         .busReOutC(busReC[c+1] ),
                         .busRstOutA(busRstA[c+1] ),
                         .busRstOutB(busRstB[c+1] ),
                         .busRstOutC(busRstC[c+1] ),
                         .busTmrErrorInA(busTmrErrorA[c+1] ),
                         .busTmrErrorInB(busTmrErrorB[c+1] ),
                         .busTmrErrorInC(busTmrErrorC[c+1] ),
                         .busWeOutA(busWeA[c+1] ),
                         .busWeOutB(busWeB[c+1] ),
                         .busWeOutC(busWeC[c+1] )
                         );
          end

endgenerate
endmodule

