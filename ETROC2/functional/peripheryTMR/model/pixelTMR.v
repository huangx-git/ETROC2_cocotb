/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/pixelTMR.v                                                                   *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:54                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/pixel.v           *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-24 11:46:01.002940                                         *
 *           File Size         : 1960                                                               *
 *           MD5 hash          : 5f0326c6e8bb9017b596c863b9274c04                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module pixelTMR #(
  parameter REGS=32
)(
     input [3:0] pixelAddrInA,
     input [3:0] pixelAddrInB,
     input [3:0] pixelAddrInC,
     input  busRstInA,
     input  busRstInB,
     input  busRstInC,
     input  busWeInA,
     input  busWeInB,
     input  busWeInC,
     input  busClkInA,
     input  busClkInB,
     input  busClkInC,
     input  busReInA,
     input  busReInB,
     input  busReInC,
     input [15:0] busAddrInA,
     input [15:0] busAddrInB,
     input [15:0] busAddrInC,
     input [7:0] busDataMosiInA,
     input [7:0] busDataMosiInB,
     input [7:0] busDataMosiInC,
     input [3:0] colAddrInA,
     input [3:0] colAddrInB,
     input [3:0] colAddrInC,
     output [7:0] busDataMisoOutA,
     output [7:0] busDataMisoOutB,
     output [7:0] busDataMisoOutC,
     output  busTmrErrorOutA,
     output  busTmrErrorOutB,
     output  busTmrErrorOutC,
     output [3:0] pixelAddrNextOutA,
     output [3:0] pixelAddrNextOutB,
     output [3:0] pixelAddrNextOutC,
     output  busRstOutA,
     output  busRstOutB,
     output  busRstOutC,
     output  busWeOutA,
     output  busWeOutB,
     output  busWeOutC,
     output  busClkOutA,
     output  busClkOutB,
     output  busClkOutC,
     output  busReOutA,
     output  busReOutB,
     output  busReOutC,
     output [15:0] busAddrOutA,
     output [15:0] busAddrOutB,
     output [15:0] busAddrOutC,
     output [7:0] busDataMosiOutA,
     output [7:0] busDataMosiOutB,
     output [7:0] busDataMosiOutC,
     output [3:0] colAddrOutA,
     output [3:0] colAddrOutB,
     output [3:0] colAddrOutC,
     input [7:0] busDataMisoInA,
     input [7:0] busDataMisoInB,
     input [7:0] busDataMisoInC,
     input  busTmrErrorInA,
     input  busTmrErrorInB,
     input  busTmrErrorInC
);
wire [7:0] pixelID;
wire LOW;
wire HIGH;
wire [REGS*8-1:0] pixelConfig;
wor pixelStatusTmrError;
wire [8*8-1:0] pixelStatus;
wor defaultPixelConfigTmrError;
wire [REGS*8-1:0] defaultPixelConfig;
wire [REGS*8-1:0] pixelConfigA;
wire [REGS*8-1:0] pixelConfigB;
wire [REGS*8-1:0] pixelConfigC;
wire [8*8-1:0] pixelStatusA;
wire [8*8-1:0] pixelStatusB;
wire [8*8-1:0] pixelStatusC;
wire [REGS*8-1:0] defaultPixelConfigA;
wire [REGS*8-1:0] defaultPixelConfigB;
wire [REGS*8-1:0] defaultPixelConfigC;
wire [7:0] pixelIDA;
wire [7:0] pixelIDB;
wire [7:0] pixelIDC;
wire HIGHA;
wire HIGHB;
wire HIGHC;
wire LOWA;
wire LOWB;
wire LOWC;

pixelDigitalTMR #(.REGS(REGS)) PD (
          .busAddrInA(busAddrInA),
          .busAddrInB(busAddrInB),
          .busAddrInC(busAddrInC),
          .busAddrOutA(busAddrOutA),
          .busAddrOutB(busAddrOutB),
          .busAddrOutC(busAddrOutC),
          .busDataMisoInA(busDataMisoInA),
          .busDataMisoInB(busDataMisoInB),
          .busDataMisoInC(busDataMisoInC),
          .busDataMisoOutA(busDataMisoOutA),
          .busDataMisoOutB(busDataMisoOutB),
          .busDataMisoOutC(busDataMisoOutC),
          .busDataMosiInA(busDataMosiInA),
          .busDataMosiInB(busDataMosiInB),
          .busDataMosiInC(busDataMosiInC),
          .busDataMosiOutA(busDataMosiOutA),
          .busDataMosiOutB(busDataMosiOutB),
          .busDataMosiOutC(busDataMosiOutC),
          .busReInA(busReInA),
          .busReInB(busReInB),
          .busReInC(busReInC),
          .colAddrInA(colAddrInA),
          .colAddrInB(colAddrInB),
          .colAddrInC(colAddrInC),
          .busReOutA(busReOutA),
          .busReOutB(busReOutB),
          .busReOutC(busReOutC),
          .busRstInA(busRstInA),
          .busRstInB(busRstInB),
          .busRstInC(busRstInC),
          .busRstOutA(busRstOutA),
          .busRstOutB(busRstOutB),
          .busRstOutC(busRstOutC),
          .busTmrErrorInA(busTmrErrorInA),
          .busTmrErrorInB(busTmrErrorInB),
          .busTmrErrorInC(busTmrErrorInC),
          .busTmrErrorOutA(busTmrErrorOutA),
          .busTmrErrorOutB(busTmrErrorOutB),
          .busTmrErrorOutC(busTmrErrorOutC),
          .busWeInA(busWeInA),
          .busWeInB(busWeInB),
          .busWeInC(busWeInC),
          .busWeOutA(busWeOutA),
          .busWeOutB(busWeOutB),
          .busWeOutC(busWeOutC),
          .busClkInA(busClkInA),
          .busClkInB(busClkInB),
          .busClkInC(busClkInC),
          .busClkOutA(busClkOutA),
          .busClkOutB(busClkOutB),
          .busClkOutC(busClkOutC),
          .colAddrOutA(colAddrOutA),
          .colAddrOutB(colAddrOutB),
          .colAddrOutC(colAddrOutC),
          .pixelAddrInA(pixelAddrInA),
          .pixelAddrInB(pixelAddrInB),
          .pixelAddrInC(pixelAddrInC),
          .pixelAddrNextOutA(pixelAddrNextOutA),
          .pixelAddrNextOutB(pixelAddrNextOutB),
          .pixelAddrNextOutC(pixelAddrNextOutC),
          .defaultPixelConfig(defaultPixelConfig),
          .pixelConfig(pixelConfig),
          .pixelStatus(pixelStatus),
          .pixelID(pixelID),
          .HIGH(HIGH),
          .LOW(LOW)
          );

pixelAnalogTMR #(.REGS(REGS)) PA (
          .defaultPixelConfigA(defaultPixelConfigA),
          .defaultPixelConfigB(defaultPixelConfigB),
          .defaultPixelConfigC(defaultPixelConfigC),
          .pixelConfigA(pixelConfigA),
          .pixelConfigB(pixelConfigB),
          .pixelConfigC(pixelConfigC),
          .pixelStatusA(pixelStatusA),
          .pixelStatusB(pixelStatusB),
          .pixelStatusC(pixelStatusC),
          .pixelIDA(pixelIDA),
          .pixelIDB(pixelIDB),
          .pixelIDC(pixelIDC),
          .HIGHA(HIGHA),
          .HIGHB(HIGHB),
          .HIGHC(HIGHC),
          .LOWA(LOWA),
          .LOWB(LOWB),
          .LOWC(LOWC)
          );

majorityVoter #(.WIDTH(((REGS*8-1)>(0)) ? ((REGS*8-1)-(0)+1) : ((0)-(REGS*8-1)+1))) defaultPixelConfigVoter (
          .inA(defaultPixelConfigA),
          .inB(defaultPixelConfigB),
          .inC(defaultPixelConfigC),
          .out(defaultPixelConfig),
          .tmrErr(defaultPixelConfigTmrError)
          );

majorityVoter #(.WIDTH(64)) pixelStatusVoter (
          .inA(pixelStatusA),
          .inB(pixelStatusB),
          .inC(pixelStatusC),
          .out(pixelStatus),
          .tmrErr(pixelStatusTmrError)
          );

fanout #(.WIDTH(((REGS*8-1)>(0)) ? ((REGS*8-1)-(0)+1) : ((0)-(REGS*8-1)+1))) pixelConfigFanout (
          .in(pixelConfig),
          .outA(pixelConfigA),
          .outB(pixelConfigB),
          .outC(pixelConfigC)
          );

fanout HIGHFanout (
          .in(HIGH),
          .outA(HIGHA),
          .outB(HIGHB),
          .outC(HIGHC)
          );

fanout LOWFanout (
          .in(LOW),
          .outA(LOWA),
          .outB(LOWB),
          .outC(LOWC)
          );

fanout #(.WIDTH(8)) pixelIDFanout (
          .in(pixelID),
          .outA(pixelIDA),
          .outB(pixelIDB),
          .outC(pixelIDC)
          );
endmodule

