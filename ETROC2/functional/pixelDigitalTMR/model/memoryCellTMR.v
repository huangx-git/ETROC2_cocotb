/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/memoryCellTMR.v                                                              *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:52                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/memoryCell.v      *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-20 11:50:53.522747                                         *
 *           File Size         : 534                                                                *
 *           MD5 hash          : 7e03ee22ba2ce8aad22a0f0865c497ad                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps / 1ps
module memoryCellTMR(
     input  rstA,
     input  rstB,
     input  rstC,
     input  clkA,
     input  clkB,
     input  clkC,
     input [7:0] dataInA,
     input [7:0] dataInB,
     input [7:0] dataInC,
     input  loadA,
     input  loadB,
     input  loadC,
     output [7:0] dataOutA,
     output [7:0] dataOutB,
     output [7:0] dataOutC,
     input [7:0] defaultValueA,
     input [7:0] defaultValueB,
     input [7:0] defaultValueC,
     output  tmrErrorA,
     output  tmrErrorB,
     output  tmrErrorC
);
wor memTmrErrorC;
wire [7:0] memVotedC;
wor memTmrErrorB;
wire [7:0] memVotedB;
wor memTmrErrorA;
wire [7:0] memVotedA;
reg  [7:0] memA;
reg  [7:0] memB;
reg  [7:0] memC;
reg  [7:0] memNextA;
reg  [7:0] memNextB;
reg  [7:0] memNextC;
assign #10 dataOutA =  memVotedA;
assign #10 dataOutB =  memVotedB;
assign #10 dataOutC =  memVotedC;

always @*
     if (loadA)
          memNextA =  dataInA;
     else
          memNextA =  memVotedA;

always @*
     if (loadB)
          memNextB =  dataInB;
     else
          memNextB =  memVotedB;

always @*
     if (loadC)
          memNextC =  dataInC;
     else
          memNextC =  memVotedC;

always @( posedge clkA or posedge rstA )
     if (rstA)
          memA <= #1 defaultValueA;
     else
          memA <= #1 memNextA;

always @( posedge clkB or posedge rstB )
     if (rstB)
          memB <= #1 defaultValueB;
     else
          memB <= #1 memNextB;

always @( posedge clkC or posedge rstC )
     if (rstC)
          memC <= #1 defaultValueC;
     else
          memC <= #1 memNextC;

majorityVoter #(.WIDTH(8)) memVoterA (
          .inA(memA),
          .inB(memB),
          .inC(memC),
          .out(memVotedA),
          .tmrErr(memTmrErrorA)
          );
assign tmrErrorA =  memTmrErrorA;

majorityVoter #(.WIDTH(8)) memVoterB (
          .inA(memA),
          .inB(memB),
          .inC(memC),
          .out(memVotedB),
          .tmrErr(memTmrErrorB)
          );
assign tmrErrorB =  memTmrErrorB;

majorityVoter #(.WIDTH(8)) memVoterC (
          .inA(memA),
          .inB(memB),
          .inC(memC),
          .out(memVotedC),
          .tmrErr(memTmrErrorC)
          );
assign tmrErrorC =  memTmrErrorC;
endmodule

