/****************************************************************************************************
 *                          ! THIS FILE WAS AUTO-GENERATED BY TMRG TOOL !                           *
 *                                   ! DO NOT EDIT IT MANUALLY !                                    *
 *                                                                                                  *
 * file    : ../output/pixelDigitalTMR.v                                                            *
 *                                                                                                  *
 * user    : qsun                                                                                   *
 * host    : sphy7asic02.smu.edu                                                                    *
 * date    : 24/01/2022 12:04:54                                                                    *
 *                                                                                                  *
 * workdir : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/i2c_backend_v5/tmr/work           *
 * cmd     : /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/tmrg/bin/tmrg --log tmrg.log      *
 *           --include --inc-dir /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/rtl *
 *           --lib ../simplified_std_cell_lib.v --lib                                               *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/powerOnResetLong.v *
 *           --lib /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/IO_1P2V_C4.v *
 *           --lib                                                                                  *
 *           /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git1/etroc2/libs/customDigitalLib.v *
 *           -c ../config/tmrg.cnf                                                                  *
 * tmrg rev:                                                                                        *
 *                                                                                                  *
 * src file: /users/qsun/workarea/tsmc65nm/ETROC_PLL/digital_work/git2/etroc2/rtl/pixelDigital.v    *
 *           File is NOT under version control!                                                     *
 *           Modification time : 2022-01-24 11:17:45.235036                                         *
 *           File Size         : 7703                                                               *
 *           MD5 hash          : a294d2d245fc58efc16fe26e66e71392                                   *
 *                                                                                                  *
 ****************************************************************************************************/

`timescale  1ps/1ps
module pixelDigitalInBufTMR #(
  parameter WIDTH=16
)(
     input [WIDTH-1:0] IA,
     input [WIDTH-1:0] IB,
     input [WIDTH-1:0] IC,
     output [WIDTH-1:0] ZA,
     output [WIDTH-1:0] ZB,
     output [WIDTH-1:0] ZC
);
genvar i;

generate
     for(i =  0;i<WIDTH;i =  i+1)
          begin 

               CKBD4 B_preserveA (
                         .I(IA[i] ),
                         .Z(ZA[i] )
                         );

               CKBD4 B_preserveB (
                         .I(IB[i] ),
                         .Z(ZB[i] )
                         );

               CKBD4 B_preserveC (
                         .I(IC[i] ),
                         .Z(ZC[i] )
                         );
          end

endgenerate
endmodule

module pixelDigitalOutBufTMR #(
  parameter WIDTH=16
)(
     input [WIDTH-1:0] IA,
     input [WIDTH-1:0] IB,
     input [WIDTH-1:0] IC,
     output [WIDTH-1:0] ZA,
     output [WIDTH-1:0] ZB,
     output [WIDTH-1:0] ZC
);
genvar i;

generate
     for(i =  0;i<WIDTH;i =  i+1)
          begin 

               CKBD8 B_preserveA (
                         .I(IA[i] ),
                         .Z(ZA[i] )
                         );

               CKBD8 B_preserveB (
                         .I(IB[i] ),
                         .Z(ZB[i] )
                         );

               CKBD8 B_preserveC (
                         .I(IC[i] ),
                         .Z(ZC[i] )
                         );
          end

endgenerate
endmodule

module pixelDigitalTMR #(
  parameter REGS=32,
  parameter [255:0] DEFAULT_VALUE=256'h0
)(
     input [3:0] pixelAddrInA,
     input [3:0] pixelAddrInB,
     input [3:0] pixelAddrInC,
     input  busRstInA,
     input  busRstInB,
     input  busRstInC,
     input  busWeInA,
     input  busWeInB,
     input  busWeInC,
     input  busClkInA,
     input  busClkInB,
     input  busClkInC,
     input  busReInA,
     input  busReInB,
     input  busReInC,
     input [15:0] busAddrInA,
     input [15:0] busAddrInB,
     input [15:0] busAddrInC,
     input [7:0] busDataMosiInA,
     input [7:0] busDataMosiInB,
     input [7:0] busDataMosiInC,
     input [3:0] colAddrInA,
     input [3:0] colAddrInB,
     input [3:0] colAddrInC,
     output [7:0] busDataMisoOutA,
     output [7:0] busDataMisoOutB,
     output [7:0] busDataMisoOutC,
     output  busTmrErrorOutA,
     output  busTmrErrorOutB,
     output  busTmrErrorOutC,
     output [3:0] pixelAddrNextOutA,
     output [3:0] pixelAddrNextOutB,
     output [3:0] pixelAddrNextOutC,
     output  busRstOutA,
     output  busRstOutB,
     output  busRstOutC,
     output  busWeOutA,
     output  busWeOutB,
     output  busWeOutC,
     output  busClkOutA,
     output  busClkOutB,
     output  busClkOutC,
     output  busReOutA,
     output  busReOutB,
     output  busReOutC,
     output [15:0] busAddrOutA,
     output [15:0] busAddrOutB,
     output [15:0] busAddrOutC,
     output [3:0] colAddrOutA,
     output [3:0] colAddrOutB,
     output [3:0] colAddrOutC,
     output [7:0] busDataMosiOutA,
     output [7:0] busDataMosiOutB,
     output [7:0] busDataMosiOutC,
     input [7:0] busDataMisoInA,
     input [7:0] busDataMisoInB,
     input [7:0] busDataMisoInC,
     input  busTmrErrorInA,
     input  busTmrErrorInB,
     input  busTmrErrorInC,
     input [REGS*8-1:0] defaultPixelConfig,
     output [REGS*8-1:0] pixelConfig,
     input [8*8-1:0] pixelStatus,
     output [7:0] pixelID,
     output  HIGH,
     output  LOW,
     inout VDD,
     inout VSS
);
wire [8*8-1:0] pixelStatusC;
wire [8*8-1:0] pixelStatusB;
wire [8*8-1:0] pixelStatusA;
wire [REGS*8-1:0] defaultPixelConfigC;
wire [REGS*8-1:0] defaultPixelConfigB;
wire [REGS*8-1:0] defaultPixelConfigA;
wire tmrErrorC;
wor MCtmrErrorC;
wire tmrErrorB;
wor MCtmrErrorB;
wire tmrErrorA;
wor MCtmrErrorA;
wire tmrError;
wor pixelIDTmrError;
wor pixelConfigTmrError;
wire [7:0] pixelIDB;
wire [7:0] pixelIDC;
wire [7:0] pixelIDA;
wire [REGS*8-1:0] pixelConfigB;
wire [REGS*8-1:0] pixelConfigC;
wire [REGS*8-1:0] pixelConfigA;
wire [63:0] pixelStatusBufA;
wire [63:0] pixelStatusBufB;
wire [63:0] pixelStatusBufC;
wire [15:0] busAddrInBufA;
wire [15:0] busAddrInBufB;
wire [15:0] busAddrInBufC;
wire [7:0] busDataMosiInBufA;
wire [7:0] busDataMosiInBufB;
wire [7:0] busDataMosiInBufC;
wire [7:0] busDataMisoInBufA;
wire [7:0] busDataMisoInBufB;
wire [7:0] busDataMisoInBufC;
wire [3:0] pixelAddrInBufA;
wire [3:0] pixelAddrInBufB;
wire [3:0] pixelAddrInBufC;
wire [3:0] colAddrInBufA;
wire [3:0] colAddrInBufB;
wire [3:0] colAddrInBufC;
wire busRstInBufA;
wire busRstInBufB;
wire busRstInBufC;
wire busWeInBufA;
wire busWeInBufB;
wire busWeInBufC;
wire busClkInBufA;
wire busClkInBufB;
wire busClkInBufC;
wire busReInBufA;
wire busReInBufB;
wire busReInBufC;
wire busTmrErrorBufA;
wire busTmrErrorBufB;
wire busTmrErrorBufC;
wire busTmrErrorInBufA;
wire busTmrErrorInBufB;
wire busTmrErrorInBufC;

pixelDigitalInBufTMR #(.WIDTH(4)) IB_PA (
          .IA(pixelAddrInA),
          .IB(pixelAddrInB),
          .IC(pixelAddrInC),
          .ZA(pixelAddrInBufA),
          .ZB(pixelAddrInBufB),
          .ZC(pixelAddrInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(1)) IB_BRST (
          .IA(busRstInA),
          .IB(busRstInB),
          .IC(busRstInC),
          .ZA(busRstInBufA),
          .ZB(busRstInBufB),
          .ZC(busRstInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(1)) IB_BWE (
          .IA(busWeInA),
          .IB(busWeInB),
          .IC(busWeInC),
          .ZA(busWeInBufA),
          .ZB(busWeInBufB),
          .ZC(busWeInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(1)) IB_BCLK (
          .IA(busClkInA),
          .IB(busClkInB),
          .IC(busClkInC),
          .ZA(busClkInBufA),
          .ZB(busClkInBufB),
          .ZC(busClkInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(1)) IB_BRE (
          .IA(busReInA),
          .IB(busReInB),
          .IC(busReInC),
          .ZA(busReInBufA),
          .ZB(busReInBufB),
          .ZC(busReInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(16)) IB_ADR (
          .IA(busAddrInA),
          .IB(busAddrInB),
          .IC(busAddrInC),
          .ZA(busAddrInBufA),
          .ZB(busAddrInBufB),
          .ZC(busAddrInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(8)) IB_MOSI (
          .IA(busDataMosiInA),
          .IB(busDataMosiInB),
          .IC(busDataMosiInC),
          .ZA(busDataMosiInBufA),
          .ZB(busDataMosiInBufB),
          .ZC(busDataMosiInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(4)) IB_COLA (
          .IA(colAddrInA),
          .IB(colAddrInB),
          .IC(colAddrInC),
          .ZA(colAddrInBufA),
          .ZB(colAddrInBufB),
          .ZC(colAddrInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(8)) IB_MISO (
          .IA(busDataMisoInA),
          .IB(busDataMisoInB),
          .IC(busDataMisoInC),
          .ZA(busDataMisoInBufA),
          .ZB(busDataMisoInBufB),
          .ZC(busDataMisoInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(1)) IB_TMRE (
          .IA(busTmrErrorInA),
          .IB(busTmrErrorInB),
          .IC(busTmrErrorInC),
          .ZA(busTmrErrorInBufA),
          .ZB(busTmrErrorInBufB),
          .ZC(busTmrErrorInBufC)
          );

pixelDigitalInBufTMR #(.WIDTH(64)) IB_PS (
          .IA(pixelStatusA),
          .IB(pixelStatusB),
          .IC(pixelStatusC),
          .ZA(pixelStatusBufA),
          .ZB(pixelStatusBufB),
          .ZC(pixelStatusBufC)
          );
wire broadcastA =  (busAddrInBufA[13] ==1'b1);
wire broadcastB =  (busAddrInBufB[13] ==1'b1);
wire broadcastC =  (busAddrInBufC[13] ==1'b1);
wire [255:0] pixelConfigIntA;
wire [255:0] pixelConfigIntB;
wire [255:0] pixelConfigIntC;
wire [7:0] busDataMisoMaskedA =  (pixelAddrInBufA==4'hF) ? 8'h0 : busDataMisoInBufA;
wire [7:0] busDataMisoMaskedB =  (pixelAddrInBufB==4'hF) ? 8'h0 : busDataMisoInBufB;
wire [7:0] busDataMisoMaskedC =  (pixelAddrInBufC==4'hF) ? 8'h0 : busDataMisoInBufC;
wire busTmrErrorMaskedA =  (pixelAddrInBufA==4'hF) ? 1'h0 : busTmrErrorInBufA;
wire busTmrErrorMaskedB =  (pixelAddrInBufB==4'hF) ? 1'h0 : busTmrErrorInBufB;
wire busTmrErrorMaskedC =  (pixelAddrInBufC==4'hF) ? 1'h0 : busTmrErrorInBufC;
wire pixelSelectedA =  (busAddrInBufA[8:5] ==pixelAddrInBufA);
wire pixelSelectedB =  (busAddrInBufB[8:5] ==pixelAddrInBufB);
wire pixelSelectedC =  (busAddrInBufC[8:5] ==pixelAddrInBufC);
wire [REGS-1:0] regSelectA =  1'b1<<busAddrInBufA[4:0] ;
wire [REGS-1:0] regSelectB =  1'b1<<busAddrInBufB[4:0] ;
wire [REGS-1:0] regSelectC =  1'b1<<busAddrInBufC[4:0] ;
wire writeA =  busWeInBufA&(pixelSelectedA|broadcastA);
wire writeB =  busWeInBufB&(pixelSelectedB|broadcastB);
wire writeC =  busWeInBufC&(pixelSelectedC|broadcastC);
wire [REGS-1:0] regWeA =  regSelectA&{REGS{writeA}};
wire [REGS-1:0] regWeB =  regSelectB&{REGS{writeB}};
wire [REGS-1:0] regWeC =  regSelectC&{REGS{writeC}};
wire [7:0] reg_read_mux_read_writeA =  busAddrInBufA[4:0] <REGS ? pixelConfigIntA[busAddrInBufA[4:0] *8+:8]  : 8'b0;
wire [7:0] reg_read_mux_read_writeB =  busAddrInBufB[4:0] <REGS ? pixelConfigIntB[busAddrInBufB[4:0] *8+:8]  : 8'b0;
wire [7:0] reg_read_mux_read_writeC =  busAddrInBufC[4:0] <REGS ? pixelConfigIntC[busAddrInBufC[4:0] *8+:8]  : 8'b0;
wire [7:0] reg_read_mux_read_onlyA =  busAddrInBufA[2:0] <REGS ? pixelStatusBufA[busAddrInBufA[2:0] *8+:8]  : 8'b0;
wire [7:0] reg_read_mux_read_onlyB =  busAddrInBufB[2:0] <REGS ? pixelStatusBufB[busAddrInBufB[2:0] *8+:8]  : 8'b0;
wire [7:0] reg_read_mux_read_onlyC =  busAddrInBufC[2:0] <REGS ? pixelStatusBufC[busAddrInBufC[2:0] *8+:8]  : 8'b0;
wire [7:0] reg_read_muxA =  busAddrInBufA[14]  ? reg_read_mux_read_onlyA : reg_read_mux_read_writeA;
wire [7:0] reg_read_muxB =  busAddrInBufB[14]  ? reg_read_mux_read_onlyB : reg_read_mux_read_writeB;
wire [7:0] reg_read_muxC =  busAddrInBufC[14]  ? reg_read_mux_read_onlyC : reg_read_mux_read_writeC;
wire [3:0] pixelAddrNextOutIntA =  pixelAddrInBufA+4'b1;
wire [3:0] pixelAddrNextOutIntB =  pixelAddrInBufB+4'b1;
wire [3:0] pixelAddrNextOutIntC =  pixelAddrInBufC+4'b1;
wire busRstOutIntA =  busRstInBufA;
wire busRstOutIntB =  busRstInBufB;
wire busRstOutIntC =  busRstInBufC;
wire busWeOutIntA =  busWeInBufA;
wire busWeOutIntB =  busWeInBufB;
wire busWeOutIntC =  busWeInBufC;
wire busReOutIntA =  busReInBufA;
wire busReOutIntB =  busReInBufB;
wire busReOutIntC =  busReInBufC;
wire [15:0] busAddrOutIntA =  busAddrInBufA;
wire [15:0] busAddrOutIntB =  busAddrInBufB;
wire [15:0] busAddrOutIntC =  busAddrInBufC;
wire [7:0] busDataMosiOutIntA =  busDataMosiInBufA;
wire [7:0] busDataMosiOutIntB =  busDataMosiInBufB;
wire [7:0] busDataMosiOutIntC =  busDataMosiInBufC;
wire busTmrErrorOutIntA =  busTmrErrorMaskedA|tmrErrorA;
wire busTmrErrorOutIntB =  busTmrErrorMaskedB|tmrErrorB;
wire busTmrErrorOutIntC =  busTmrErrorMaskedC|tmrErrorC;
wire busClkOutIntA =  busClkInBufA;
wire busClkOutIntB =  busClkInBufB;
wire busClkOutIntC =  busClkInBufC;
wire [7:0] busDataMisoOutIntA =  (pixelSelectedA ? reg_read_muxA : 8'h0)|busDataMisoMaskedA;
wire [7:0] busDataMisoOutIntB =  (pixelSelectedB ? reg_read_muxB : 8'h0)|busDataMisoMaskedB;
wire [7:0] busDataMisoOutIntC =  (pixelSelectedC ? reg_read_muxC : 8'h0)|busDataMisoMaskedC;
wire [7:0] pixelIDIntA =  {colAddrInBufA,pixelAddrInBufA};
wire [7:0] pixelIDIntB =  {colAddrInBufB,pixelAddrInBufB};
wire [7:0] pixelIDIntC =  {colAddrInBufC,pixelAddrInBufC};
wire [3:0] colAddrOutIntA =  colAddrInBufA;
wire [3:0] colAddrOutIntB =  colAddrInBufB;
wire [3:0] colAddrOutIntC =  colAddrInBufC;
wire clkGatedA;
wire clkGatedB;
wire clkGatedC;
wire clkEnableA =  broadcastA|pixelSelectedA|tmrErrorA;
wire clkEnableB =  broadcastB|pixelSelectedB|tmrErrorB;
wire clkEnableC =  broadcastC|pixelSelectedC|tmrErrorC;

CKLNQD6 CG_preserveA (
          .CP(busClkInBufA),
          .Q(clkGatedA),
          .TE(1'b0),
          .E(clkEnableA)
          );

CKLNQD6 CG_preserveB (
          .CP(busClkInBufB),
          .Q(clkGatedB),
          .TE(1'b0),
          .E(clkEnableB)
          );

CKLNQD6 CG_preserveC (
          .CP(busClkInBufC),
          .Q(clkGatedC),
          .TE(1'b0),
          .E(clkEnableC)
          );
genvar r;

generate
     for(r =  0;r<REGS;r =  r+1)
          begin : REG 

               memoryCellTMR MC (
                         .rstA(busRstInBufA),
                         .rstB(busRstInBufB),
                         .rstC(busRstInBufC),
                         .clkA(clkGatedA),
                         .clkB(clkGatedB),
                         .clkC(clkGatedC),
                         .dataInA(busDataMosiInBufA),
                         .dataInB(busDataMosiInBufB),
                         .dataInC(busDataMosiInBufC),
                         .loadA(regWeA[r] ),
                         .loadB(regWeB[r] ),
                         .loadC(regWeC[r] ),
                         .dataOutA(pixelConfigIntA[r*8+:8] ),
                         .dataOutB(pixelConfigIntB[r*8+:8] ),
                         .dataOutC(pixelConfigIntC[r*8+:8] ),
                         .defaultValueA(defaultPixelConfigA[r*8+:8] ),
                         .defaultValueB(defaultPixelConfigB[r*8+:8] ),
                         .defaultValueC(defaultPixelConfigC[r*8+:8] ),
                         .tmrErrorA(MCtmrErrorA),
                         .tmrErrorB(MCtmrErrorB),
                         .tmrErrorC(MCtmrErrorC)
                         );
          end

endgenerate

TIEL TIELOW (
          .ZN(LOW)
          );

TIEH TIEHIGH (
          .Z(HIGH)
          );

pixelDigitalOutBufTMR #(.WIDTH(8)) OB_PID (
          .IA(pixelIDIntA),
          .IB(pixelIDIntB),
          .IC(pixelIDIntC),
          .ZA(pixelIDA),
          .ZB(pixelIDB),
          .ZC(pixelIDC)
          );

pixelDigitalOutBufTMR #(.WIDTH(4)) OB_PA (
          .IA(pixelAddrNextOutIntA),
          .IB(pixelAddrNextOutIntB),
          .IC(pixelAddrNextOutIntC),
          .ZA(pixelAddrNextOutA),
          .ZB(pixelAddrNextOutB),
          .ZC(pixelAddrNextOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(1)) OB_BRST (
          .IA(busRstOutIntA),
          .IB(busRstOutIntB),
          .IC(busRstOutIntC),
          .ZA(busRstOutA),
          .ZB(busRstOutB),
          .ZC(busRstOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(1)) OB_BWE (
          .IA(busWeOutIntA),
          .IB(busWeOutIntB),
          .IC(busWeOutIntC),
          .ZA(busWeOutA),
          .ZB(busWeOutB),
          .ZC(busWeOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(1)) OB_BCLK (
          .IA(busClkOutIntA),
          .IB(busClkOutIntB),
          .IC(busClkOutIntC),
          .ZA(busClkOutA),
          .ZB(busClkOutB),
          .ZC(busClkOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(1)) OB_BRE (
          .IA(busReOutIntA),
          .IB(busReOutIntB),
          .IC(busReOutIntC),
          .ZA(busReOutA),
          .ZB(busReOutB),
          .ZC(busReOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(16)) OB_ADR (
          .IA(busAddrOutIntA),
          .IB(busAddrOutIntB),
          .IC(busAddrOutIntC),
          .ZA(busAddrOutA),
          .ZB(busAddrOutB),
          .ZC(busAddrOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(8)) OB_MOSI (
          .IA(busDataMosiOutIntA),
          .IB(busDataMosiOutIntB),
          .IC(busDataMosiOutIntC),
          .ZA(busDataMosiOutA),
          .ZB(busDataMosiOutB),
          .ZC(busDataMosiOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(4)) OB_COLA (
          .IA(colAddrOutIntA),
          .IB(colAddrOutIntB),
          .IC(colAddrOutIntC),
          .ZA(colAddrOutA),
          .ZB(colAddrOutB),
          .ZC(colAddrOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(8)) OB_MISO (
          .IA(busDataMisoOutIntA),
          .IB(busDataMisoOutIntB),
          .IC(busDataMisoOutIntC),
          .ZA(busDataMisoOutA),
          .ZB(busDataMisoOutB),
          .ZC(busDataMisoOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(1)) OB_TMRE (
          .IA(busTmrErrorOutIntA),
          .IB(busTmrErrorOutIntB),
          .IC(busTmrErrorOutIntC),
          .ZA(busTmrErrorOutA),
          .ZB(busTmrErrorOutB),
          .ZC(busTmrErrorOutC)
          );

pixelDigitalOutBufTMR #(.WIDTH(256)) OB_PC (
          .IA(pixelConfigIntA),
          .IB(pixelConfigIntB),
          .IC(pixelConfigIntC),
          .ZA(pixelConfigA),
          .ZB(pixelConfigB),
          .ZC(pixelConfigC)
          );

majorityVoter #(.WIDTH(((REGS*8-1)>(0)) ? ((REGS*8-1)-(0)+1) : ((0)-(REGS*8-1)+1))) pixelConfigVoter (
          .inA(pixelConfigA),
          .inB(pixelConfigB),
          .inC(pixelConfigC),
          .out(pixelConfig),
          .tmrErr(pixelConfigTmrError)
          );

majorityVoter #(.WIDTH(8)) pixelIDVoter (
          .inA(pixelIDA),
          .inB(pixelIDB),
          .inC(pixelIDC),
          .out(pixelID),
          .tmrErr(pixelIDTmrError)
          );
assign tmrError =  pixelConfigTmrError|pixelIDTmrError;
assign tmrErrorA =  MCtmrErrorA;
assign tmrErrorB =  MCtmrErrorB;
assign tmrErrorC =  MCtmrErrorC;

fanout #(.WIDTH(((REGS*8-1)>(0)) ? ((REGS*8-1)-(0)+1) : ((0)-(REGS*8-1)+1))) defaultPixelConfigFanout (
          .in(defaultPixelConfig),
          .outA(defaultPixelConfigA),
          .outB(defaultPixelConfigB),
          .outC(defaultPixelConfigC)
          );

fanout #(.WIDTH(64)) pixelStatusFanout (
          .in(pixelStatus),
          .outA(pixelStatusA),
          .outB(pixelStatusB),
          .outC(pixelStatusC)
          );
endmodule

